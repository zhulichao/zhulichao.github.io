<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CSS 基础]]></title>
      <url>https://zhulichao.github.io/2021/06/11/css-fj/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BFC（块级格式化上下文）"><a href="#BFC（块级格式化上下文）" class="headerlink" title="BFC（块级格式化上下文）"></a>BFC（块级格式化上下文）</h2><p>块级格式化上下文，是一个独立的渲染区域，并且有一定的布局规则，可用于清除浮动，防止 margin 重叠等。</p>
<ul>
<li>BFC 区域不会与浮动元素重叠，浮动元素也會参与高度计算</li>
<li>BFC 是页面上的一个独立容器，子元素不会影响到外面</li>
<li>哪些元素会生成 BFC<ul>
<li>根元素</li>
<li>float 不为 none 的元素</li>
<li>position 为 fixed 和 absolute 的元素</li>
<li>display 为 inline-block、table-cell、table-caption，flex，inline-flex 的元素</li>
<li>overflow 不为 visible 的元素</li>
</ul>
</li>
</ul>
<h2 id="overflow-的原理"><a href="#overflow-的原理" class="headerlink" title="overflow 的原理"></a>overflow 的原理</h2><p>要讲清楚这个解决方案的原理，首先需要了解块格式化上下文。块格式化上下文是 CSS 可视化渲染的一部分，它是一块区域，规定了内部块的渲染方式，以及浮动相互之间的影响关系，当元素设置了 overflow 样式且值不为 visible 时，该元素就构建了一个 BFC，BFC 在计算高度时，内部浮动元素的高度也要计算在内，也就是说即使 BFC 区域内只有一个浮动元素，BFC 的高度也不会发生塌缩，所以达到了清除浮动的目的。</p>
<h2 id="垂直居中的方法"><a href="#垂直居中的方法" class="headerlink" title="垂直居中的方法"></a>垂直居中的方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.inner</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">480px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">380px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">190px</span>; <span class="comment">/*height 的一半，也可以用 transform：translateY(-50%) */</span>  </div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">240px</span>; <span class="comment">/*width 的一半，也可以用 transform：translateX(-50%) */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">   <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说一下块元素和行元素"><a href="#说一下块元素和行元素" class="headerlink" title="说一下块元素和行元素"></a>说一下块元素和行元素</h2><p>块元素：独占一行，并且有自动填满父元素，可以设置 margin 和 padding 以及高度和宽度<br>行元素：不会独占一行，width 和 height 会失效，并且在垂直方向的 padding 和 margin 会失效</p>
<h2 id="visibility-hidden-opacity-0，display-none"><a href="#visibility-hidden-opacity-0，display-none" class="headerlink" title="visibility=hidden, opacity=0，display:none"></a>visibility=hidden, opacity=0，display:none</h2><ul>
<li><code>opacity=0</code> 该元素隐藏起来了，但不会改变页面布局，会触发该元素已经绑定的事件</li>
<li><code>visibility=hidden</code> 该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件</li>
<li><code>display=none</code> 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样</li>
</ul>
<h2 id="float-的元素-display-是什么值"><a href="#float-的元素-display-是什么值" class="headerlink" title="float 的元素 display 是什么值"></a>float 的元素 display 是什么值</h2><p>float 的元素，display 是 block。</p>
<h2 id="z-index-的定位方法"><a href="#z-index-的定位方法" class="headerlink" title="z-index 的定位方法"></a>z-index 的定位方法</h2><p>z-index 属性设置元素的堆叠顺序，拥有更好堆叠顺序的元素会处于较低顺序元素之前， z-index 可以为负，且 z-index 只能在定位元素上奏效，该属性设置一个定位元素沿 z 轴的位置，如果为正数，离用户越近，为负数，离用户越远，它的属性值有 auto（默认，堆叠顺序与父元素相等），number，inherit（从父元素继承 z-index 属性的值）。</p>
<h2 id="了解重绘和重排吗，知道怎么去减少重绘和重排吗，让文档脱离文档流有哪些方法"><a href="#了解重绘和重排吗，知道怎么去减少重绘和重排吗，让文档脱离文档流有哪些方法" class="headerlink" title="了解重绘和重排吗，知道怎么去减少重绘和重排吗，让文档脱离文档流有哪些方法"></a>了解重绘和重排吗，知道怎么去减少重绘和重排吗，让文档脱离文档流有哪些方法</h2><p>DOM 的变化影响到了预算内宿的几何属性比如宽高，浏览器重新计算元素的几何属性， 其他元素的几何属性也会受到影响，浏览器需要重新构造渲染书，这个过程称之为重排， 浏览器将受到影响的部分重新绘制在屏幕上 的过程称为重绘，引起重排重绘的原因有： 添加或者删除可见的 DOM 元素， 元素尺寸位置的改变 浏览器页面初始化， 浏览器窗口大小发生改变，重排一定导致重绘，重绘不一定导致重排， 减少重绘重排的方法有： 不在布局信息改变时做 DOM 查询， 使用 csstext,className 一次性改变属性 使用 fragment 对于多次重排的元素，比如说动画。使用绝对定位脱离文档流，使其不影响其他元素</p>
<h2 id="js-动画-和-css-动画的区别"><a href="#js-动画-和-css-动画的区别" class="headerlink" title="js 动画 和 css 动画的区别"></a>js 动画 和 css 动画的区别</h2><h3 id="js-动画"><a href="#js-动画" class="headerlink" title="js 动画"></a>js 动画</h3><p>首先，js动画是逐帧动画，几乎可以完成您想要的任何动画形式。但因为内容不同会增加生产负担，并且资源占用相对较大。但是它的优点也很明显：非常适合执行非常精致的动画，例如3D效果，人物或动物的急转弯等。但是，如果帧速率太低，则从一个帧到另一个帧的过渡很可能是不自然且不一致的。</p>
<p>缺点：</p>
<ul>
<li>JavaScript在浏览器的主线程中运行，还有其他JavaScript脚本、样式计算、布局、绘图任务需要在主线程中运行。干扰它们可能导致线程阻塞，从而导致帧丢失。</li>
<li>代码复杂度高于CSS动画。</li>
</ul>
<p>优点：</p>
<ul>
<li>JavaScript动画控制能力很强，可以控制动画在播放过程中：开始、暂停、播放、终止、取消都可以完成。</li>
<li>动画效果比CSS3动画更丰富，一些动画效果，如曲线运动、冲击闪烁、视差滚动等效果，只有JavaScript动画才能完成。</li>
<li>CSS3有兼容性问题，而JS大多数时候没有兼容性问题。</li>
</ul>
<h3 id="css-动画"><a href="#css-动画" class="headerlink" title="css 动画"></a>css 动画</h3><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。当实现一些简单的滑动，翻转和其他特殊效果时，Css3非常方便，但是当你想要实现一些很酷的效果时，它的操作通常比js操作具有更多的冗余。</p>
<p>缺点：</p>
<ul>
<li>运行过程的控制较弱，不可能附加事件绑定回调函数。 CSS动画只能暂停，无法在动画中找到特定的时间点，不能中途反转动画，无法更改时间比例，无法添加回调函数或将播放事件绑定到特定位置，并且没有进度报告</li>
<li>代码冗长。 如果您想使用CSS来实现稍微复杂一点的动画，那么CSS代码最终将变得非常繁琐。</li>
</ul>
<p>优点：</p>
<ul>
<li>浏览器可以优化动画。</li>
<li>代码相对简单，并且性能调整方向是固定的。</li>
<li>对于帧速率性能较差的低版本浏览器，CSS3可以自然降级，而JS需要编写其他代码。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 基础]]></title>
      <url>https://zhulichao.github.io/2021/06/09/http-html-browser/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="click-在-ios-上有-300ms-延迟，原因及如何解决"><a href="#click-在-ios-上有-300ms-延迟，原因及如何解决" class="headerlink" title="click 在 ios 上有 300ms 延迟，原因及如何解决"></a>click 在 ios 上有 300ms 延迟，原因及如何解决</h2><p>问题：双击缩放(double tap to zoom)，是会有 300 毫秒延迟的主要原因。当用户一次点击屏幕之后，浏览器并不能立刻判断用户是要进行双击缩放，还是想要进行单击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。</p>
<p>解决方案：</p>
<ul>
<li>使用 <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">FastClick</a> 库，FastClick 在检测到 touchend 事件的时候，会通过 DOM 自定义事件立即触发一个模拟click 事件的click事件（自定义事件），并把浏览器在 300 毫秒之后真正触发的 click 事件阻止掉。</li>
<li>禁用缩放。<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no&quot;&gt;</code></li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>强缓存：从缓存取，状态码为 200，不发送请求到服务器。相关字段 expires、cache-control，cache-control 优先级高</p>
<p>协商缓存：从缓存取，状态码为 304，发送请求到服务器。相关字段 Last-Modified/If-Modified-Since，Etag/If-None-Match</p>
<p><a href="https://segmentfault.com/a/1190000008956069" target="_blank" rel="external">HTTP强缓存和协商缓存</a></p>
<h2 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h2><ul>
<li>减少 HTTP 请求数量</li>
<li>minify / gzip 压缩</li>
<li>lazyLoad</li>
<li>预解析 DNS</li>
<li>使用 CDN</li>
<li>缓存</li>
<li>加载顺序优化</li>
<li>服务端渲染</li>
</ul>
<h2 id="输入-URL-到页面至加载显示完成，发生了什么"><a href="#输入-URL-到页面至加载显示完成，发生了什么" class="headerlink" title="输入 URL 到页面至加载显示完成，发生了什么?"></a>输入 URL 到页面至加载显示完成，发生了什么?</h2><ul>
<li>DNS 解析：浏览器缓存 -&gt; 系统缓存 -&gt; 路由器缓存 -&gt; hosts 文件 -&gt; DNS 服务器，得到服务器的 ip 地址</li>
<li>TCP 连接</li>
<li>发送 HTTP 请求</li>
<li>服务器处理请求并返回 HTTP 报文</li>
<li>浏览器解析渲染页面：构建 DOM 树，在 DOM 树的构建过程中如果遇到 JS 脚本和外部 JS 连接，则会停止构建 DOM 树来执行和下载相应的代码，这会造成阻塞，这就是为什么推荐 JS 代码应该放在 html 代码的后面；构建 CSSOM 树；合并为渲染树，渲染页面；解析 DOM 过程中如果遇到图片、视频、音频等资源，会并行下载</li>
<li>连接结束</li>
</ul>
<h2 id="什么时候用-304？"><a href="#什么时候用-304？" class="headerlink" title="什么时候用 304？"></a>什么时候用 304？</h2><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个 304 状态码。</p>
<h2 id="link-标签和-import-标签的区别"><a href="#link-标签和-import-标签的区别" class="headerlink" title="link 标签和 import 标签的区别"></a>link 标签和 import 标签的区别</h2><ul>
<li>link 属于 html 标签，因此没有兼容性，而@import 是 css 提供的，只有 IE5 以上才能识别</li>
<li>link 方式样式的权重高于 @import 的</li>
<li>页面被加载时，link 会同时被加载，而@import 引用的 css 会等到页面加载结束后加载</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 基础]]></title>
      <url>https://zhulichao.github.io/2021/06/04/sohu-web/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自己实现一个-bind-函数"><a href="#自己实现一个-bind-函数" class="headerlink" title="自己实现一个 bind 函数"></a>自己实现一个 bind 函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">obj, ...arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">var</span> bound = <span class="function"><span class="keyword">function</span> (<span class="params">...newArg</span>) </span>&#123;</div><div class="line">    arg = arg.concat(newArg);</div><div class="line">    <span class="keyword">return</span> context.apply(obj, arg);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">  F.prototype = context.prototype;</div><div class="line">  bound.prototype = <span class="keyword">new</span> F();</div><div class="line">  <span class="keyword">return</span> bound;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">  <span class="built_in">console</span>.log(b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> newFunc = func.bind(&#123; <span class="keyword">new</span>: <span class="literal">true</span> &#125;, <span class="number">1</span>);</div><div class="line">newFunc(<span class="number">2</span>);</div></pre></td></tr></table></figure>
<h2 id="累加输出"><a href="#累加输出" class="headerlink" title="累加输出"></a>累加输出</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getId = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i++;</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h2 id="实现一个-add-方法"><a href="#实现一个-add-方法" class="headerlink" title="实现一个 add 方法"></a>实现一个 add 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) = <span class="number">6</span>;</div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>) = <span class="number">10</span>;</div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>) = <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args1</span>) </span>&#123;</div><div class="line">  <span class="comment">// 第一次执行时，定义一个数组专门用来存储所有的参数</span></div><div class="line">  <span class="keyword">var</span> _args = [...args1];</div><div class="line"></div><div class="line">  <span class="comment">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span></div><div class="line">  <span class="keyword">var</span> _adder = <span class="function"><span class="keyword">function</span>(<span class="params">...args2</span>) </span>&#123;</div><div class="line">      _args.push(...args2);</div><div class="line">      <span class="keyword">return</span> _adder;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span></div><div class="line">  _adder.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> _args.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> a + b;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> _adder;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)                <span class="comment">// 6</span></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)             <span class="comment">// 10</span></div><div class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)          <span class="comment">// 15</span></div><div class="line">add(<span class="number">2</span>, <span class="number">6</span>)(<span class="number">1</span>)                <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<h2 id="B-继承-A"><a href="#B-继承-A" class="headerlink" title="B 继承 A"></a>B 继承 A</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">...</span>) </span>&#123;&#125;</div><div class="line">A.prototype...</div><div class="line">function B(...) &#123;&#125;</div><div class="line">B.prototype...</div><div class="line"></div><div class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</div><div class="line"><span class="comment">// 再在 A 的构造函数里 new B(props);</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">40</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();</div><div class="line">Child.prototype.constructor = Child;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child();</div><div class="line"><span class="built_in">console</span>.log(c.name); <span class="comment">// parent</span></div><div class="line"><span class="built_in">console</span>.log(c.age); <span class="comment">// 40</span></div><div class="line"><span class="built_in">console</span>.log(Child.prototype.constructor); <span class="comment">// Child 函数</span></div></pre></td></tr></table></figure>
<h2 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h2><ul>
<li>一般对象和数组对象的克隆</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(item)) &#123;</div><div class="line">      newObj[item] =</div><div class="line">        <span class="keyword">typeof</span> obj[item] == <span class="string">'object'</span> ? deepClone(obj[item]) : obj[item];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> copy;</div><div class="line">  <span class="keyword">switch</span> (<span class="keyword">typeof</span> obj) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'undefined'</span>:</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</div><div class="line">      copy = obj - <span class="number">0</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</div><div class="line">      copy = obj + <span class="string">''</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</div><div class="line">      copy = obj;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</div><div class="line">      <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</div><div class="line">        copy = <span class="literal">null</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Array'</span>) &#123;</div><div class="line">          copy = [];</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</div><div class="line">            copy.push(clone(obj[i]));</div><div class="line">          &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          copy = &#123;&#125;;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> obj) &#123;</div><div class="line">            copy[j] = clone(obj[j]);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      copy = obj;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> copy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这个方法不能够拷贝函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div></pre></td></tr></table></figure>
<h2 id="代码的执行顺序"><a href="#代码的执行顺序" class="headerlink" title="代码的执行顺序"></a>代码的执行顺序</h2><p>参考<a href="https://juejin.cn/post/6844903512845860872" target="_blank" rel="external">这一次，彻底弄懂 JavaScript 执行机制</a></p>
<p>任务队列中，在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microsoft 队列为空为止。 也就是说如果某个 microtask 任务被推入到执行中，那么当主线程任务执行完成后，会循环调用该队列任务中的下一个任务来执行，直到该任务队列到最后一个任务为止。而事件循环每次只会入栈一个 macrotask，主线程执行完成该任务后又会检查 microtasks 队列并完成里面的所有任务后再执行 macrotask 的任务。<br>macrotasks: setTimeout, setInterval, setImmediate, I/O, UI rendering。<br>microtasks: process.nextTick, Promise, MutationObserver。</p>
<p>同步执行的代码 -&gt; promise.then -&gt; setTimeout</p>
<p>js 引擎单线程执行的，它是基于事件驱动的语言。它的执行顺序是遵循一个叫做事件队列的机制。浏览器有各种各样的线程，比如事件触发器、网络请求、定时器等等，线程的联系都是基于事件的。js 引擎处理到与其他线程相关的代码，就会分发给其他线程。他们处理完之后，需要 js 引擎计算时就是在事件队列里面添加一个任务。这个过程中 js 并不会阻塞代码等待其他线程执行完毕，而且其他线程执行完毕后添加事件任务告诉 js 引擎执行相关操作，这就是 js 的异步编程模型。在指定时间内，将任务放入事件队列，等待 js 引擎空闲后被执行。</p>
<p>那怎么知道主线程执行栈为空啊？js 引擎存在 monitoring process 进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去 Event Queue 那里检查是否有等待被调用的函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出 2 5 3 6 1 4</span></div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  resolve(<span class="number">3</span>);</div><div class="line">&#125;);</div><div class="line">promise1.then((val) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(val);</div><div class="line">&#125;);</div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">  resolve(<span class="number">6</span>);</div><div class="line">&#125;);</div><div class="line">promise2.then((val) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(val);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不知道是多少，就是从2开始打印的</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">  i = <span class="number">0</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;, <span class="number">5000</span>);</div><div class="line"><span class="keyword">while</span> (i) &#123;</div><div class="line">  i++;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出 2 1 4 3 5</span></div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resole, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    resole(<span class="number">3</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">p.then((a) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出 2,6,5,3,4,1</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  resolve();</div><div class="line">&#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">  &#125;);</div><div class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="number">6</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出 2 10 3 5 4 1</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (i === <span class="number">10</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">    i == <span class="number">9999</span> &amp;&amp; resolve();</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h2 id="Event-Table"><a href="#Event-Table" class="headerlink" title="Event Table"></a>Event Table</h2><p>就是个注册站，可以理解成一张 事件=&gt;回调函数 对应表，它就是用来存储 JavaScript 中的异步事件 (request, setTimeout, IO 等) 及其对应的回调函数的列表。当指定的事情发生时，Event Table 会将这个函数移到 Event Queue。</p>
<h2 id="实现一个-once-函数，传入函数参数只执行一次"><a href="#实现一个-once-函数，传入函数参数只执行一次" class="headerlink" title="实现一个 once 函数，传入函数参数只执行一次"></a>实现一个 once 函数，传入函数参数只执行一次</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ones</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tag = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tag == <span class="literal">true</span>) &#123;</div><div class="line">      func.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</div><div class="line">      tag = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="将原生的-ajax-封装成-promise"><a href="#将原生的-ajax-封装成-promise" class="headerlink" title="将原生的 ajax 封装成 promise"></a>将原生的 ajax 封装成 promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myNewAjax = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">'get'</span>, url);</div><div class="line">    xhr.send();</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">        resolve(json);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status != <span class="number">200</span>) &#123;</div><div class="line">        reject(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="如何实现一个私有变量，用-getName-方法可以访问，不能直接访问"><a href="#如何实现一个私有变量，用-getName-方法可以访问，不能直接访问" class="headerlink" title="如何实现一个私有变量，用 getName 方法可以访问，不能直接访问"></a>如何实现一个私有变量，用 getName 方法可以访问，不能直接访问</h2><p>如下方式无法解决这个问题，enumerable: false 是 for-in 中不会遍历。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">  name: <span class="string">'abc'</span>,</div><div class="line">  getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</div><div class="line">  enumerable: <span class="literal">false</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如下方式可行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">product</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'abc'</span>;</div><div class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> product();</div></pre></td></tr></table></figure>
<h2 id="和-、以及-Object-is-的区别"><a href="#和-、以及-Object-is-的区别" class="headerlink" title="==和===、以及 Object.is 的区别"></a>==和===、以及 Object.is 的区别</h2><ul>
<li>== 等于，存在强制转换成 number，null == undefined 的问题</li>
<li>=== 严格等于，不存在类型转换，存在 NaN !== NaN， +0 === -0</li>
<li>Object.is 加强版严格等于</li>
</ul>
<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>浏览器(所以只能在浏览器中使用)专门为动画提供的 API，让 DOM 动画、Canvas 动画、 SVG 动画、WebGL 动画等有一个统一的刷新机制。requestAnimationFrame 不需要设置时间间隔，RAF 采用的是系统时间间隔，并请求浏览器在下一次重绘之前调用指定的函数来更新动画，一次，若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用 window.requestAnimationFrame()，一般用于动画。</p>
<ul>
<li>requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</li>
<li>在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的 CPU、GPU 和内存使用量</li>
<li>requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销</li>
</ul>
<h2 id="setTimeout-与-requestAnimationFrame-的区别"><a href="#setTimeout-与-requestAnimationFrame-的区别" class="headerlink" title="setTimeout 与 requestAnimationFrame 的区别"></a>setTimeout 与 requestAnimationFrame 的区别</h2><p>引擎层面：</p>
<ul>
<li>setTimeout 属于 JS 引擎，存在事件轮询，存在事件队列</li>
<li>requestAnimationFrame 属于 GUI 引擎，发生在渲染过程中的重绘重排部分，与电脑分辨路保持一致</li>
</ul>
<p>性能层面：</p>
<ul>
<li>当页面被隐藏或最小化时，定时器 setTimeout 仍在后台执行动画任务</li>
<li>当页面处于未激活的状态下，该页面的屏幕刷新任务会被系统暂停，requestAnimationFrame 也会停止</li>
</ul>
<p>应用层面：</p>
<ul>
<li>利用 setTimeout，这种定时机制去做动画，模拟固定时间刷新页面</li>
<li>requestAnimationFrame 由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，在特定性环境下可以有效节省了 CPU 开销</li>
</ul>
<h2 id="用-setTimeout-来实现-setInterval"><a href="#用-setTimeout-来实现-setInterval" class="headerlink" title="用 setTimeout 来实现 setInterval"></a>用 setTimeout 来实现 setInterval</h2><p>setInterval 有两个问题：1.某些间隔会被跳过 2.多个定时器的代码执行时间 可能会比预期小。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//do something</span></div><div class="line">  setTimeout(say, <span class="number">200</span>);</div><div class="line">&#125;</div><div class="line">setTimeout(say, <span class="number">200</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">  setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">200</span>);</div><div class="line">&#125;, <span class="number">200</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_setInterval</span>(<span class="params">fn, time</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">    setTimeout(<span class="built_in">arguments</span>.callee, time);</div><div class="line">  &#125;</div><div class="line">  setTimeout(cb, time);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_setInterval</span>(<span class="params">fn, time</span>) </span>&#123;</div><div class="line">  fn();</div><div class="line">  setTimeout(() =&gt; _setInterval(fn, time), time);</div><div class="line">&#125;</div><div class="line"></div><div class="line">_setInterval(() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h2 id="setTimeout-的时间"><a href="#setTimeout-的时间" class="headerlink" title="setTimeout 的时间"></a>setTimeout 的时间</h2><p>首先要明白 Javascript 是单线程，单线程就意味着所有任务需要排队。然后会将所有任务分成两类：同步任务和异步任务！同步任务：在主线程上执行的任务，只有前一个任务执行完成，才会执行后一个！异步任务：不进入主线程、而进入“任务队列”的任务，当主线程上的任务执行完，主线程才会去执行“任务队列”。</p>
<p>对于 setTimeout(fn,200)，当到 200ms 时，fn 会被放进“任务队列”，而“任务队列”必须要等到主线程已有的代码执行完才会执行 fn，所以当程序执行到 setTimeout(fn,200)这一行时，时间就开始计算，但是 fn 实际执行时并不一定是在 200ms 后，可能是在更久的时间后（取决于主线程上的同步代码的执行时间）。</p>
<h2 id="JS-怎么控制一次加载一张图片，加载完后再加载下一张"><a href="#JS-怎么控制一次加载一张图片，加载完后再加载下一张" class="headerlink" title="JS 怎么控制一次加载一张图片，加载完后再加载下一张"></a>JS 怎么控制一次加载一张图片，加载完后再加载下一张</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> Image();</div><div class="line">  obj.src = <span class="string">'图片地址'</span>;</div><div class="line">  obj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'图片的宽度为：'</span> + obj.width + <span class="string">'；图片的高度为：'</span> + obj.height);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'mypic'</span>).innnerHTML =</div><div class="line">      <span class="string">"&lt;img src='"</span> + <span class="keyword">this</span>.src + <span class="string">"' /&gt;"</span>;</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mypic"</span>&gt;</span>onloading……<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="如何实现-sleep-的效果（es5-或者-es6）"><a href="#如何实现-sleep-的效果（es5-或者-es6）" class="headerlink" title="如何实现 sleep 的效果（es5 或者 es6）"></a>如何实现 sleep 的效果（es5 或者 es6）</h2><ul>
<li>while 循环的方式，容易造成死循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> start = <span class="built_in">Date</span>.now(),</div><div class="line">    expire = start + ms;</div><div class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() &lt; expire);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1111'</span>);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过 promise 来实现</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> temple = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</div><div class="line">    setTimeout(resolve, ms);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> temple;</div><div class="line">&#125;</div><div class="line">sleep(<span class="number">500</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> temple = <span class="keyword">await</span> sleep(<span class="number">1000</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>);</div><div class="line">  <span class="keyword">return</span> temple;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<ul>
<li>通过 generate 来实现</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</div><div class="line">    setTimeout(resolve, ms);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">sleep(<span class="number">500</span>)</div><div class="line">  .next()</div><div class="line">  .value.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h2 id="简单的实现一个-promise"><a href="#简单的实现一个-promise" class="headerlink" title="简单的实现一个 promise"></a>简单的实现一个 promise</h2><p><a href="https://github.com/forthealllight/blog/issues/4" target="_blank" rel="external">实现一个完美符合 Promise/A+规范的 Promise</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">constructor</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">  self.status = <span class="string">'pending'</span>; <span class="comment">//定义状态改变前的初始状态</span></div><div class="line">  self.value = <span class="literal">undefined</span>; <span class="comment">//定义状态为resolved的时候的状态</span></div><div class="line">  self.reason = <span class="literal">undefined</span>; <span class="comment">//定义状态为rejected的时候的状态</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="comment">//两个==="pending"，保证了状态的改变是不可逆的</span></div><div class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</div><div class="line">      self.value = value;</div><div class="line">      self.status = <span class="string">'resolved'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">    <span class="comment">//两个==="pending"，保证了状态的改变是不可逆的</span></div><div class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</div><div class="line">      self.reason = reason;</div><div class="line">      self.status = <span class="string">'rejected'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//捕获构造异常</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">constructor</span>(resolve, reject);</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    reject(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFullfilled, onRejected</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">switch</span> (self.status) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'resolved'</span>:</div><div class="line">      onFullfilled(self.value);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'rejected'</span>:</div><div class="line">      onRejected(self.reason);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mm = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  resolve(<span class="string">'123'</span>);</div><div class="line">&#125;);</div><div class="line">mm.then(</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">success</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(success);</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fail!'</span>);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PromiseM</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(process) &#123;</div><div class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span>;</div><div class="line">    <span class="keyword">this</span>.msg = <span class="string">''</span>;</div><div class="line">    process(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  resolve(val) &#123;</div><div class="line">    <span class="keyword">this</span>.status = <span class="string">'fulfilled'</span>;</div><div class="line">    <span class="keyword">this</span>.msg = val;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reject(err) &#123;</div><div class="line">    <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</div><div class="line">    <span class="keyword">this</span>.msg = err;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  then(fufilled, reject) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'fulfilled'</span>) &#123;</div><div class="line">      fufilled(<span class="keyword">this</span>.msg);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</div><div class="line">      reject(<span class="keyword">this</span>.msg);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mm = <span class="keyword">new</span> PromiseM(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  resolve(<span class="string">'123'</span>);</div><div class="line">&#125;);</div><div class="line">mm.then(</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">success</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(success);</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fail!'</span>);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="Function-proto-getPrototypeOf-是什么？"><a href="#Function-proto-getPrototypeOf-是什么？" class="headerlink" title="Function.proto(getPrototypeOf)是什么？"></a>Function.<em>proto</em>(getPrototypeOf)是什么？</h2><p>获取一个对象的原型，在 chrome 中可以通过 <code>__proto__</code> 的形式，或者在 ES6 中可以通过 <code>Object.getPrototypeOf</code> 的形式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span>; <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>; <span class="comment">// true</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</div><div class="line">F.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true</span></div><div class="line">F.constructor === <span class="built_in">Function</span>; <span class="comment">// true</span></div><div class="line">f.constructor === F; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="JS-判断类型"><a href="#JS-判断类型" class="headerlink" title="JS 判断类型"></a>JS 判断类型</h2><p>typeof，instanceof，Object.prototype.toString.call() 等。</p>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul>
<li>indexOf 循环去重</li>
<li>ES6 Set 去重 Array.from(new Set(array))</li>
<li>Object 键值对去重，把数组的值存成 Object 的 key 值，比如 Object[value1] = true，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的</li>
</ul>
<h2 id="JS-实现跨域"><a href="#JS-实现跨域" class="headerlink" title="JS 实现跨域"></a>JS 实现跨域</h2><p>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript 实施的安全限制，那么只要协议、域名、端口有任何一个不同，都被当作是不同的域。跨域原理，即是通过各种方式，避开浏览器的安全限制。</p>
<ul>
<li>JSONP</li>
<li>document.domain + iframe</li>
<li>window.name + iframe</li>
<li>location.hash + iframe</li>
<li>服务端设置 Access-Control-Allow-Origin</li>
<li>启一个代理服务器进行数据转发</li>
</ul>
<h2 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h2><p>引自 MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">JavaScript 数据类型和数据结构</a></p>
<p>最新的 ECMAScript 标准定义了 8 种数据类型:</p>
<ul>
<li>6 种原始类型，使用 typeof 运算符检查:<ul>
<li>undefined：typeof instance === “undefined”</li>
<li>Boolean：typeof instance === “boolean”</li>
<li>Number：typeof instance === “number”</li>
<li>String：typeof instance === “string</li>
<li>BigInt：typeof instance === “bigint”</li>
<li>Symbol ：typeof instance === “symbol”</li>
</ul>
</li>
<li>null：typeof instance === “object”。</li>
<li>Object：typeof instance === “object”。任何 constructed 对象实例的特殊非数据结构类型，也用做数据结构：new Object，new Array，new Map，new Set，new WeakMap，new WeakSet，new Date，和几乎所有通过 new keyword 创建的东西。</li>
</ul>
<p>除 Object 以外的所有类型都是不可变的（值本身无法被改变）。</p>
<p>记住 typeof 操作符的唯一目的就是检查数据类型，如果我们希望检查任何从 Object 派生出来的结构类型，使用 typeof 是不起作用的，因为总是会得到 “object”。检查 Object 种类的合适方式是使用 instanceof 关键字。但即使这样也存在误差。</p>
<h2 id="JS-的全排列"><a href="#JS-的全排列" class="headerlink" title="JS 的全排列"></a>JS 的全排列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullpermutate</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  <span class="keyword">if</span> (str.length &gt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">//遍历每一项</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; str.length; m++) &#123;</div><div class="line">      <span class="comment">//拿到当前的元素</span></div><div class="line">      <span class="keyword">var</span> left = str[m];</div><div class="line">      <span class="comment">//除当前元素的其他元素组合</span></div><div class="line">      <span class="keyword">var</span> rest = str.slice(<span class="number">0</span>, m) + str.slice(m + <span class="number">1</span>, str.length);</div><div class="line">      <span class="comment">//上一次递归返回的全排列</span></div><div class="line">      <span class="keyword">var</span> preResult = fullpermutate(rest);</div><div class="line">      <span class="comment">//组合在一起</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; preResult.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> tmp = left + preResult[i];</div><div class="line">        result.push(tmp);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length === <span class="number">1</span>) &#123;</div><div class="line">    result.push(str);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="补充-get-和-post-请求在缓存方面的区别"><a href="#补充-get-和-post-请求在缓存方面的区别" class="headerlink" title="补充 get 和 post 请求在缓存方面的区别"></a>补充 get 和 post 请求在缓存方面的区别</h2><ul>
<li>get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存</li>
<li>post 做的一般是修改和删除的工作，所以必须与数据库交互，不能使用缓存</li>
</ul>
<h2 id="说一下闭包"><a href="#说一下闭包" class="headerlink" title="说一下闭包"></a>说一下闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。</p>
<ul>
<li>单例模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> instance;</div><div class="line">  <span class="keyword">var</span> CreateSingleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance) &#123;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.getName();</div><div class="line">    instance = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;;</div><div class="line">  CreateSingleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> CreateSingleton;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Singleton(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Singleton(<span class="string">'b'</span>);</div><div class="line">a.getName();</div><div class="line">b.getName();</div><div class="line"><span class="built_in">console</span>.log(a === b);</div></pre></td></tr></table></figure>
<h2 id="说说前端中的事件流"><a href="#说说前端中的事件流" class="headerlink" title="说说前端中的事件流"></a>说说前端中的事件流</h2><p>HTML 中与 javascript 交互是通过事件驱动来实现的，例如鼠标点击事件 onclick、页面的滚动事件 onscroll 等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。</p>
<p>什么是事件流：事件流描述的是从页面中接收事件的顺序，DOM2 级事件流包括下面几个阶段：</p>
<ul>
<li>事件捕获阶段</li>
<li>处于目标阶段</li>
<li>事件冒泡阶段</li>
</ul>
<p>addEventListener 是 DOM2 级事件新增的指定事件处理程序的操作，这个方法接收 3 个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序。IE 只支持事件冒泡。</p>
<p>DOM0 级和 DOM2 级有什么区别：</p>
<ul>
<li><code>document.getElementById(&quot;btn&quot;).onclick = function(){};</code> 是 DOM0，只能绑定一个事件</li>
<li><code>document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, function(){}, false);</code> 是 DOM2，可以绑定多个事件</li>
</ul>
<h2 id="如何让事件先冒泡后捕获"><a href="#如何让事件先冒泡后捕获" class="headerlink" title="如何让事件先冒泡后捕获"></a>如何让事件先冒泡后捕获</h2><p>如果要实现先冒泡后捕获的效果，对于同一个事件，监听捕获和冒泡，分别对应相应的处理函数，监听到捕获事件，先暂缓执行，直到冒泡事件被捕获后再执行捕获事件。</p>
<h2 id="说一下事件委托或事件代理"><a href="#说一下事件委托或事件代理" class="headerlink" title="说一下事件委托或事件代理"></a>说一下事件委托或事件代理</h2><p>简介：事件委托指的是，不在事件的发生地（直接 dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素 DOM 的类型，来做出不同的响应。</p>
<p>举例：最经典的就是 ul 和 li 标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在 li 标签上直接添加，而是在 ul 父元素上添加。 好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。</p>
<p>经过试验，在事件捕获阶段做事件代理也可以啊！！！</p>
<h2 id="mouseover-和-mouseenter-的区别"><a href="#mouseover-和-mouseenter-的区别" class="headerlink" title="mouseover 和 mouseenter 的区别"></a>mouseover 和 mouseenter 的区别</h2><p>mouseenter：当鼠标移入元素本身（不包含元素的子元素）会触发事件，也就是不会冒泡，对应的移除事件是 mouseleave</p>
<p>mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡的过程，对应的移除事件是 mouseout</p>
<h2 id="异步加载-JS-的方法"><a href="#异步加载-JS-的方法" class="headerlink" title="异步加载 JS 的方法"></a>异步加载 JS 的方法</h2><p>defer：如果 script 标签设置了该属性，会异步的下载并且不会影响到后续 DOM 的渲染，会在文档渲染完毕后 DOMContentLoaded 事件调用前执行；如果有多个设置了 defer 的 script 标签存在，则会按照顺序执行所有的 script。</p>
<p>async：如果 script 标签设置了该属性，会异步的下载并在允许的情况下执行，并不会按着 script 在页面中的顺序来执行，而是谁先加载完谁执行。</p>
<p>一句话，defer 是“渲染完再执行”，async 是“下载完就执行”。另外，如果有多个 defer 脚本，会按照它们在页面出现的顺序加载，而多个 async 脚本是不能保证加载顺序的。</p>
<h2 id="Ajax-解决浏览器缓存问题"><a href="#Ajax-解决浏览器缓存问题" class="headerlink" title="Ajax 解决浏览器缓存问题"></a>Ajax 解决浏览器缓存问题</h2><ul>
<li>在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)</li>
<li>在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(“Cache-Control”,”no-cache”)</li>
<li>在 URL 后面加上时间戳：”nowtime=” + new Date().getTime()</li>
<li>如果是使用 jQuery，直接这样就可以了 $.ajaxSetup({cache:false}，这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。</li>
</ul>
<h2 id="垃圾回收的方法"><a href="#垃圾回收的方法" class="headerlink" title="垃圾回收的方法"></a>垃圾回收的方法</h2><p>标记清除和计数引用，用引用计数法会存在内存泄露，如 objA 和 objB 通过各自的属性相互引用。</p>
<h2 id="eval-是做什么的"><a href="#eval-是做什么的" class="headerlink" title="eval 是做什么的"></a>eval 是做什么的</h2><p>将对应的字符串解析成 JS 并执行，应该避免使用，因为非常消耗性能（2 次，一次解析成 JS，一次执行）。</p>
<h2 id="说一下类的创建和继承"><a href="#说一下类的创建和继承" class="headerlink" title="说一下类的创建和继承"></a>说一下类的创建和继承</h2><h2 id="JS-的-new-操作符做了哪些事情"><a href="#JS-的-new-操作符做了哪些事情" class="headerlink" title="JS 的 new 操作符做了哪些事情"></a>JS 的 new 操作符做了哪些事情</h2><p>new 操作符新建了一个空对象，这个对象原型指向构造函数的 prototype，执行构造函数后返回这个对象。</p>
<ul>
<li>创建一个类的实例：创建一个空对象 obj，然后把这个空对象的<strong>proto</strong>设置为构造函数的 prototype</li>
<li>初始化实例：构造函数被传入参数并调用，关键字 this 被设定指向该实例 obj</li>
<li>返回实例 obj</li>
</ul>
<h2 id="JS-的节流和防抖"><a href="#JS-的节流和防抖" class="headerlink" title="JS 的节流和防抖"></a>JS 的节流和防抖</h2><p><a href="http://www.cnblogs.com/coco1s/p/5499469.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/5499469.html</a></p>
<h2 id="暂停死区"><a href="#暂停死区" class="headerlink" title="暂停死区"></a>暂停死区</h2><p>在代码块内，使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上， 称为“暂时性死区”。</p>
<h2 id="编写代码，满足以下条件：（1）Hero-“37er”-执行结果为-Hi-This-is-37er-（2）Hero-“37er”-kill-1-recover-30-执行结果为-Hi-This-is-37er-Kill-1-bug-Recover-30-bloods-（3）Hero-“37er”-sleep-10-kill-2-执行结果为-Hi-This-is-37er-等待-10s-后-Kill-2-bugs-注意为-bugs-（双斜线后的为提示信息，-不需要打印）"><a href="#编写代码，满足以下条件：（1）Hero-“37er”-执行结果为-Hi-This-is-37er-（2）Hero-“37er”-kill-1-recover-30-执行结果为-Hi-This-is-37er-Kill-1-bug-Recover-30-bloods-（3）Hero-“37er”-sleep-10-kill-2-执行结果为-Hi-This-is-37er-等待-10s-后-Kill-2-bugs-注意为-bugs-（双斜线后的为提示信息，-不需要打印）" class="headerlink" title="编写代码，满足以下条件：（1）Hero(“37er”);执行结果为 Hi! This is 37er （2）Hero(“37er”).kill(1).recover(30);执行结果为 Hi! This is 37er Kill 1 bug Recover 30 bloods （3）Hero(“37er”).sleep(10).kill(2)执行结果为 Hi! This is 37er //等待 10s 后 Kill 2 bugs //注意为 bugs （双斜线后的为提示信息， 不需要打印）"></a>编写代码，满足以下条件：（1）Hero(“37er”);执行结果为 Hi! This is 37er （2）Hero(“37er”).kill(1).recover(30);执行结果为 Hi! This is 37er Kill 1 bug Recover 30 bloods （3）Hero(“37er”).sleep(10).kill(2)执行结果为 Hi! This is 37er //等待 10s 后 Kill 2 bugs //注意为 bugs （双斜线后的为提示信息， 不需要打印）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  o.name = name;</div><div class="line">  o.time = <span class="number">0</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hi! This is '</span> + o.name);</div><div class="line"></div><div class="line">  o.kill = <span class="function"><span class="keyword">function</span> (<span class="params">bugs</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (bugs == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Kill '</span> + bugs + <span class="string">' bug'</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Kill '</span> + bugs + <span class="string">' bugs'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="number">1000</span> * <span class="keyword">this</span>.time);</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  o.recover = <span class="function"><span class="keyword">function</span> (<span class="params">bloods</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Recover '</span> + bloods + <span class="string">' bloods'</span>);</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  o.sleep = <span class="function"><span class="keyword">function</span> (<span class="params">sleepTime</span>) </span>&#123;</div><div class="line">    o.time = sleepTime;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说一下什么是-virtual-dom"><a href="#说一下什么是-virtual-dom" class="headerlink" title="说一下什么是 virtual dom"></a>说一下什么是 virtual dom</h2><p>用 JavaScript 对象结构表示 DOM 树的结构，然后用这个树构建一个真正的 DOM 树，插到文档当中。当状态变更的时候，重新构造一棵新的对象树，用新的树和旧的树进行比较，记录两棵树差异，把所记录的差异应用到所构建的真正的 DOM 树上，视图就更新了。Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。</p>
<h2 id="简单实现-Node-的-Events-模块，订阅-发布模式"><a href="#简单实现-Node-的-Events-模块，订阅-发布模式" class="headerlink" title="简单实现 Node 的 Events 模块，订阅-发布模式"></a>简单实现 Node 的 Events 模块，订阅-发布模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Events</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.handles = &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.on = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callBack</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.handles[eventName]) &#123;</div><div class="line">      <span class="keyword">this</span>.handles[eventName] = [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.handles[eventName].push(callBack);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.emit = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handles[eventName]) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.handles[eventName].length; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.handles[eventName][i](obj);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callBack</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!callBack) &#123;</div><div class="line">      <span class="keyword">this</span>.handles[eventName] = [];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.handles[eventName].length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (callBack === <span class="keyword">this</span>.handles[eventName][i]) &#123;</div><div class="line">          <span class="keyword">this</span>.handles[eventName].splice(i, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> events = <span class="keyword">new</span> Events();</div><div class="line">events.on(<span class="string">'say'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">&#125;);</div><div class="line">events.emit(<span class="string">'say'</span>, <span class="string">'Jony yu'</span>);</div></pre></td></tr></table></figure>
<h2 id="写个函数，可以转化下划线命名到驼峰命名"><a href="#写个函数，可以转化下划线命名到驼峰命名" class="headerlink" title="写个函数，可以转化下划线命名到驼峰命名"></a>写个函数，可以转化下划线命名到驼峰命名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">UnderlineToHump</span>(<span class="params">para</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> arr = para.split(<span class="string">'_'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> s <span class="keyword">of</span> arr) &#123;</div><div class="line">    <span class="keyword">if</span> (result.length === <span class="number">0</span>) &#123;</div><div class="line">      result = result + s.toLowerCase();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      result =</div><div class="line">        result + s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>).toLowerCase();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组的随机排序"><a href="#数组的随机排序" class="headerlink" title="数组的随机排序"></a>数组的随机排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> i = arr.length;</div><div class="line">  <span class="keyword">while</span> (i) &#123;</div><div class="line">    <span class="keyword">let</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i);</div><div class="line">    i--;</div><div class="line">    [arr[j], arr[i]] = [arr[i], arr[j]];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="iframe-的优缺点"><a href="#iframe-的优缺点" class="headerlink" title="iframe 的优缺点"></a>iframe 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>程序调入静态页面比较方便，能够把嵌入的网页原样展现出来</li>
<li>模块分离，便于更改，增加代码的可重用</li>
<li>重载页面时不需要重载整个页面，只需要重载页面中的一个框架页</li>
<li>可以解决跨域问题</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>样式和脚本需要额外链入，增加服务器的 http 请求，占用 http 链接数</li>
<li>会影响搜索引擎优化，不利于网站排名</li>
<li>链接导航需要定义好，否则用户可能无法离开当前框架</li>
<li>阻塞页面加载，影响网页加载速度，window 的 onload 事件需要在所有 iframe 加载完毕后触发</li>
<li>多处滚动条问题</li>
</ul>
<h2 id="vue2-vs-vue3"><a href="#vue2-vs-vue3" class="headerlink" title="vue2 vs. vue3"></a>vue2 vs. vue3</h2><ul>
<li>针对 API 的优化，createApp，生命周期函数修改，组合式 api，如 setup 回调</li>
<li><template> 不再限制一个节点</template></li>
<li>Object.defineProperty 改为 ES6 的 Proxy</li>
<li>加强 TypeScript 支持</li>
<li>更快，重构了虚拟 DOM</li>
<li>更小，Tree-shaking</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="external">Vue Function-based API RFC</a></p>
<h2 id="React-和-Vue-区别"><a href="#React-和-Vue-区别" class="headerlink" title="React 和 Vue 区别"></a>React 和 Vue 区别</h2><p><a href="https://blog.csdn.net/qq_26190177/article/details/93741368" target="_blank" rel="external">React 和 Vue 区别</a></p>
<ul>
<li>监听数据变化的实现原理不同</li>
</ul>
<p>Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，Vue 使用的是可变数据。React 默认是通过比较引用的方式（diff）进行的，React 更强调数据的不可变。</p>
<ul>
<li>数据流的不同</li>
</ul>
<p>Vue 双向绑定。 React 单向数据流。如果使用了 Vuex 以及 Redux 等单向数据流的状态管理框架，可能感受不到这一点的区别了。Vuex 和 Redux 的区别如下。</p>
<p>从表面上来说，store 注入和使用方式有一些区别。在 Vuex 中，$store被直接注入到了组件实例中，因此可以比较灵活的使用：使用dispatch、commit提交更新，通过mapState或者直接通过this.$store 来读取数据。在 Redux 中，我们每一个组件都需要显示的用 connect 把需要的 props 和 dispatch 连接起来。另外，Vuex 更加灵活一些，组件中既可以 dispatch action，也可以 commit updates，而 Redux 中只能进行 dispatch，不能直接调用 reducer 进行修改。</p>
<p>从实现原理上来说，最大的区别是两点：Redux 使用的是不可变数据，而 Vuex 的数据是可变的，因此，Redux 每次都是用新 state 替换旧 state，而 Vuex 是直接修改。Redux 在检测数据变化的时候，是通过 diff 的方式比较差异的，而 Vuex 其实和 Vue 的原理一样，是通过 getter/setter 来比较的，这两点的区别，也是因为 React 和 Vue 的设计理念不同。React 更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue 更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用 React，小型项目用 Vue 的感觉。</p>
<ul>
<li>组件通信的区别</li>
</ul>
<p>React 本身并不支持自定义事件，Vue 中子组件向父组件传递消息有两种方式：事件和回调函数，而且 Vue 更倾向于使用事件。但是在 React 中我们都是使用回调函数的，这可能是他们二者最大的区别。</p>
<ul>
<li>模板渲染方式的不同</li>
</ul>
<p>React 是通过 JSX 渲染模板，而 Vue 是通过一种拓展的 HTML 语法进行渲染。在深层上，模板的原理不同：React 是在组件 JS 代码中，通过原生 JS 实现模板中的常见语法，比如插值，条件，循环等，都是通过 JS 语法实现的，更加纯粹更加原生。而 Vue 是在和组件 JS 代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要  v-if  来实现对这一点，这样的做法显得有些独特，会把 HTML 弄得很乱。</p>
<p>举个例子，说明 React 的好处：react 中 render 函数是支持闭包特性的，所以我们 import 的组件在 render 中可以直接调用。但是在 Vue 中，由于模板中使用的数据都必须挂在  this  上进行一次中转，所以我们 import  一个组件完了之后，还需要在  components  中再声明下，这样显然是很奇怪但又不得不这样的做法。</p>
<ul>
<li>渲染过程不同</li>
</ul>
<p>Vue 可以更快地计算出 Virtual DOM 的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。React 在应用的状态被改变时，全部子组件都会重新渲染。通过 shouldComponentUpdate 这个生命周期方法可以进行控制，但 Vue 将此视为默认的优化。</p>
<ul>
<li>框架本质不同</li>
</ul>
<p>Vue 本质是 MVVM 框架，由 MVC 发展而来。React 是前端组件化框架，由后端组件化发展而来。</p>
<h2 id="debounce-实现"><a href="#debounce-实现" class="headerlink" title="debounce 实现"></a>debounce 实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDebounced</span>(<span class="params">func, time</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> timer;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (timer) &#123;</div><div class="line">      clearTimeout(timer);</div><div class="line">    &#125;</div><div class="line">    timer = setTimeout(() =&gt; &#123;</div><div class="line">      func.apply(that, args);</div><div class="line">    &#125;, time);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="throttle-实现"><a href="#throttle-实现" class="headerlink" title="throttle 实现"></a>throttle 实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getThrottle</span>(<span class="params">fn, delay</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!valid) &#123;</div><div class="line">      <span class="comment">// 休息时间 暂不接客</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></div><div class="line">    valid = <span class="literal">false</span>;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      fn();</div><div class="line">      valid = <span class="literal">true</span>;</div><div class="line">    &#125;, delay);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="webpack-打包过程"><a href="#webpack-打包过程" class="headerlink" title="webpack 打包过程"></a>webpack 打包过程</h2><p>其中包含四个核心概念</p>
<p>入口(entry)：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的<br>输出(output)：告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist<br>loader：让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）<br>插件(plugins)：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>
<ul>
<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li>
<li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li>
<li>确定入口：根据配置中的 entry 找出所有的入口文件</li>
<li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li>
<li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>
<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li>
<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li>
</ul>
<h2 id="Promise-all-实现"><a href="#Promise-all-实现" class="headerlink" title="Promise.all 实现"></a>Promise.all 实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> results = [];</div><div class="line">  <span class="keyword">let</span> promiseCount = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> promisesLength = promises.length;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promisesLength; i++) &#123;</div><div class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">          promiseCount++;</div><div class="line">          results[i] = res;</div><div class="line">          <span class="keyword">if</span> (promiseCount === promisesLength) &#123;</div><div class="line">            <span class="keyword">return</span> resolve(results);</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> reject(err);</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="localStorage-监听"><a href="#localStorage-监听" class="headerlink" title="localStorage 监听"></a>localStorage 监听</h2><p>当同源页面的某个页面修改了 localStorage，其余的同源页面只要注册了 storage 事件，就会触发。</p>
<ul>
<li>同一浏览器打开了两个同源页面</li>
<li>其中一个网页修改了 localStorage</li>
<li>另一网页注册了 storage 事件</li>
</ul>
<p>在同源的两个页面中，可以监听 storage 事件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  alert(e.newValue);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在同一个页面中，对 localStorage 的 setItem 方法进行重写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> originalSetItem = localStorage.setItem;</div><div class="line"></div><div class="line">localStorage.setItem = <span class="function"><span class="keyword">function</span> (<span class="params">key, newValue</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> setItemEvent = <span class="keyword">new</span> Event(<span class="string">'setItemEvent'</span>);</div><div class="line">  setItemEvent.newValue = newValue;</div><div class="line">  <span class="built_in">window</span>.dispatchEvent(setItemEvent);</div><div class="line">  originalSetItem.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'setItemEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  alert(e.newValue);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">localStorage.setItem(<span class="string">'name'</span>, <span class="string">'wang'</span>);</div></pre></td></tr></table></figure>
<h2 id="router-原理"><a href="#router-原理" class="headerlink" title="router 原理"></a>router 原理</h2><p><a href="https://zhuanlan.zhihu.com/p/27588422" target="_blank" rel="external">【源码拾遗】从 vue-router 看前端路由的两种实现</a></p>
<p>更新视图但不重新请求页面，是前端路由原理的核心之一，目前在浏览器环境中这一功能的实现主要有 2 种方式,Hash 模式和 History 模式。</p>
<p>hash（#）是 URL 的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页，也就是说 #是用来指导浏览器动作的，对服务器端完全无用，HTTP 请求中也不会不包括#；同时每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。可以为 hash 的改变添加监听事件：<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>。</p>
<p>HTML5 History API 提供了一种功能，能让开发人员在不刷新整个页面的情况下修改站点的 URL，就是利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。</p>
<h2 id="虚拟-dom-的作用"><a href="#虚拟-dom-的作用" class="headerlink" title="虚拟 dom 的作用"></a>虚拟 dom 的作用</h2><p>之前使用原生 js 或者 jquery 写页面的时候会发现操作 DOM 是一件非常麻烦的一件事情，往往是 DOM 标签和 js 逻辑同时写在 js 文件里，数据交互时不时还要写很多的 input 隐藏域，如果没有好的代码规范的话会显得代码非常冗余混乱，耦合性高并且难以维护。</p>
<p>另外一方面在浏览器里一遍又一遍的渲染 DOM 是非常非常消耗性能的，常常会出现页面卡死的情况；所以尽量减少对 DOM 的操作成为了优化前端性能的必要手段，vdom 就是将 DOM 的对比放在了 js 层，通过对比不同之处来选择新渲染 DOM 节点，从而提高渲染效率。</p>
<p>Virtual DOM 是用 JS 对象记录一个 dom 节点的副本，当 dom 发生更改时候，先用虚拟 dom 进行 diff，算出最小差异，然后再修改真实 dom，当用传统的方式操作 DOM 的时候，浏览器会从构建 DOM 树开始从头到尾执行一遍流程，效率很低。而虚拟 DOM 是用 javascript 对象表示的，而操作 javascript 是很简便高效的。虚拟 DOM 和真正的 DOM 有一层映射关系，很多需要操作 DOM 的地方都会去操作虚拟 DOM，最后统一一次更新 DOM，因而可以提高性能。</p>
<h2 id="找出数组中唯一不同的数"><a href="#找出数组中唯一不同的数" class="headerlink" title="找出数组中唯一不同的数"></a>找出数组中唯一不同的数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findOnly</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</div><div class="line">  arr.forEach((i) =&gt; &#123;</div><div class="line">    result = i ^ result;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果存在2个这样的元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findOnlyTwo</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> post = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> y = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 得到所以元素异或结果</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    result ^= arr[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取 result 二进制最低位1的位置 1&amp;1 =1</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (((result &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</div><div class="line">      post = i;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 遍历数组得到 x</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> ((arr[i] &gt;&gt; post) &amp; (<span class="number">1</span> == <span class="number">1</span>)) &#123;</div><div class="line">      x ^= arr[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  y = result ^ x;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="找出数组中不相邻元素的最大和"><a href="#找出数组中不相邻元素的最大和" class="headerlink" title="找出数组中不相邻元素的最大和"></a>找出数组中不相邻元素的最大和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态规划</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxSum</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  result.push(arr[<span class="number">0</span>]);</div><div class="line">  result.push(<span class="built_in">Math</span>.max(arr[<span class="number">0</span>], arr[<span class="number">1</span>]));</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> a = result[i<span class="number">-2</span>] + arr[i];</div><div class="line">    <span class="keyword">let</span> b = result[i<span class="number">-1</span>];</div><div class="line">    result.push(<span class="built_in">Math</span>.max(a, b));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result[result.length - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue-大数据量性能优化"><a href="#Vue-大数据量性能优化" class="headerlink" title="Vue 大数据量性能优化"></a>Vue 大数据量性能优化</h2><ul>
<li>减少无用字段</li>
<li>数据扁平化</li>
<li>利用computed</li>
<li>数据静态化</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多项目跳转]]></title>
      <url>https://zhulichao.github.io/2021/06/02/multi-project/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>打包后 vue-router 多次引用</li>
<li>跳转是用 a 标签，路由可能跳不过去</li>
</ul>
<p>注意：引用静态资源的路径可能需要处理</p>
<h2 id="基于-qiankun"><a href="#基于-qiankun" class="headerlink" title="基于 qiankun"></a>基于 qiankun</h2><ul>
<li>babel-polyfill 多次引用 idempotent-babel-polyfill</li>
</ul>
<h3 id="主应用修改"><a href="#主应用修改" class="headerlink" title="主应用修改"></a>主应用修改</h3><ul>
<li>npm install qiankun</li>
<li>router 删除 notFoundRouter 的重定向</li>
<li>修改 main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span></div><div class="line"><span class="comment">// import BabelPolyfill from 'babel-polyfill'</span></div><div class="line"><span class="comment">// Vue.use(BabelPolyfill)</span></div><div class="line"></div><div class="line"><span class="comment">// 添加</span></div><div class="line">registerMicroApps(</div><div class="line">  [</div><div class="line">    &#123;</div><div class="line">      name: <span class="string">'project'</span>,</div><div class="line">      entry: <span class="string">'//localhost:8002'</span>,</div><div class="line">      container: <span class="string">'#app'</span>,</div><div class="line">      activeRule: <span class="string">'/cms'</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">)</div><div class="line"></div><div class="line">start()</div></pre></td></tr></table></figure>
<h3 id="跳转应用修改"><a href="#跳转应用修改" class="headerlink" title="跳转应用修改"></a>跳转应用修改</h3><ul>
<li>修改 webpack 配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">  <span class="comment">// 把子应用打包成 umd 库格式(必须)</span></div><div class="line">  library: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</div><div class="line">  libraryTarget: <span class="string">'umd'</span>,</div><div class="line">  jsonpFunction: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">devServer: &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  headers: &#123;</div><div class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>router 设置 base</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,</div><div class="line">  base: <span class="built_in">window</span>.__POWERED_BY_QIANKUN__ ? <span class="string">'/cms'</span> : <span class="string">'/'</span>,</div><div class="line">  routes: constantRouterMap</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>修改 main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改</span></div><div class="line"><span class="keyword">import</span> bootstrap2 <span class="keyword">from</span> <span class="string">'./core/bootstrap'</span></div><div class="line"></div><div class="line"><span class="comment">// 删除</span></div><div class="line"><span class="comment">// new Vue(&#123;</span></div><div class="line"><span class="comment">//   router,</span></div><div class="line"><span class="comment">//   store,</span></div><div class="line"><span class="comment">//   i18n,</span></div><div class="line"><span class="comment">//   created: bootstrap,</span></div><div class="line"><span class="comment">//   render: h =&gt; h(App)</span></div><div class="line"><span class="comment">// &#125;).$mount('#app')</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> instance = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">props = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; container &#125; = props</div><div class="line"></div><div class="line">  instance = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    router,</div><div class="line">    store: store,</div><div class="line">    i18n,</div><div class="line">    created: bootstrap2,</div><div class="line">    render: h =&gt; h(App)</div><div class="line">  &#125;).$mount(container ? container.querySelector(<span class="string">'#app'</span>) : <span class="string">'#app'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</div><div class="line">  <span class="comment">// eslint-disable-next-line</span></div><div class="line">  __webpack_public_path__ = <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 独立运行</span></div><div class="line">  render()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。</div><div class="line"> * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'app bootstraped'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span> (<span class="params">props</span>) </span>&#123;</div><div class="line">  render(props)</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span> (<span class="params">props</span>) </span>&#123;</div><div class="line">  instance.$destroy()</div><div class="line">  instance.$el.innerHTML = <span class="string">''</span></div><div class="line">  instance = <span class="literal">null</span></div><div class="line">  router = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>线上 nginx</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">location /api/ &#123;</div><div class="line">  add_header Access-Control-Allow-Origin *;</div><div class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">      <span class="built_in">return</span> 204;</div><div class="line">  &#125;</div><div class="line">  proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">  add_header Access-Control-Allow-Origin *;</div><div class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</div><div class="line">  root /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist12;</div><div class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ @router;</div><div class="line">  index index.html index.htm;</div><div class="line">  add_header Cache-Control max-age=no-cache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于-nginx-转发"><a href="#基于-nginx-转发" class="headerlink" title="基于 nginx 转发"></a>基于 nginx 转发</h2><ul>
<li>主应用没有修改</li>
<li>跳转的应用<ul>
<li>设置 publicPath 为 ‘/cms’</li>
<li>router 设置 base 为 ‘/cms’</li>
</ul>
</li>
</ul>
<h3 id="一个前端项目"><a href="#一个前端项目" class="headerlink" title="一个前端项目"></a>一个前端项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">location /cms/api/ &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /api/ &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /cms &#123;</div><div class="line">    <span class="built_in">alias</span> /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist2/;</div><div class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ ../dist2/index.html <span class="built_in">break</span>; <span class="comment"># 注意这个 break</span></div><div class="line">    index index.html index.htm;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    root /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist1;</div><div class="line">    index index.html index.htm;</div><div class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多个前端项目"><a href="#多个前端项目" class="headerlink" title="多个前端项目"></a>多个前端项目</h3><p>主项目配置如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">location /api/ &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /cms &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://localhost:1889;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    root /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist1;</div><div class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ @router;</div><div class="line">    index index.html index.htm;</div><div class="line">    add_header Cache-Control max-age=no-cache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跳转项目配置如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">location /cms/api/ &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /api/ &#123;</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,refresh_token'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">        <span class="built_in">return</span> 204;</div><div class="line">    &#125;</div><div class="line">    proxy_pass http://192.168.103.219:30005/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /cms &#123;</div><div class="line">    <span class="built_in">alias</span> /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist2/;</div><div class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/;</div><div class="line">    index index.html index.htm;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    root /usr/<span class="built_in">local</span>/Cellar/nginx/1.19.5/pcm/dist2;</div><div class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</div><div class="line">    index index.html index.htm;</div><div class="line">    add_header Cache-Control max-age=no-cache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 生命周期钩子]]></title>
      <url>https://zhulichao.github.io/2021/04/16/vue-lifecycle/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考</p>
<ul>
<li><p>官方文档 <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="external">生命周期钩子</a>。</p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_42707287/article/details/111641286" target="_blank" rel="external">超详细vue生命周期解析(详解)</a></p>
</li>
</ul>
<h2 id="Vue-生命周期钩子"><a href="#Vue-生命周期钩子" class="headerlink" title="Vue 生命周期钩子"></a>Vue 生命周期钩子</h2><ul>
<li>beforeCreate<ul>
<li>实例初始化后、创建之前调用</li>
<li>没有实例化，不能访问数据</li>
</ul>
</li>
<li>created<ul>
<li>实例创建后调用</li>
<li>能访问到数据，能修改数据且不会触发 update 阶段</li>
<li>异步数据的获取和对实例数据的初始化操作都在这里面进行</li>
</ul>
</li>
<li>beforeMount<ul>
<li>编译模板已经结束，虚拟 DOM 已经存在，真实的 DOM 节点挂载到页面之前调用</li>
<li>能访问到数据，能修改数据且不会触发 update 阶段</li>
</ul>
</li>
<li>mounted<ul>
<li>真实的 DOM 节点挂载到页面之后调用，可以使用 $el、$refs 拿到节点</li>
<li>能访问到数据，能修改数据但会触发 update 阶段</li>
</ul>
</li>
<li>activated<ul>
<li>被 keep-alive 缓存的组件激活时（包括第一次）调用</li>
</ul>
</li>
<li>deactivated<ul>
<li>被 keep-alive 缓存的组件停用时调用</li>
</ul>
</li>
<li>beforeUpdate<ul>
<li>数据更新时调用，发生在虚拟 DOM 打补丁之前</li>
<li>能访问到数据，能修改数据不会再次触发 update 阶段</li>
<li>这里适合在更新之前访问现有的 DOM</li>
</ul>
</li>
<li>updated<ul>
<li>组件 DOM 更新之后调用</li>
<li>能访问到数据，包括 beforeUpdate 修改后的数据，能修改数据会再次触发 update 阶段</li>
<li>应该避免在此期间更改状态，可能会引起死循环</li>
</ul>
</li>
<li>beforeDestroy<ul>
<li>实例销毁之前调用，此时实例仍然完全可用</li>
<li>能访问到数据，能修改数据不会再触发 update 阶段</li>
<li>能访问到 $el</li>
<li>可以清理非vue资源，防止内存泄露</li>
</ul>
</li>
<li>destroyed<ul>
<li>实例销毁之后调用，所有子实例也都销毁了，清除vue实例与DOM的关联</li>
<li>能访问到数据，能修改数据不会再触发 update 阶段</li>
<li>能访问到 $el</li>
</ul>
</li>
<li>errorCaptured<ul>
<li>当捕获一个来自子孙组件的错误时被调用</li>
</ul>
</li>
</ul>
<img src="/2021/04/16/vue-lifecycle/lifecycle1.png" title="生命周期执行顺序">
<img src="/2021/04/16/vue-lifecycle/lifecycle2.png" title="生命周期执行顺序">
<p><strong>注意：</strong></p>
<ul>
<li><p>只有在 template 中引用的变量变化时，视图才会更新，否则无论 data 还是 props 变化，都不会触发更新</p>
</li>
<li><p>若只有父组件的 data 变化，只更新父组件，子组件不更新</p>
</li>
<li><p>执行了销毁，是清除 Vue 实例与 DOM 的关联，页面中 DOM 元素可能仍然存在，Vue Devtools 中没有对应节点了</p>
</li>
<li><p>如果有 watch 先进入 watch，再进入 beforeUpdate</p>
</li>
<li><p>如果 watch 中又对监听的属性进行了修改，会再次进入 watch，然后再进入 beforeUpdate</p>
</li>
</ul>
<img src="/2021/04/16/vue-lifecycle/lifecycle3.png" title="生命周期执行顺序">
<h2 id="为什么不能用箭头函数"><a href="#为什么不能用箭头函数" class="headerlink" title="为什么不能用箭头函数"></a>为什么不能用箭头函数</h2><p>函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。this 指向的固定化，并不是因为箭头函数内部有绑定 this 的机制，实际原因是箭头函数根本没有自己的 this，导致内部的 this 就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。</p>
<p>箭头函数没有自己的 this，它的 this 是继承而来；默认指向在定义它时所处的对象(宿主对象)，而不是执行时的对象，定义它的时候，可能环境是 window；箭头函数可以方便地让我们在 setTimeout 、setInterval中方便的使用 this。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj1 = &#123;</div><div class="line">  name: <span class="string">'ces'</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj1.method(); <span class="comment">// obj1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> obj2 = &#123;</div><div class="line">  name: <span class="string">'ces'</span>,</div><div class="line">  method: () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj2.method(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>类内部自身调用时 this 就是自己的实例，但是如果传给其它地方调用了，this 就变了，所以有了 bind this、箭头函数这种写法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString1() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString2 = () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">point.toString1(); <span class="comment">// (1, 2)</span></div><div class="line">point.toString2(); <span class="comment">// (1, 2)</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  x: <span class="number">3</span>,</div><div class="line">  y: <span class="number">4</span>,</div><div class="line">  toString1: point.toString1,</div><div class="line">  toString2: point.toString2,</div><div class="line">&#125;;</div><div class="line">obj.toString1(); <span class="comment">// (3, 4)</span></div><div class="line">obj.toString2(); <span class="comment">// (1, 2)</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IE11 兼容调试]]></title>
      <url>https://zhulichao.github.io/2021/04/13/ie11-compatibility/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><ul>
<li>最困难的是看不见报错信息，开发者工具打开就崩溃</li>
<li>简化项目，删除一些文件，注释一些路由，如注释了 cesium、three、example 的路由，看到报错信息了，添加了 babel-polyfill</li>
<li>放开 example 路由，看示例程序就崩溃，把示例 html 中的内容粘贴到 index.html 中运行，看到了报错，html 中集成 babel 转码和 polyfill 兼容 IE11</li>
<li>修改了 babel-loader 处理的范围，添加了 cesium、three 包</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>DOM 操作的 append 方法改为 appendChild 方法</li>
<li>示例程序的 html 中尽量不写 ES6 语法</li>
<li>示例程序的 html 中不要写 async await，使用 then 回调</li>
<li>示例程序的 html 中变量要有声明</li>
<li>WebGL 是实验性的，可能会有问题</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《精益创业UX篇 高效用户体验设计》笔记]]></title>
      <url>https://zhulichao.github.io/2021/04/04/lean-ux/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>在开发产品之前，弄清楚用户是否会购买你的产品。</li>
<li>在整个产品生命周期中，倾听用户的心声。</li>
<li>理解为何在设计一款产品之前要做测试。</li>
<li>获得对产品设计至关重要的9个工具。</li>
<li>区分必须的功能和有则更好的功能。</li>
<li>学习最小化可行产品是如何影响用户体验设计决策的。</li>
<li>协同使用A/B测试与优秀的用户体验设计实践。</li>
<li>加速产品开发过程而不牺牲产品质量。</li>
</ul>
<p>全书共3篇，分别从验证、设计及产品3个方面介绍了精益用户体验设计。</p>
<p>你应该了解如何设计简单产品，A/B测试，然后周期迭代改进。对了，别忘了还有持续部署、敏捷开发和最小化可行产品。</p>
<p>和精益创业非常相似，精益用户体验设计时围绕着验证假设展开的。</p>
<p>精益用户体验设计认为产品是由一组有待验证的假设所组成的。换句话说，不要以为我们知道用户想要什么。我们做用户访谈和用户调研就是为了拟定关于用户可能需要什么的假设，然后以各种方式验证这一假设，来看看我们是否正确。每一次验证都帮助我们对产品进行改进。</p>
<p>精益用户体验设计不是简单地把功能添加到产品，它是要找出关于驱动业务的指标，了解我们可以解决的客户问题从而推动指标的增长，产生改善这些客户问题的想法，然后验证这些想法是否正确。</p>
<p>很多精益创业公司都会落入这个陷阱：无法判断一个假设是否被验证了。</p>
<p>精益用户体验设计是以用户为中心的（User Centered Design，UCD）。</p>
<p>精益用户体验设计是敏捷的。</p>
<p>精益用户体验设计是由数据驱动的。</p>
<p>精益用户体验设计是快速和低成本的（某些时候）。</p>
<p>精益用户体验设计是迭代改进的（一直都是）。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>思考产品点子的时候，人们会犯一个很常见的错，要么是这个产品要解决的问题根本不存在，要么是痛点还不够痛，没有达到人们忍无可忍，想要解决它的程度。</p>
<p>但如果找不到需要解决的问题，那么人们也就没有足够充分的理由购买你的产品。就算你的点子再怎么棒、有创意、具有颠覆性的，早期验证可以让你更好地理解用户和完善你的点子。</p>
<p>创业是在充满各种高度不确定性的情况下进行产品或服务创新，尽早验证问题足以降低这种不确定性。</p>
<p>验证市场的第一个目标是缩小受众人群——那些希望问题能够被彻底解决的人们。第二个目标是去了解他们为什么对你的方案感兴趣，由此你还可以找到相似的市场，他们也有类似的动机。</p>
<p>当你能精确地预测某类人将会遇到的某个特殊问题，并且这个问题也足够严重，以至于他们愿意花钱购买解决方案，那么此时，就算你已经成功验证了你的市场了。</p>
<p>用于早期验证的方法：</p>
<ul>
<li><p>用户行为习惯研究（倾听你的用户）</p>
<p>在做用户行为研究的时候，非常容易犯一个错误，那就是告诉受访者你正在制作什么样的产品，以及这个产品是多么适合他们。如果给用户灌输你的想法的话，没有什么能比这更快地把用户带到沟里去。</p>
</li>
<li><p>着陆页测试</p>
<p>在制作产品之前先售卖产品。通过制作一个只有一些简单页面的网站，你可以得到一些粗略的数据，它能够揭示出有多少人对你的解决方案感兴趣。这样做有个好处，那就是你可以在制作产品之前就开始制作这样的网站。</p>
</li>
<li><p>原型测试</p>
<p>正确的方式是，给用户展示一些东西，并且观察他们的反应。最理想的情况是，你给用户展示的东西最好看上去，或者让他们感觉到这确实是一个产品，但是又并不需要你花上几个月的时间来写代码来制作这个东西。原型测试是个永不尽早验证你的产品的最佳方式。</p>
</li>
</ul>
<p>痛点驱动设计（Pain-Driven Design，PDD）要求你在开始设计产品或者新功能之前，首先要弄明白是什么东西让你的用户或者潜在用户感到难受。</p>
<p>如果你在对的时间做对的研究，你最终会节省时间和金钱。我已经提到过你应该做的几种不同类型的用户研究：用户验证和原型测试。</p>
<p>去测试别人的产品，你要做的不是去帮他们修复问题，而是要避免他们犯过的所有错误。</p>
<ul>
<li>你喜欢这个产品的什么地方？</li>
<li>你不喜欢这个产品的什么地方？</li>
<li>你对这个产品的哪里感到困惑？</li>
<li>这个产品有什么让你感到特别不爽吗？</li>
<li>这个产品缺少什么吗？</li>
<li>你如何学会使用这个产品？</li>
<li>你是在哪里听说这个产品的？</li>
<li>你试用过其他类似的产品吗？</li>
<li>为什么你选了这个产品而不是其他的呢？</li>
<li>（用于企业产品）哪部分工作是你必须要做、但这个产品却没有提供相应功能的？你是如何看待这个问题的？</li>
</ul>
<p>在你打算创业时最重要的决策之一就是如何对用户描述产品。</p>
<p>A/B测试可以告诉你在各个着陆页中哪一个效果最好。</p>
<p>找出用户对你的着陆页反应的唯一方法是问答下面的问题：</p>
<ul>
<li>用户觉得这个产品是做什么的？</li>
<li>用户认为这个产品是给谁用的？</li>
<li>用户知道如何获取该产品吗？</li>
</ul>
<p>UsabilityHub是一个远程用户测试平台，通过5秒钟测试、单击测试、导航测试、问题测试和偏好测试等，你可获得真实快捷的用户反馈。UsabilityHub作为研究用户数据的工具可帮助开发，设计以及营销人员改善目标网页和应用程序的用户体验，从而提升你网站的转化率。</p>
<p>为了在任何类型的用户调研中都发挥到极致，在发现共性问题之前，最好找尽量少的人进行测试。然后你会一次次地测试这些人，同时也会在每次测试之间留下足够多的时间来修改产品、样品、原型、讨论方案，或者任何你打算进行测试的东西。</p>
<p>只有一种类型的调研需要亲自面对面进行，那就是你需要了解用户在什么环境中使用你的产品，或者用户和产品在一起的时候才能进行测试。</p>
<p>非监管测试是指，你可以自动获得一个关于真实用户使用你的产品的视频，视频中的人尝试着去执行各种你所指派的任务。它最不适合用来做什么：</p>
<ul>
<li>了解人们是否喜欢你的产品</li>
<li>了解人们是否会使用你的产品</li>
<li>了解人们在他们的设备上并且在没有任何提示的情况下使用你的产品的时候，是否还能知道他们应该执行什么任务</li>
<li>了解真实用户每天都是怎么使用你的产品的</li>
<li>了解如何修复你发现的易用性问题</li>
<li>其他</li>
</ul>
<p>定性研究，这主要包括和用户会谈，观察并理解他们的行为。这里跟统计学无关。这里有几个定性研究的例子：</p>
<ul>
<li>情境问答</li>
<li>易用性研究</li>
<li>客服访谈</li>
</ul>
<p>定量研究指的是测量真实用户是如何使用你的产品的。它不涉及和某一个人交谈，而更多的是关于研究聚合的数据。这是具有统计学意义的。这里有几个定量研究的例子：</p>
<ul>
<li>漏斗分析</li>
<li>A/B测试</li>
<li>群组分析</li>
</ul>
<p>定量研究会告诉你问题是什么，定性研究会告诉你为什么有这样的问题。</p>
<p>定性的方法：</p>
<ul>
<li>定期观察用户使用你的产品</li>
<li>和那些放弃使用你的产品的人交流</li>
<li>观察新用户使用你的产品，问问他们在开始使用产品的最初15分钟里，他们期望的是什么</li>
</ul>
<p>定量的方法：</p>
<ul>
<li>观察那些被最有价值的用户使用得最多的产品功能</li>
<li>尝试使用“假功能“测试，这可以通过添加一个按钮或者导航元素</li>
</ul>
<p>最佳的策略是，确保你总是能够追踪到你的指标，并且观察人们使用你的产品。</p>
<p>定性研究能够很明确地告诉你，用户能否做某件事。它可以告诉你这个功能对于用户而言是否有意义，以及用户能否成功完成某项任务。</p>
<p>定性研究对于判断用户是否愿意做某些事情也是有一定效果的，因为用户很有可能会做这些事情，只要产品或者功能不要太难以使用。</p>
<p>当你在决定到底是选择定性研究还是定量研究的时候，有件很重要事情得记住，那就是问自己，到底是想要知道发生了什么，还是想知道为什么某件事会发生。</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>设计就是关于解决问题的。一旦你很好地定义你的问题，并确定你想要的产品结果是什么，为了防止万一你的最终产物存在缺陷，精益用户体验设计鼓励你用尽量少的工作量尽快的制作出你期望的结果。这意味着要先做设计并去验证你的假设。</p>
<p>在精益用户体验设计中，你应该尽可能多地区验证你的假设。</p>
<ul>
<li>工具1：真正了解问题</li>
<li>工具2：先设计测试</li>
<li>工具3：写一些故事</li>
<li>工具4：与团队讨论可能的解决方案</li>
<li>工具5：做出决策</li>
<li>工具6：验证方法是否有效</li>
<li>工具7：一些草绘的方法，Balsamiq 或 OmniGraffle 草绘工具</li>
<li>工具8：创建交互原型</li>
<li>工具9：测试和迭代改进</li>
</ul>
<p>如果要我说出精益用户体验设计区别于其他设计方式的最明显的一点的话，那答案就是测试。</p>
<p>还要补充一点：给用户真正想要的。一个客户说：”我想要某个功能“，企业家和产品负责人往往写下”客户想要某个功能“，而不是了解他为什么想要这个功能，然后就开始制作这个功能了。</p>
<p>卓越设计当中很重要的一环就是把时间花在重要的事情上，而不要浪费在那些无关紧要的事情上。</p>
<ul>
<li>这个问题影响到谁了？</li>
<li>影响到他们的频率有多高？</li>
<li>这个问题对哪一个关键指标造成了破坏？</li>
</ul>
<p>流程图适合用来做什么？当你想要弄清楚用户在产品中的移动路径，以及他们是如何完成某些常规任务的时候，最好是用流程图或者站点地图。它对预估工作量也有极大帮助，还可以辅助你和开发人员就设计问题进行沟通交流。</p>
<p>流程图不合适拿来验证假设，或者用于易用性测试，因为它不是设计给用户看到。</p>
<p>草绘图是你首次开始试着把产品或者功能变得可视化。别再从”用户需要登录“这个角度思考问题，而应该多思考用户在登录过程中可能需要哪些元素，以及这些元素之间的关系。</p>
<p>在你思考问题的时候，应该采用草绘图，因为它非常便捷，灵活度高。你可以毫不费力的在页面上画各种各样的元素，移动调整它们的位置，甚至删除或者再加入一些元素。你也可以制作一堆草绘图，每一个都包含众多的元素，或者把不同的信息归类放置。总之，你可以很容易地做各种试验。</p>
<p>草绘图还可以帮你和其他人沟通交流你的设计思路。</p>
<p>草绘图并不能用来从用户那里收集反馈信息。</p>
<p>在我看来，一个使用的线框图必须包含所有的真实产品中的文字、按钮、关键操作，以及导航元素。而且此时它还没有任何视觉设计，这将在后面的环节中添加进来。但是可以肯定的是，线框图包含了所有在制作草绘图的时候设计出来的元素，并且不仅仅只是把这些元素组合到一起，还要让它们支撑起整个功能或者产品。</p>
<p>重要的是要记住，线框图是用来让你弄清楚屏幕上或者产品的某个工作状态下的每一处细节的。</p>
<p>制作交互式原型产品的最佳理由是，在花费大量时间和金钱制作真正的产品之前，它有助于帮你找出设计里的错误。基本上来讲，当原型产品可以帮你节省时间和金钱的时候，你就应该使用它。</p>
<p>关于交互式原型很重要的一件事情就是，当制作一个要耗费很多时间才能上线的功能的时候，或者后续的修补成本很高的时候，它很适合用来测试你的产品。</p>
<p>在设计的最初阶段，还在和团队成员头脑风暴各种不同的点子的时候，纸上原型可以让每个人都对产品有统一的认识。这种情况下，纸上原型是非常迅速且高效的，但是别期望可以得到更多的更深入的细节。而且不要给潜在用户展示纸上原型，仅仅只把它展示给团队成员。</p>
<p>视觉设计和交互设计是不能互换的，视觉设计是关于一个产品看起来怎么样，而交互设计是关于一个产品如何运作的。</p>
<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>A/B测试（有时称为分桶测试或多变量测试）是指创建多个版本的界面或功能，并在真实产品环境中对不同的用户显示不同版本，以找出哪个版本的测试结果更好。</p>
<p>做设计评估最主要的原因是，可以知道你所做的改动对于公司而言，到底是起到了正面积极的作用，还是带来了负面的影响。</p>
<p>A/B测试的本质是，通过技术解决方案来解决设计问题，正是这一点使得它被大量的工程师文化浓厚的团队所采纳。</p>
<p>净推荐值是指有多少用户会向朋友推荐你的产品。虽然净推荐值是度量用户满意度的最佳指标，但它很难被精确收集。</p>
<p>只有在产品具有延迟注册机制的情况下，注册率才能算是衡量用户满意度的指标。</p>
<p>有时候就算得到的统计数据看上去非常显著，然而却并不具备统计学意义，原因是样本范围太小。</p>
<p>当你观察任何类型的实验或改动的结果时，你应该加入时间因素，看看在较长的时间范围内它将如何影响你的指标。</p>
<p>跨职能团队能起到很好的效果是因为每个人在相同的时间做相同的事情，这意味着信息在传递的过程中不会被混淆或丢失。</p>
]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB 自适应]]></title>
      <url>https://zhulichao.github.io/2021/02/22/web-responsive/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h2><p>主要针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则，主要是页面布局或元素需要发生变化的情况，如从横向排列改为纵向排列，或使用不同图片等。</p>
<h2 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h2><p>可针对容器宽度自行调整元素位置，如果可以不限制元素宽高，自行充满。</p>
<h2 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h2><p>避免使用 px，使用 vh、vw、rem 等单位。使用 rem 的方式，可以采用工具进行自动的 px 到 rem 的转换。注意 <code>1px</code> 可以不转换，有时转换为 rem 会不显示，写成 <code>1PX</code> 即可不被转换。</p>
<h2 id="rem-方式实现"><a href="#rem-方式实现" class="headerlink" title="rem 方式实现"></a>rem 方式实现</h2><h3 id="安装-postcss-pxtorem"><a href="#安装-postcss-pxtorem" class="headerlink" title="安装 postcss-pxtorem"></a>安装 postcss-pxtorem</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install postcss-pxtorem --save-dev</div></pre></td></tr></table></figure>
<h3 id="配置-postcss-pxtorem"><a href="#配置-postcss-pxtorem" class="headerlink" title="配置 postcss-pxtorem"></a>配置 postcss-pxtorem</h3><p>添加 .postcssrc.js 文件如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">"plugins"</span>: &#123;</div><div class="line">    <span class="string">"autoprefixer"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"postcss-pxtorem"</span>: &#123;</div><div class="line">      <span class="string">"rootValue"</span>: <span class="number">16</span>,</div><div class="line">      <span class="string">"propList"</span>: [</div><div class="line">        <span class="string">"*"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"selectorBlackList"</span>: [<span class="string">"el-tooltip"</span>],</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="添加自适应代码"><a href="#添加自适应代码" class="headerlink" title="添加自适应代码"></a>添加自适应代码</h3><p>添加 rem.js 文件如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth; <span class="comment">// 获取窗口的文档显示区的宽度</span></div><div class="line">  <span class="keyword">var</span> font_Size = (<span class="number">16</span> / <span class="number">1920</span>) * width; <span class="comment">// 设计稿以1920为准，在1920的设计稿中：16px = 1rem</span></div><div class="line">  html.style.fontSize = font_Size + <span class="string">'px'</span>;</div><div class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = font_Size + <span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line">setRem();</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRem);</div></pre></td></tr></table></figure>
<p>修改 main.js 文件如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">import <span class="string">'./utils/rem'</span>;</div><div class="line">...</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 开发者工具]]></title>
      <url>https://zhulichao.github.io/2021/02/03/chrome-devtools/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>您已进入无痕模式调试性能相关的问题，禁用页面缓存，调整网络状态为 3G</p>
<ul>
<li>F5, Ctrl + R / Cmd + R，刷新页面</li>
<li>Ctrl + F5, Ctrl + Shift + R / Cmd + Shift + R，刷新页面并忽略缓存</li>
<li>Ctrl + ‘+’ / Cmd + Shift + ‘+’，放大 DevTools</li>
<li>Ctrl + ‘-‘ / Cmd + Shift + ‘-‘，缩小 DevTools</li>
<li>Ctrl + 0 / Cmd + 0，DevTools 恢复大小</li>
</ul>
<h2 id="模拟设备"><a href="#模拟设备" class="headerlink" title="模拟设备"></a>模拟设备</h2><img src="/2021/02/03/chrome-devtools/devices.jpg" title="模拟设备">
<p>打开调试工具，点击图中【1】所指图标可模拟设备，这个功能能够将你的浏览器变成任意一款移动设备，也能为你的网页设定宽高，点击 Edit… 可选择或添加常用设备。</p>
<h2 id="Elements-面板"><a href="#Elements-面板" class="headerlink" title="Elements 面板"></a>Elements 面板</h2><img src="/2021/02/03/chrome-devtools/elements.png" title="Elements面板">
<p>Elements 面板主要用于对页面 HTML 和 CSS 的检查以及可视化编辑，左上部分是一棵 DOM 树，左下部分是选中元素及所有父节点，右边是选中元素的样式。</p>
<h3 id="检查页面-DOM-元素"><a href="#检查页面-DOM-元素" class="headerlink" title="检查页面 DOM 元素"></a>检查页面 DOM 元素</h3><ul>
<li>右击页面任意一元素，选择检查</li>
<li>快捷键 Cmd + Opt + C，或点击图中【1】所指图标，在页面中选择元素</li>
<li>鼠标悬停 Elements 面板 DOM 树上的任意一个节点，页面会用淡蓝色的蒙板在页面上标记 DOM 节点对应的页面</li>
<li>按键盘的向上、向下键可以在展开的节点之间进行切换，向左、向右键可以收缩和展开节点</li>
</ul>
<p>点击图中【2】所指图标，Settings，Elements，勾上 Show user agent shadow DOM，可查看 placeholder 样式，如图中【3】所指。</p>
<h3 id="编辑-DOM"><a href="#编辑-DOM" class="headerlink" title="编辑 DOM"></a>编辑 DOM</h3><p>如图中【4】所示，选中 DOM 节点后，可双击或回车编辑，也可右键选择相应的菜单编辑。其中，Scroll into view 可让这个元素快速滚入视图中， Force state 可以触发并保持元素的伪类状态，Break on 可以添加 DOM 节点的监听，subtree modifications 表示子元素改变时、attribute modifications 表示属性改变时、node removal 表示元素被移除时。</p>
<p>在 Console 面板输入 <code>document.body.contentEditable=&quot;true&quot;</code>，可以直接对页面进行编辑。</p>
<h3 id="检查、编辑样式"><a href="#检查、编辑样式" class="headerlink" title="检查、编辑样式"></a>检查、编辑样式</h3><p><strong>Styles</strong> 面板，实时编辑与所选元素相关的样式，单击属性或者属性值可进行修改，按 Tab 键修改下一个属性或值，按 Tab + Shift 修改上一个属性或值。当值是数字类型时，按上下键可以以 1 为单位递增或递减，按 Alt + 上下键以 0.1 为单位递增或递减，Shift + 上下键以 10 为单位递增或递减。点击空白处可添加新的样式。</p>
<p>以 “Inherited from …” 为分界，上面的样式都是作用于元素本身的，下面的都是其继承而来的，继承的对象一般不止一个，可能是父元素，父元素的父元素…，将鼠标悬停在一个选择器上时，可以看到这个选择器所影响的所有页面元素（不包括可视区域外的元素）。</p>
<p>图中【5】所指部分，<code>:hov</code> 可触发并保持元素的伪类状态，用于查看伪类的 css 样式。<code>.cls</code> 可临时增删元素 class。<code>+</code> 可添加新的样式规则。</p>
<p>长时间悬停在某 CSS 类名上，会突出显示受该属性影响的所有节点。</p>
<p><strong>Event Listeners</strong> 面板，查看所选元素相关的监听事件。其中 Ancestors 不勾选则只显示直接定义在所选元素上的监听事件。Ancestors 后面为监听器类型，Blocking 为典型的那些过时的事件监听，Passive 指 Passive events listeners，是一个新的 web 标准，从 Chrome 51 开始添加的一个新特性，主要用来让页面滑动更加流畅。Framework listeners 检查来自框架的事件监听。右键事件监听，弹出菜单可以快速定位到源码。</p>
<p><strong>Computed</strong> 面板，检查、编辑所选元素的盒模型。</p>
<p><strong>Layout</strong> 面板，Grid 布局样式调试。</p>
<p><strong>DOM Breakpoints</strong> 面板，管理添加的 DOM 节点监听。</p>
<p><strong>Properties</strong> 面板，所选节点对应的对象及父类们。</p>
<p><strong>Accessibility</strong> 面板，查看 Accessibility Tree，无障碍树。</p>
<h2 id="Console-面板"><a href="#Console-面板" class="headerlink" title="Console 面板"></a>Console 面板</h2><img src="/2021/02/03/chrome-devtools/console.png" title="Console面板">
<p>Console 面板一方面用来记录页面在执行过程中的信息（一般通过各种 console 语句来实现），另一方面用来当做 shell 窗口来执行脚本以及与页面文档、DevTools等进行交互。</p>
<p>打开调试工具，可以看到 Console 面板，如果在其它面板下想同时看 Console，可以按 Esc 键，将 Console 以 “Drawer” 的形式打开。Console Drawer 中，Search 面板，可全局搜索代码，点击搜索结果，会跳到具体的源码文件。</p>
<p>图中【1】所指按钮为清空，可以通过快捷键 Ctrl L 清空 Console 面板，这个清空并不是真正意义的清空，还可以按向上向下的按键查看在 Console 中输入的历史。</p>
<p>图中【2】所指为执行环境选择器，除了当前的页面的执行环境，其它的框架、拓展都有其自己的执行环境，默认的执行环境是 “top”，点击下拉框还有其它选项，保持默认的 top 即可，如果想调试 iframe 可切换到指定的 iframe 环境。</p>
<p>图中【3】所指 Default levels 下拉框中勾选 Verbose，显示日志级别的信息，过滤框中输入 violation，可查看针对代码的最佳实践。</p>
<p>图中【4】创建一个动态监听，实时监听一个变量，如果变化了，这里也会变化，如输入 <code>Date.now()</code>。</p>
<p>Hide network：默认是不勾选的，Console 会报告网络问题，勾选这个功能就能过滤网络报告信息。</p>
<p>Preserve log：默认是不勾选的，如果勾选了，刷新页面之后信息还会被保留。</p>
<ul>
<li><code>$()</code> 作为 document.querySelector() 的缩写</li>
<li><code>$$()</code> 作为 document.querySelectorAll() 的缩写，返回一个数组</li>
<li><code>$0 ... $4</code>，代表 5 个最近访问过的 DOM 或者堆对象，$0 是最近访问的</li>
<li><code>$_</code> 记录了最后一次在表达式执行的结果</li>
</ul>
<p>在 Elements 标签页中选中一个页面元素，在 Console 标签页中，调用函数 <code>monitorEvents($0, &#39;click&#39;)</code>，第一个参数是当前元素（$0），第二个参数是事件名（click），按 Enter后，当被选中的元素触发了点击事件之后，Console 标签页会将该点击事件对象打印出来，调用 <code>unmonitorEvents($0)</code> 进行解绑。</p>
<p>如果要打印的变量是一个数组，每一个元素都是一个对象，可以使用 <code>console.table</code> 来打印，其表格化的呈现更加美观易读，如图中【5】所指。</p>
<p><code>copy()</code> 是一个工具函数方便将任何东西拷贝到系统的粘贴板暂存，传入一个没有格式的JSON，会返回格式化的结果，如图中【6】所指。</p>
<p><code>console.log()</code> 会在浏览器控制台打印出信息。</p>
<p><code>console.dir()</code> 可以显示一个对象的所有属性和方法。</p>
<h2 id="Application-面板"><a href="#Application-面板" class="headerlink" title="Application 面板"></a>Application 面板</h2><img src="/2021/02/03/chrome-devtools/clear.png" title="Clear site data">
<p>Application 面板查看应用信息、网页加载的所有资源，包括存储信息、缓存信息以及页面用到的图片、字体、脚本、样式等信息。</p>
<p>Ctrl Shift P，输入 clear，选择 Clear site data，在 Application 面板中 Storage 中可看到 Clear site data 按钮，一次性清除网站所有数据。</p>
<p>Frames 菜单中显示了该页面所有内容资源，顶级的 top 是一个主文档，在 top 下面是主文档的 Fonts、Images、Scripts、Stylesheets 等资源，最后一个就是主文件自身。在资源上右击后在弹出菜单选择 Reveal in Network Panel，就会跳转到 Network 面板并定位到该资源的位置。</p>
<h2 id="Network-面板"><a href="#Network-面板" class="headerlink" title="Network 面板"></a>Network 面板</h2><img src="/2021/02/03/chrome-devtools/network.png" title="Network面板">
<p>Network 面板可查看页面中各种资源请求的情况，如资源的名称、状态、使用的协议、资源类型、资源大小、资源时间线等情况，右键列头可以添加或隐藏列，可以根据这个进行网络性能优化。Network 面板主要分为3部分，分别为图中【1】【2】【3】，其中【3】所指为 Summary 概览，显示总的请求数、数据传输量、加载时间信息，下面详细说一下【1】【2】部分。</p>
<h3 id="Controls"><a href="#Controls" class="headerlink" title="Controls"></a>Controls</h3><p>图中【1】所指为 Controls 控制面板，控制 Network 的外观和功能。其中点击【4】所指过滤图标显示【6】所指过滤面板，Filter 输入框中可输入文本、正则表达式、属性过滤、<code>-</code> 开头表示取反，在显示的文件类型中，可按 Ctrl 键多选，WS 指 WebSocket，都是控制 Requests Table 具体显示哪些内容。Preserve log 勾选后刷新页面不清空 Network，Disable cache 勾选后禁用缓存。点击 Throttling 节流按钮，可模拟网络状态，默认值是 Online。点击【5】所指设置图标显示【7】所示更多控制选项，勾选 Show overview 会显示【8】所指面板，显示获取到资源的时间轴信息，其中蓝色竖线表示 DOMContentLoaded 事件被触发，并且在 Summary 以蓝色文字显示确切的时间，红色竖线表示 load 事件被触发，在 Summary 也会以红色文字显示确切的时间。勾选 Capture screenshots 重新加载页面即可捕获屏幕，双击其中的截屏可以放大显示，在放大的图下方可以点击跳转到上一帧或者下一帧，单击则可以查看该帧被捕获时的网络请求信息，并且在 Overview 上会有一条黄色竖线以标记该帧被捕获的具体时间点。</p>
<ul>
<li>DOMContentLoaded 事件会在页面上 DOM 完全加载并解析完毕之后触发，不会等待 CSS、图片、子框架加载完成</li>
<li>load 事件会在页面上所有 DOM、CSS、JS、图片完全加载完毕之后触发</li>
</ul>
<h3 id="Requests-Table"><a href="#Requests-Table" class="headerlink" title="Requests Table"></a>Requests Table</h3><p>图中【2】所指为 Requests Table 请求表格，按照请求的顺序排序，显示所有获取到的资源信息。点击一个请求的 Name 列可以了解更多信息，其中：</p>
<ul>
<li>Headers 该资源的HTTP头信息</li>
<li>Preview 根据你所选择的资源类型（JSON、图片、文本）显示相应的预览</li>
<li>Response 显示HTTP的Response信息</li>
<li>Cookies 显示资源HTTP的Request和Response过程中的Cookies信息</li>
<li>Timing 显示资源在整个请求生命周期过程中各部分花费的时间</li>
</ul>
<p>在 Timing 标签中可以显示资源在整个请求生命周期过程中各部分时间花费信息，可能会涉及到如下过程的时间花费情况：</p>
<ul>
<li>Queuing 排队的时间花费，可能由于该请求被渲染引擎认为是优先级比较低的资源（图片）、服务器不可用、超过浏览器的并发请求的最大连接数（Chrome的最大并发连接数为6）</li>
<li>Stalled 从HTTP连接建立到请求能够被发出送出去(真正传输数据)之间的时间花费，包含用于处理代理的时间，如果有已经建立好的连接，这个时间还包括等待已建立连接被复用的时间</li>
<li>Proxy Negotiation 与代理服务器连接的时间花费</li>
<li>DNS Lookup 执行DNS查询的时间，网页上每一个新的域名都要经过一个DNS查询，第二次访问浏览器有缓存的话，则这个时间为0</li>
<li>Initial Connection 建立连接的时间花费，包含了TCP握手及重试时间</li>
<li>SSL 完成SSL握手的时间花费</li>
<li>Request sent 发起请求的时间</li>
<li>Waiting (Time to first byte (TTFB)) 是最初的网络请求被发起到从服务器接收到第一个字节这段时间，它包含了TCP连接时间，发送HTTP请求时间和获得响应消息第一个字节的时间</li>
<li>Content Download 获取Response响应数据的时间花费</li>
</ul>
<p>通过按住 Shift 并且把光标移到请求行上，在该资源的上方第一个标记为绿色的资源就是该资源的发起者（请求源），有可能会有第二个标记为绿色的资源是该资源的发起者的发起者，以此类推，在该资源的下方标记为红色的资源是该资源的依赖资源，也就是对该资源的请求过程中引发了哪些资源，如下图所示。</p>
<img src="/2021/02/03/chrome-devtools/shift.png" title="按住shift">
<p>右键一个请求行，弹出菜单，其中：</p>
<ul>
<li>选择 Copy -&gt; Copy as fetch，复制为一个完整的 Fetch 请求的代码</li>
<li>选择 Block request domain 或 Block request URL，可以分别阻塞该请求所在 domain 下的所有请求 和 该请求</li>
</ul>
<h2 id="Sources-面板"><a href="#Sources-面板" class="headerlink" title="Sources 面板"></a>Sources 面板</h2><img src="/2021/02/03/chrome-devtools/sources.png" title="Sources面板">
<p>主要用来调试页面中的 JavaScript。Ctrl Shift P，输入 folding，选择 Enable code folding，或通过 Setting -&gt; Preferences -&gt; Sources，勾选 Code folding，可以在 Source 面板的编辑器和 Network 面板的 Preview 窗口下折叠 CSS 和 JavaScript 代码。设置断点可通过如下几种方式：</p>
<ul>
<li>在 JS 文件中输入 <code>debugger</code> js 文件运行的时候会在此处暂停</li>
<li>在 Sources 面板中打开文件，点击行号可添加断点，有时会出现行内断点，如【4】所示，点击即可激活，右键行号，Add condition breakpoints 可添加条件断点，Add logpoint 可快速注入一条 <code>console.log</code> 消息，设置的行断点可以在 Breakpoints 小窗口做统一管理</li>
<li>在 Elements 面板右键元素，Break on 可添加 DOM 断点</li>
<li>XHR/fetch Breakpoints 可添加 URL 包含某一字符串的断点，会在 XHR 调用 <code>send()</code> 那行代码的地方暂停</li>
<li>Event Listener Breakpoints 可勾选某一类别的事件或者是某一具体的事件添加事件监听器断点</li>
<li>点击图中【2】所指图标可在捕获的异常处暂停，未捕获的异常不考虑</li>
</ul>
<p>图中【1】所指按钮可停用所有断点，在不取消断点标记的情况下，使得所有断点失效；【3】所指按钮可将压缩的代码格式化显示。</p>
<p>当在某行代码暂停时，在调用栈窗口（Call Stack）的任意地方右键选择 Restart Frame，DevTools 会在调用栈 top 函数的第一行代码处暂停，top 函数就是指最后一个被调用的函数，在调用栈中位于最上面，所以叫 top 函数。可以在 Scope 窗口查看、编辑某些属性值和变量值，这些属性和变量按照作用域又分属在不同的地方，如局部作用域内、闭包内或者全局作用域内。在编辑器窗口打开对应的 js 文件中，可选择变量添加到 Watch 中进行监听，可在任意地方右键选择 Blackbox script 忽略该脚本文件，如第三方的库文件。可在 Settings -&gt; Blackboxing 中统一管理黑盒中的所有脚本文件。可在编辑器窗口直接修改文件，按Command+S(Mac)或者Ctrl+S保存修改，DevTools会重新编译脚本，继续在页面上进行某些操作，比如点击事件，就可以看到修改代码的效果了。Global Listeners 显示全局监听器，在浏览器中 window 是全局对象，所以在 Global Listeners 面板中显示绑定在 window 对象上的事件监听。</p>
<p>Overrides 子标签，选择 + Select folder for overrides，来为 Overrides 设置一个保存重写属性的目录，启用本地覆盖 ,面板上会显示你刚刚选择的文件夹。在 Page 子标签里选择你要修改的文件，Ctrl+S 保存修改，此时会在 Overrides 中你选择的文件夹下产生目录对应的本地副本文件。当存在本地副本时，本地覆盖启用，且工作空间下有该网站的同名覆盖文件，浏览器会优先执行覆盖文件。</p>
<p>Content scripts 指的是 Chrome 拓展注入在网页中的脚本。</p>
<p>Snippets 子标签来辅助 Debugging，以创建和保存小段代码的工具，比如 可以快速给任何应用添加lodash，右键可执行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    element.src = <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.15.0/lodash.min.js"</span>;</div><div class="line">    element.type = <span class="string">"text/javascript"</span>;</div><div class="line">    <span class="built_in">document</span>.head.appendChild(element);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="Performance-面板"><a href="#Performance-面板" class="headerlink" title="Performance 面板"></a>Performance 面板</h2><p>Performance 面板可查看页面加载过程中的详细信息，不仅可以看到通过网络加载资源的信息，还能看到解析 JS、计算样式、重绘等页面加载的方方面面的信息。Cmd + Shift + N 打开 Chrome 的无痕模式，打开 <a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="external">在线DEMO</a> 链接，Cmd + Option + I 打开开发者工具，点击 Performance 面板。</p>
<img src="/2021/02/03/chrome-devtools/performance1.png" title="Performance面板">
<p>其中，【1】中三个按钮分别表示手动开始记录、自动重启页面并记录整个页面的加载过程、清除性能录制的记录，点击【2】按钮会进行一次垃圾回收，点击【3】Capture Settings（⚙️）按钮会展示更多设置来模拟各种状况，Disable JavaScript samples 选项勾选会使工具忽略记录 JS 的调用栈，Enable advanced paint instrumentation 选项勾选会详细记录某些渲染事件的细节，Network 选项可模拟网络状态，CPU选项可进行CPU限速。</p>
<p>点击左上角的 Record 按钮开始记录，然后模拟正常用户使用网页，点击 Stop 停止记录，生成性能报告。</p>
<img src="/2021/02/03/chrome-devtools/performance2.png" title="Performance报告">
<p>第一部分中，右测分别有 FPS、CPU、NET、HEAP：</p>
<ul>
<li>FPS 对应的是帧率，绿色代表帧率正常，绿色条越高，FPS 越高，红色代表帧率低，如果发现了一个红色的长条，那就说明这些帧存在严重问题，可能会降低用户体验，FPS ≥ 60性能最佳，FPS &lt; 24 会让用户感觉到卡顿</li>
<li>CPU 部分上有黄色、紫色、绿色等色块，它们的释义看图的左下角 Summary 标签，谁的占比高，说明 CPU 主要的时间花在哪里</li>
<li>NET 每条彩色横杠表示一种资源，横杠越长，检索资源所需的时间越长，每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间）</li>
<li>HEAP 就是堆内存占用</li>
</ul>
<p>对于这个DEMO，可以很容易观察到性能问题，现在已经确定到这个页面的动画性能表现不太好，注意第四部分 Summary 面板中，也会发现CPU花费了大量的时间在 Rendering 上，提高性能就是一门做减法的艺术，目标就是减少 Rendering 的时间。</p>
<p>第二部分中，把鼠标移动到 Frames 的绿色条状上时，会展示这个帧的FPS。展开 Main 图表，展示了主线程运行状况，X轴代表着时间，每个长条代表着一个event，长条越长就代表这个event花费的时间越长，Y轴代表了调用栈，上面的event调用了下面的event。在事件长条的右上角出，如果出现了红色小三角，说明这个事件是存在问题的，需要特别注意。可使用键盘A键（选区轨迹左移）、D键（选区轨迹右移）、W键（缩小选区）、S键（增大选区）调整选择区域。</p>
<p>点击带有红色小三角的的事件，在 Summary 面板会看到详细信息，包括警告信息，如果存在 Reveal 的链接，双击它会让高亮触发这个事件的event，Reveal 下面是源码文件的链接，点击就会跳转到对应的代码处。点击 app.js:95 这个链接，就会跳转到对应的代码处，定位到是 update 方法造成的，但还不够明确。</p>
<img src="/2021/02/03/chrome-devtools/performance3.png" title="Performance报告">
<p>在 app.update 这个事件的长条下方，有很多被触发的紫色长条，放大这些事件长条，会看到它们每个都带有红色小三角，点击其中一个紫色事件长条，在 Summary 面板里展示了更多关于这个事件的信息。这里有“Forced reflow is a likely performance bottleneck.”警告，即强制回流可能是性能瓶颈，点击 Reveal 下面的源码链接 app.js:70 会跳转到需要优化的代码处。</p>
<img src="/2021/02/03/chrome-devtools/performance4.png" title="Performance报告">
<img src="/2021/02/03/chrome-devtools/performance5.png" title="源码文件">
<p>这段代码的问题在于，在每个动画帧中，它会更改每个方块的位置，然后查询页面上每个方块的位置，由于样式发生了变化，浏览器不知道每个方块的位置是否发生了变化，因此必须重新布局方块以计算其位置。优化代码是将 offsetTop 替换成 style.top，后者虽然取的是上一帧动画的元素位置，但并不影响计算下一帧动画位置，省去了重排获取位置的过程，减少了不必要的重排。</p>
<h2 id="Lighthouse-面板"><a href="#Lighthouse-面板" class="headerlink" title="Lighthouse 面板"></a>Lighthouse 面板</h2><img src="/2021/02/03/chrome-devtools/lighthouse1.png" title="Lighthouse 面板">
<img src="/2021/02/03/chrome-devtools/lighthouse2.png" title="Lighthouse 报告">
<p>从以下5个方面来对页面的加载进行分析，生成报告，然后给出提高页面性能的建议。</p>
<ul>
<li>Performance 性能检测，如网页的加载速度、响应时间等<ul>
<li>First Contentful Paint（FCP） 首次内容绘制时间</li>
<li>Speed Index（SI）速度指数，是一个页面加载性能指标，明显的页面填充的速度，此指标的分数越低越好</li>
<li>Largest Contentful Paint（LCP） 最大内容渲染时间，LCP是一个页面加载时长的技术指标，用于表示当前页面中最重要/占比最大的内容显示出来的时间点。不同于FCP，FCP代表的是第一次页面内容渲染的时间点，LCP是FCP的一个重要的补充，它可以代表当前页面主要内容展示的时间，LCP低于2.5s则表示页面加载速度优良</li>
<li>Time to Interactive（TTI）可互动时间，页面中的大多数网络资源完成加载并且CPU在很长一段时间都很空闲的所需的时间，此时可以预期CPU非常空闲，可以及时的处理用户的交互操作</li>
<li>Total Blocking Time（TBT）累积阻塞时长，TBT是一个衡量用户事件响应的指标，TBT会统计在FCP和TTI时间之间，主线程被阻塞的时间总和，当主线程被阻塞超过50ms导致用户事件无法响应，这样的阻塞时长就会被统计到TBT中，TBT越小说明页面能够更好的快速响应用户事件</li>
<li>Cumulative Layout Shift（CLS）累积布局变化量，CLS是一个衡量页面内容是否稳定的指标，CLS会将页面加载过程中非预期的页面布局的累积变动，CLS的分数越低，表明页面的布局稳定性越高，通常低于0.1表示页面稳定性良好</li>
</ul>
</li>
<li>Accessibility 无障碍使用，是指所创建的网站对所有用户都可用/可访问，不管用户的生理/身体能力如何、不管用户是以何种方式访问网站</li>
<li>Best practices 最佳实践，实践性检测，如网页安全性，如是否开启HTTPS、网页存在的漏洞等</li>
<li>SEO 搜索引擎优化，如网页 title 是否符合搜索引擎的优化标准等</li>
<li>Progressive Web App 离线应用检测</li>
</ul>
<p>点击 View Original Trace 按钮可进入 Performance 面板中进行进一步分析。</p>
<h2 id="Memory-面板"><a href="#Memory-面板" class="headerlink" title="Memory 面板"></a>Memory 面板</h2><img src="/2021/02/03/chrome-devtools/memory1.png" title="Memory面板">
<p>Memory 面板可以记录某个时刻的页面内存情况，一般用于分析性能问题、内存问题。推荐用户在创建堆快照时，不要在 Console 中执行代码，也不要启用调试断点。【1】表示开始记录，【2】表示清除，【3】表示进行一次垃圾回收。开始录制前先点击下垃圾回收，如果要查看JS堆内存动态分配时间线，结束之前要再点击下垃圾回收，再结束录制。</p>
<p><strong>Heap snapshot</strong> 用以打印堆快照，堆快照文件显示页面的 javascript 对象和相关 DOM 节点之间的内存分配，如下图所示。【1】可以选择查看内存快照的方式，【2】能够按照列出来的 Constructor 值进行筛选，【3】能够选择查看哪些阶段的对象，如 “Objects allocated before Snapshot1”、”Objects allocated between Snapshot1 and Snapshot2”。</p>
<p>内存快照的查看方式包括：</p>
<ul>
<li>Summary 总览视图，可以显示按构造函数名称分组的对象，使用此视图可以根据按构造函数名称分组的类型深入了解对象（及其内存使用），适用于跟踪 DOM 泄漏</li>
<li>Comparison 对比视图，可以显示两个快照之间的不同，比较两个（或多个）内存快照在某个操作前后的差异，检查已释放内存的变化和参考计数，可以确认是否存在内存泄漏及其原因</li>
<li>Containment 内容视图，此视图提供了一种对象结构视图来分析内存使用，由顶级对象作为入口，有助于分析对象的引用情况，适用于分析闭包以及深入分析对象</li>
<li>Statistic 统计视图，内存使用饼状的统计图</li>
</ul>
<p>内存快照信息中，各个字段代表信息如下：</p>
<ul>
<li>Constructor - 表示使用此构造函数创建的所有对象</li>
<li>Distance - 显示使用节点最短简单路径时距根节点的距离</li>
<li>Shallow Size - 显示通过特定构造函数创建的所有对象浅层大小的总和。浅层大小是指对象自身占用的内存大小（一般来说，数组和字符串的浅层大小比较大）</li>
<li>Retained Size - 显示同一组对象中最大的保留大小。保留大小指某个对象删除后（其依赖项不再可到达）可以释放的内存大小</li>
<li>#New - 对比视图下特有，新增项</li>
<li>#Deleted - 对比视图下特有，删除项</li>
<li>#Delta - 对比视图下特有，增量</li>
<li>Alloc. Size - 对比视图下特有，内存分配大小</li>
<li>Freed Size - 对比视图下特有，释放大小</li>
<li>Size Delta - 对比视图下特有，内存增量</li>
</ul>
<img src="/2021/02/03/chrome-devtools/memory2.png" title="Heap snapshot">
<p><strong>Allocation instrumentation on timeline</strong> 在时间轴上随着时间变化记录内存信息，显示了对象在什么时候被创建、什么时候存在内存泄漏。当勾选 Record allocation stacks 框后，还可以在 Allocation stack 面板里打印出调用堆栈。每条线的高度与最近分配的对象大小对应，竖线的颜色表示这些对象是否仍然显示在最终的堆快照中，蓝色竖线表示在时间线最后对象仍然显示，灰色竖线表示对象已在时间线期间分配，但曾对其进行过垃圾回收。可以重复执行某个动作，如果最后有不少蓝色柱被保留，这些蓝色柱就是潜在的内存泄露问题。</p>
<img src="/2021/02/03/chrome-devtools/memory3.png" title="Allocation instrumentation on timeline">
<p><strong>Allocation sampling</strong> 内存信息采样，使用采样的方法记录内存分配，可以查看哪些函数影响了内存的分配，并且该函数所耗内存在内存分配中占比多少，图中函数可以直接点击跳转到函数定义的文件和位置。【1】可以选择查看方式，其中：</p>
<ul>
<li>Chart，整个内存占用堆栈图信息，root是整个标签加载所需内存，向下逐步拆解形成的内存堆栈</li>
<li>Heavy，将堆栈图自底向上的罗列出来</li>
<li>Tree，将堆栈图自顶向下的罗列出来</li>
</ul>
<img src="/2021/02/03/chrome-devtools/memory4.png" title="Allocation sampling">
<h2 id="JavaScript-Profiler-面板"><a href="#JavaScript-Profiler-面板" class="headerlink" title="JavaScript Profiler 面板"></a>JavaScript Profiler 面板</h2><img src="/2021/02/03/chrome-devtools/profile.png" title="JavaScript Profiler">
<p>可以记录函数的耗时情况，方便找出耗时较多的函数，分析内存泄露。【1】可以选择查看方式，Chart 表示按时间先后顺序显示 CPU 性能，Heavy(Bottom Up) 根据对性能的消耗影响列出所有的函数，并可以查看该函数的调用路径，Tree(Top Down) 从调用栈的顶端（最初调用的位置）开始，显示调用结构的总体的树状图情况。</p>
<p>在 Chart 视图下，Overview 部分是整个录制结果的概览，柱形条的高度对应了调用堆栈的深度，也就是说柱形条高度越高，调用堆栈的深度越深。Call Stacks 部分在录制过程中被调用的函数的调用堆栈，横轴表示时间，纵轴表示调用栈，自上而下的表示函数的调用情况。视图中的函数颜色是随机显示的，相同的函数颜色标记是相同的。纵轴表示的函数调用堆栈高度仅仅是函数的调用嵌套层次比较深，不表示其重要性很高，但是横轴上一个很宽的柱形条则意味着函数的调用需要一个很长的时间去完成，那么就需要考虑去做一些优化了。将鼠标移到Call Stacks中的函数上可以显示如下信息：</p>
<ul>
<li>Name 函数名称</li>
<li>Self time 函数的本次调用运行的时间，不包含它所调用的子函数的时间</li>
<li>Total time 函数的本次调用运行的总时间，包含它所调用的子函数的运行时间</li>
<li>URL 函数定义在文件中所在的位置，其格式为file.js:100，表示函数在file.js文件中的第100行</li>
<li>Aggregated self time 在这次的录制过程中函数调用运行的总时间，不包含它所调用的子函数的时间</li>
<li>Aggregated total time 在这次的录制过程中所有的函数调用运行的总时间，包含它所调用的子函数的时间</li>
<li>Not optimized 如果优化器检测到该函数有潜在的优化空间，那么该函数会被列在这里</li>
</ul>
<h2 id="Rendering-面板"><a href="#Rendering-面板" class="headerlink" title="Rendering 面板"></a>Rendering 面板</h2><img src="/2021/02/03/chrome-devtools/rendering.png" title="Rendering面板">
<p>Rendering 面板页面的绘制时间。可通过点击 More tools -&gt; Rendering 打开，或者 ESC 弹出 Console Drawer 面板，点击左边竖形排列的三个小点，选择 Rendering 打开。</p>
<ul>
<li>Paint flashing 实时高亮重绘区域（绿色）</li>
<li>Layout Shift Regions 实时高亮重排，及重新布局区域（蓝色）</li>
<li>Layer Border 高亮成层用边框（橙色、橄榄色、青色）</li>
<li>Frame Rendering Stats，显示 GPU 的信息，旧版本还有实时 FPS 显示，但新版本不知道为何没有（chrome 86）</li>
<li>Scrolling performance issues 高亮可能会影响滚动性能的元素，这些元素主要指绑定了scroll事件和touch事件的元素</li>
<li>Highlight ad frames 高亮用于广告的 iframe</li>
<li>Hit-test borders 展示点击测试的区域</li>
<li>Emulate CSS media type 模拟媒体查询是打印还是终端屏幕</li>
<li>Emulate CSS media feature prefers-color-scheme 模拟媒体查询的系统主题</li>
<li>Emulate CSS media feature prefers-reduced-motion 模拟媒体查询的开启动画减弱功能</li>
<li>Emulate vision deficiencies 模拟色盲等视觉障碍</li>
</ul>
<h2 id="Layers-面板"><a href="#Layers-面板" class="headerlink" title="Layers 面板"></a>Layers 面板</h2><img src="/2021/02/03/chrome-devtools/layers.png" title="Layers面板">
<p>点击图中【1】所指按钮 ，More tools，Layers，展示页面中的分层情况的3D视图，可平移、旋转查看。</p>
<h2 id="Security-面板"><a href="#Security-面板" class="headerlink" title="Security 面板"></a>Security 面板</h2><img src="/2021/02/03/chrome-devtools/security.png" title="Security面板">
<p>通过该面板你可以去调试当前网页的安全和认证等问题并确保您已经在你的网站上正确地实现 HTTPS 和哪些内容没有通过 HTTPS 连接。</p>
<h2 id="Performance-monitor-面板"><a href="#Performance-monitor-面板" class="headerlink" title="Performance monitor 面板"></a>Performance monitor 面板</h2><img src="/2021/02/03/chrome-devtools/monitor.png" title="Performance monitor面板">
<p>Ctrl Shift P，输入 Show Performance Monitor 回车，可调出性能监视器，具有实时更新的可视化功能，能突出显示页面中的性能瓶颈。</p>
<h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><img src="/2021/02/03/chrome-devtools/memory0.png" title="任务管理器">
<p>浏览器右上角三个点的符号 -&gt; 更多工具 -&gt; 任务管理器，主要关注内存占用空间、Javascript使用的内存，Javascript使用的内存默认不显示，可以点击右键添加，可结束指定进程。</p>
<ul>
<li>内存占用空间，表示本机内存，DOM节点存储在本机内存中，如果这个值在增加，则说明正在创建DOM节点。</li>
<li>JavaScript 使用的内存，表示JS堆，这一列包含两个值，关注实际使用大小即可（括号中的数字），跳动的数字表示您网页上的可获得的对象正在使用多少内存，如果这个数字在增加，那说明正在创建新对象，或现有对象正在增长。</li>
</ul>
<p>如果内存占用空间一直在增长但JS内存不增长，可能是浏览器还没有回收，不操作闲置一段时间看下是否会下降。如果是内存占用空间在增长，但JS内存增长得很缓慢，有可能是有JS变量引用了DOM，这个DOM节点本身不大，但影响了其他DOM节点(比如父级节点树)。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>浏览器窗口地址栏中输入 <code>chrome://flags/</code>，可以看到实验性的功能。</p>
<p>Settings 中，Experiments 菜单，勾选 CSS Overview，可以看到页面的 CSS 统计信息。</p>
<img src="/2021/02/03/chrome-devtools/css-overview.png" title="CSS Overview">
<p>Settings 中，Experiments 菜单，勾选 Record coverage while performance tracing，在 Performance 面板进行性能录制时可选择捕获代码覆盖率。Coverage 录制结果展示了录制过程中加载的所有 JS 和 CSS 文件以及每个文件的的大小、运行时覆盖率，红色表示未执行，绿色表示已执行。</p>
<img src="/2021/02/03/chrome-devtools/coverage.png" title="Coverage">
<p>Settings 中，Experiments 菜单，勾选 Automatically pretty print in Sources Panel，开启自动美化代码模式。</p>
]]></content>
      
        <categories>
            
            <category> 前端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-dynamic-component]]></title>
      <url>https://zhulichao.github.io/2021/01/15/vue-dynamic-component/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用动态组件实现菜单加载逻辑，并通过 mixin 提取公用部分。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;component</div><div class="line">      :is=&quot;item&quot;</div><div class="line">      v-for=&quot;(item, index) in components&quot;</div><div class="line">      :key=&quot;item + index&quot;</div><div class="line">      :ref=&quot;item&quot;</div><div class="line">    /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import &#123; mapActions &#125; from &apos;vuex&apos;;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  props: &#123;</div><div class="line">    components: &#123;</div><div class="line">      type: Array,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  created() &#123;</div><div class="line">    if (this.components &amp;&amp; this.components.length &gt; 0) &#123;</div><div class="line">      this.components.forEach(component =&gt; &#123;</div><div class="line">        Vue.component(component, resolve =&gt;</div><div class="line">          require([`@/views/map/dynamicComponents/$&#123;component&#125;`], response =&gt; &#123;</div><div class="line">            response.default.mixins = response.default.mixins || [];</div><div class="line">            response.default.mixins.push(&#123;</div><div class="line">              created() &#123;</div><div class="line">                this.$store.dispatch(&apos;AddDynamicComponent&apos;, &#123;</div><div class="line">                  name: component,</div><div class="line">                  handleClose: this.handleClose,</div><div class="line">                &#125;);</div><div class="line">              &#125;,</div><div class="line">            &#125;);</div><div class="line">            resolve(response);</div><div class="line">          &#125;, () =&gt; &#123;</div><div class="line">            console.error(`未找到 @/views/map/dynamicComponents/$&#123;component&#125;`);</div><div class="line">          &#125;)</div><div class="line">        );</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    ...mapActions([&apos;AddDynamicComponent&apos;]),</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git-fork-sync]]></title>
      <url>https://zhulichao.github.io/2021/01/08/git-fork-sync/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="fork-项目"><a href="#fork-项目" class="headerlink" title="fork 项目"></a>fork 项目</h2><ul>
<li>打开 <a href="https://git.gitedit.com:8081/gis-platform/epipe-vp-web" target="_blank" rel="external">epipe-vp-web</a> ，点击 Fork</li>
<li>选择一个空间即可</li>
<li>Settings -&gt; General -&gt; Advanced settings，修改项目名称和 Path</li>
</ul>
<img src="/2021/01/08/git-fork-sync/fork.jpg" title="Fork 项目">
<h2 id="clone-项目"><a href="#clone-项目" class="headerlink" title="clone 项目"></a>clone 项目</h2><ul>
<li>git clone 新项目地址， 默认分支为 master</li>
<li>cd epipe-vp-web-new</li>
<li>git remote add upstream <a href="https://git.gitedit.com:8081/gis-platform/epipe-vp-web.git" target="_blank" rel="external">https://git.gitedit.com:8081/gis-platform/epipe-vp-web.git</a></li>
<li>git checkout -b project-name 作为项目开发用</li>
</ul>
<h2 id="更新项目"><a href="#更新项目" class="headerlink" title="更新项目"></a>更新项目</h2><img src="/2021/01/08/git-fork-sync/fork-old.jpg" title="分支关系">
<h3 id="epipe-vp-web"><a href="#epipe-vp-web" class="headerlink" title="epipe-vp-web"></a>epipe-vp-web</h3><ul>
<li>在 business 分支开发</li>
<li>git checkout develop</li>
<li>git merge business</li>
<li>git push</li>
<li>git checkout master</li>
<li>git merge develop</li>
<li>git push</li>
</ul>
<h3 id="新项目"><a href="#新项目" class="headerlink" title="新项目"></a>新项目</h3><ul>
<li>git checkout master</li>
<li>git fetch upstream</li>
<li>git merge upstream/master</li>
<li>git push</li>
<li>git checkout project-name</li>
<li>git merge master</li>
</ul>
<img src="/2021/01/08/git-fork-sync/relation.jpg" title="分支关系">
<ul>
<li>有没有可能出现，同时开发 A、B 两个项目，同时需要业务平台修改，添加 featureA、featureB 功能？</li>
<li>其实新项目可以拉取原项目的任意分支</li>
</ul>
<h2 id="多次-fork"><a href="#多次-fork" class="headerlink" title="多次 fork"></a>多次 fork</h2><p>同一组下只能 fork 一次，若想达到 fork 多次的效果，可以通过如下两种方式：</p>
<h3 id="删除与源项目的-fork-关系"><a href="#删除与源项目的-fork-关系" class="headerlink" title="删除与源项目的 fork 关系"></a>删除与源项目的 fork 关系</h3><ul>
<li>Settings -&gt; General -&gt; Advanced settings -&gt; Remove fork relationship</li>
</ul>
<h3 id="通过-git-命令初始化"><a href="#通过-git-命令初始化" class="headerlink" title="通过 git 命令初始化"></a>通过 git 命令初始化</h3><ul>
<li>git clone <a href="https://git.gitedit.com:8081/gis-platform/epipe-vp-web.git" target="_blank" rel="external">https://git.gitedit.com:8081/gis-platform/epipe-vp-web.git</a></li>
<li>git remote rename origin upstream</li>
<li>git remote add origin <a href="https://git.gitedit.com:8081/zhulichao/epipe-fork.git" target="_blank" rel="external">https://git.gitedit.com:8081/zhulichao/epipe-fork.git</a></li>
<li>git push -u origin —all</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[https-public-path]]></title>
      <url>https://zhulichao.github.io/2021/01/06/https-public-path/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="技术平台"><a href="#技术平台" class="headerlink" title="技术平台"></a>技术平台</h2><p>借鉴 qiankun 的思路，如果项目中使用了 publicPath ，需要给 window 添加 <code>__INJECTED_PUBLIC_PATH_BY_EPIPE__</code> 全局变量，然后技术平台需要引用静态资源的地方都拼接上这个变量。</p>
<ul>
<li>入口文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Viewer</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> __PUBLIC_PATH__;</div><div class="line">  <span class="comment">// 入口方法</span></div><div class="line">  <span class="keyword">static</span> <span class="keyword">async</span> createDefaultViewer(id, callback = GisComponent.BaseMap.flyToChina) &#123;</div><div class="line">    <span class="keyword">this</span>.__PUBLIC_PATH__ =</div><div class="line">      <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ || <span class="string">''</span>;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>webpack 配置文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">'CESIUM_BASE_URL'</span>: <span class="string">'(window.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ || "") + "/static/cesium"'</span>,</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<h2 id="业务平台后台端"><a href="#业务平台后台端" class="headerlink" title="业务平台后台端"></a>业务平台后台端</h2><ul>
<li>添加 VUE_APP_BASE_API 环境变量，作为为静态的 publicPath</li>
<li>入口文件 main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加，判断一下有没有通过 iframe 引用后台端项目</span></div><div class="line"><span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_EPIPE__ = parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || process.env.VUE_APP_PUBLIC_PATH;</div><div class="line"><span class="keyword">if</span> (parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__) &#123;</div><div class="line">  <span class="comment">// eslint-disable-next-line</span></div><div class="line">  __webpack_public_path__ = parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ + <span class="string">'/'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>路由文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  base: process.env.VUE_APP_PUBLIC_PATH, <span class="comment">// 添加</span></div><div class="line">  scrollBehavior: () =&gt; (&#123; y: <span class="number">0</span> &#125;),</div><div class="line">  routes: constantRoutes,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>vue.config.js 配置文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">publicPath: process.env.VUE_APP_PUBLIC_PATH || <span class="string">'/'</span>,</div><div class="line">chainWebpack(config) &#123;</div><div class="line">  <span class="comment">// 重新定义环境变量</span></div><div class="line">  config.plugin(<span class="string">'define'</span>).tap(args =&gt; &#123;</div><div class="line">    args[<span class="number">0</span>][<span class="string">'process.env'</span>].VUE_APP_PUBLIC_PATH = <span class="string">'(parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || "'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'")'</span>;</div><div class="line">    args[<span class="number">0</span>][<span class="string">'process.env'</span>].VUE_APP_BASE_API = <span class="string">'(parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || "'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'") + "'</span> + process.env.VUE_APP_BASE_API + <span class="string">'"'</span>;</div><div class="line">    args[<span class="number">0</span>][<span class="string">'process.env'</span>].VUE_APP_MODEL_URL = <span class="string">'(parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || "'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'") + "'</span> + process.env.VUE_APP_MODEL_URL + <span class="string">'"'</span>;</div><div class="line">    args[<span class="number">0</span>][<span class="string">'process.env'</span>].VUE_APP_LAYER_URL = <span class="string">'(parent.__INJECTED_PUBLIC_PATH_BY_EPIPE__ || "'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'") + "'</span> + process.env.VUE_APP_LAYER_URL + <span class="string">'"'</span>;</div><div class="line">    <span class="keyword">return</span> args;</div><div class="line">  &#125;);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="业务平台用户端"><a href="#业务平台用户端" class="headerlink" title="业务平台用户端"></a>业务平台用户端</h2><ul>
<li>添加 VUE_APP_BASE_API 环境变量，作为为静态的 publicPath</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 生产环境配置</div><div class="line">ENV = 'production'</div><div class="line"></div><div class="line"># 若依管理系统/生产环境</div><div class="line">VUE_APP_PUBLIC_PATH = ''</div><div class="line"></div><div class="line">VUE_APP_BASE_API = '$&#123;VUE_APP_PUBLIC_PATH&#125;/prod-api'</div><div class="line"></div><div class="line">VUE_APP_MODEL_API = '$&#123;VUE_APP_PUBLIC_PATH&#125;/model/model/'</div><div class="line"></div><div class="line">VUE_APP_LAYER_URL = '$&#123;VUE_APP_PUBLIC_PATH&#125;/model/layer/'</div></pre></td></tr></table></figure>
<ul>
<li>入口文件 main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加</span></div><div class="line"><span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_EPIPE__ = process.env.VUE_APP_PUBLIC_PATH;</div></pre></td></tr></table></figure>
<ul>
<li>路由文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  base: process.env.VUE_APP_PUBLIC_PATH, <span class="comment">// 添加</span></div><div class="line">  scrollBehavior: () =&gt; (&#123; y: <span class="number">0</span> &#125;),</div><div class="line">  routes: constantRoutes,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>vue.config.js 配置文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">publicPath: process.env.VUE_APP_PUBLIC_PATH || <span class="string">'/'</span>,</div><div class="line">chainWebpack(config) &#123;</div><div class="line">  <span class="comment">// 拷贝静态资源</span></div><div class="line">  config.plugin(<span class="string">'copy'</span>).use(CopyWebpackPlugin, [</div><div class="line">    [</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">from</span>: <span class="string">'./static'</span>,</div><div class="line">        to: <span class="string">'static'</span>,</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">from</span>: <span class="string">'node_modules/epipe-vp-web-cms/static/cms'</span>,</div><div class="line">        to: <span class="string">'static/cms'</span>,</div><div class="line">        ignore: [<span class="string">'.*'</span>],</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">from</span>: <span class="string">'node_modules/epipe-vp-web-cms/static/images'</span>,</div><div class="line">        to: <span class="string">'static/images'</span>,</div><div class="line">        ignore: [<span class="string">'.*'</span>],</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">from</span>: <span class="string">'node_modules/epipe-vp-web-cms/index.html'</span>,</div><div class="line">        to: <span class="string">'static/cms'</span>,</div><div class="line">        ignore: [<span class="string">'.*'</span>],</div><div class="line">        transform (content, path) &#123;</div><div class="line">          <span class="keyword">let</span> str = content.toString();</div><div class="line">          <span class="comment">// 路径替换，添加 VUE_APP_PUBLIC_PATH 环境变量</span></div><div class="line">          str = str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/(\/static\/cms)/g</span>), process.env.VUE_APP_PUBLIC_PATH + <span class="string">'/static/cms'</span>);</div><div class="line">          <span class="keyword">return</span> str;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">  ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[qiankun 集成]]></title>
      <url>https://zhulichao.github.io/2020/12/04/qiankun-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><a href="https://qiankun.umijs.org/zh" target="_blank" rel="external">qiankun（乾坤）</a> 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</p>
</blockquote>
<p>开发环境下，集成 qiankun 比较简单，常规项目也没什么问题。但是我们的项目有些特殊性，主要原因是使用了已经打完包的技术平台，技术平台中有授权校验，又使用了 cesium 地图相关的功能。</p>
<p>生产环境部署还没测！！！</p>
<h2 id="特殊包-mapv-的引用报错"><a href="#特殊包-mapv-的引用报错" class="headerlink" title="特殊包 mapv 的引用报错"></a>特殊包 mapv 的引用报错</h2><p>业务平台，用户端使用了技术平台，后台端也使用了技术平台，火星科技引用的 mapv 包，在加载后会注册全局变量 window.L，内部对 L 有一些判断逻辑，进入用户端时 L 已经被注册了，再进入后台端，L 已经存在，导致 mapv 内部的判断逻辑会出错。解决方案如下，在进入后台端前卸载 L 变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">registerMicroApps(</div><div class="line">  [</div><div class="line">    &#123;</div><div class="line">      name: <span class="string">'vue'</span>,</div><div class="line">      entry: <span class="string">'//localhost:1024'</span>,</div><div class="line">      container: <span class="string">'#container'</span>,</div><div class="line">      activeRule: genActiveRule(<span class="string">'/cms'</span>),</div><div class="line">    &#125;,</div><div class="line">  ],</div><div class="line">  &#123;</div><div class="line">    beforeLoad: () =&gt; &#123;</div><div class="line">      <span class="built_in">window</span>.L = <span class="literal">undefined</span>;</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="请求静态资源报错"><a href="#请求静态资源报错" class="headerlink" title="请求静态资源报错"></a>请求静态资源报错</h2><p>src/assets 下的资源，或者通过 import 加载的 static 下的静态资源，都会经过打包编译，是没有问题的。但是直接引用 static 下的资源路径，就会找不到。解决办法是在这些直接引用的静态资源前面添加 <code>window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__</code> 变量。</p>
<h2 id="cesium-CESIUM-BASE-URL-变量"><a href="#cesium-CESIUM-BASE-URL-变量" class="headerlink" title="cesium CESIUM_BASE_URL 变量"></a>cesium CESIUM_BASE_URL 变量</h2><p>因为 cesium 是被技术平台引用的，经过打包后被业务平台引用的，cesium 的 CESIUM_BASE_URL 变量的定义是在技术平台中定义的，也需要定义成动态的值才能在经过 qiankun 引用时找到。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'CESIUM_BASE_URL'</span>: <span class="string">'window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ + "/static/cesium"'</span>,</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[business-platform]]></title>
      <url>https://zhulichao.github.io/2020/11/23/business-platform/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>epipe-vp-web 用户端项目，epipe-vp-web-cms 后台项目。这两个项目独立开发，epipe-vp-web-cms 打包后，发布到 npm 上。epipe-vp-web 通过 npm install 安装后台项目，通过 iframe 引用后台项目，iframe 无法直接引用 node_modules 下的资源，可以通过 webpack 配置，将打包后的静态文件拷贝到当前项目中，iframe 就能引到了。</p>
<h2 id="Vuex-结构"><a href="#Vuex-结构" class="headerlink" title="Vuex 结构"></a>Vuex 结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    user, <span class="comment">// 登录相关、用户信息</span></div><div class="line">    permission, <span class="comment">// 根据路由生成菜单信息</span></div><div class="line">    userConfig, <span class="comment">// 用户设置，主题、布局等</span></div><div class="line">    checkedLayer, <span class="comment">// 图层树中已勾选的图层</span></div><div class="line">    checkedProject, <span class="comment">// 项目过滤中已勾选的项目</span></div><div class="line">    companyInfo, <span class="comment">// 公司信息</span></div><div class="line">    createdModal, <span class="comment">// 已经初始化的 Modal 弹框，可全局控制关闭</span></div><div class="line">    currentPage, <span class="comment">// 当前页面</span></div><div class="line">  &#125;,</div><div class="line">  getters,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="巧用-css"><a href="#巧用-css" class="headerlink" title="巧用 css"></a>巧用 css</h2><p>select 用图片回填，可以用 css 绝对定位将要显示的元素，也就是图片，放在 select 输入框元素的上面，设置 <code>pointer-event: none;</code> 将鼠标事件穿透，来正常触发 select 点击事件。</p>
<p>底图切换按钮，将 cesium 底图切换按钮用绝对定位放在自定义底图按钮下层，将图片透明度设置为 0，自定义的底图按钮设置 <code>pointer-event: none;</code> 将鼠标事件穿透，来触发 cesium 底图切换按钮。这时功能是没问题的，但是因为将自定义底图按钮的鼠标事件穿透了，也无法触发 hover 和 active 样式，效果不好。处理方式是将自定义底图按钮通过 <code>visibility: hidden;</code> 隐藏起来，cesium 底图按钮除了图片透明度为 0，还需要用 <code>:after</code> 设置按钮中的文字，背景色设置成按钮一样可切换主色，就实现了自定义底图按钮的效果。</p>
<h2 id="iView-按需引用"><a href="#iView-按需引用" class="headerlink" title="iView 按需引用"></a>iView 按需引用</h2><p>项目里，除了主要使用的组件库，如 element-ui，其它使用的组件库，尽量使用按需引用，减少打包后的体积。</p>
<h2 id="Modal-组件"><a href="#Modal-组件" class="headerlink" title="Modal 组件"></a>Modal 组件</h2><p>基于 el-dialog 组件进行封装，在 mounted 中根据传入的 left、right 等值，设置 Modal 的位置，<code>this.$refs.mapModal.$refs.dialog.style.setProperty(&#39;top&#39;, this.top);</code> ，在 watch 中监听 left、right 等参数的变化修改位置。使用 setProperty 是因为这种方式可以设置样式的 <code>!important</code>。</p>
<p>在全局状态管理中管理 Modal，在 created 的时候将 Modal 的名字和关闭的回调函数添加到 vuex 中，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">created() &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.addCloseToStore) &#123;</div><div class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'AddCreatedModal'</span>, &#123;</div><div class="line">      name: <span class="keyword">this</span>.name,</div><div class="line">      handleModalClose: <span class="keyword">this</span>.handleModalClose,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>在 vuex 中有关闭所有 Modal、关闭指定的多个 Modal、关闭除指定外的所有 Modal 的事件。</p>
<h2 id="Modal-避让"><a href="#Modal-避让" class="headerlink" title="Modal 避让"></a>Modal 避让</h2><p>在要打开多个 Modal 的组件中，定义一个记录当前打开 Modal 的数组，每次打开一个 Modal 时调用 handleModalShow 方法将要打开的 Modal 的名字和宽度放入数组中，并调用 reCalculateLeft() 方法计算 left 值，该值时传入 Modal 组件的参数。每次关闭 Modal 时将数组中的对应元素去掉，并调用所有 Modal 对应的 reCalculateLeft() 方法重新计算位置，页面中添加动画。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">handleModalShow(refName) &#123;</div><div class="line">  <span class="keyword">let</span> position = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">this</span>.openedModal.forEach((item, index) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (item.name === <span class="keyword">this</span>.$refs[refName].name) &#123;</div><div class="line">      position = index;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.openedModal.push(&#123;</div><div class="line">      name: <span class="keyword">this</span>.$refs[refName].name,</div><div class="line">      width: <span class="keyword">this</span>.$refs[refName].width,</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.$refs[refName].handleShow();</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">handleModalClose(name) &#123;</div><div class="line">  <span class="keyword">let</span> position = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">this</span>.openedModal.forEach((item, index) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (item.name === name) &#123;</div><div class="line">      position = index;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span> (position &gt; <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.openedModal.splice(position, <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.$refs.pbsTreeModal &amp;&amp; <span class="keyword">this</span>.$refs.pbsTreeModal.reCalculateLeft();</div><div class="line">  <span class="keyword">this</span>.$refs.pbsIntroductionModal &amp;&amp; <span class="keyword">this</span>.$refs.pbsIntroductionModal.reCalculateLeft();</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="添加新模块"><a href="#添加新模块" class="headerlink" title="添加新模块"></a>添加新模块</h2><ul>
<li><p>/src/views/map/components 中添加新模块，如文件名为 XXX，有 handleOpen 方法入口</p>
</li>
<li><p>/src/views/map/header/Content/index.vue 中添加新组件 XXX 的引用</p>
</li>
<li><p>菜单管理中，需要有一个名为“用户端菜单”的菜单，它下面添加的菜单会显示在用户端Header中</p>
</li>
<li><p>菜单管理中，添加新菜单，路由地址中填入 XXX，与文件名或文件夹名保持一致</p>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[technology-platform]]></title>
      <url>https://zhulichao.github.io/2020/11/23/technology-platform/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="结构简介"><a href="#结构简介" class="headerlink" title="结构简介"></a>结构简介</h2><p>技术平台 epipe-visual-engine 项目，其实是三个项目，一个是 EVECesium 项目，一个是 EVEThree 项目，一个是网站项目。我们是通过一套代码，或者说是一个代码仓库，来维护的这三个项目，通过配置 webpack，打包后也是生成三个包。</p>
<img src="/2020/11/23/technology-platform/folder.jpg" width="400" title="目录结构">
<ul>
<li>/app 下是网站代码</li>
<li>/EVECesium 是 cesium API 代码</li>
<li>/EVEThree 是 three.js API 代码</li>
<li>/build/app 是打包网站的配置</li>
<li>/build/EVECesium 是打包 cesium API 的配置</li>
<li>/build/EVEThree 是打包 three.js API 的配置</li>
<li>/dist_app 是网站打包后的文件</li>
<li>/dist_EVECesium 是 cesium API 打包后的文件，可发布到 npm 安装使用</li>
<li>/dist_EVEThree 是 three.js API 打包后的文件，可发布到 npm 安装使用</li>
<li>/static/app 是网站中使用的静态资源</li>
<li>/static/doc 是使用 jsdoc 生成的静态文件，里面分别有 EVECesium、EVEThree 目录</li>
<li>/static/EVECesium 是 cesium API 使用的静态资源，如地图上的图片</li>
<li>/static/EVEThree 是 three.js API 使用的静态资源，如模型上的图片</li>
<li>/jsdoc 下是使用 jsdoc 根据注释生成的静态文件的自定义配置</li>
<li>/build/generateLicense.js 文件是生成秘钥的脚本，被 <code>npm run generateLicense</code> 命令引用</li>
</ul>
<h2 id="授权简介"><a href="#授权简介" class="headerlink" title="授权简介"></a>授权简介</h2><img src="/2020/11/23/technology-platform/authorization.jpg" title="授权逻辑">
<h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><p><code>npm run generateLicense</code> 将 /static/license 明文文件加密后生成 /license 文件，拷贝到需要的项目即可。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"modules"</span>: [</div><div class="line">    <span class="string">"EVECesium"</span>,</div><div class="line">    <span class="string">"EVEThree"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"type"</span>: <span class="string">"permanent"</span>,</div><div class="line">  <span class="attr">"domains"</span>: [</div><div class="line">    <span class="string">"localhost"</span>,</div><div class="line">    <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"192.168.70.119"</span>,</div><div class="line">    <span class="string">"192.168.70.69"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"created"</span>: <span class="string">"2020-08-11"</span>,</div><div class="line">  <span class="attr">"expired"</span>: <span class="string">"60"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>modules 表示授权的包，可为多个</li>
<li>本项目或业务平台引用指定 type 为 permanent，添加 domains 为本地域名</li>
<li>生产环境指定 type 为 production，添加 domains 为域名或IP加端口</li>
<li>开发环境指定 type 为 development，添加 created 创建时间、expired 过期天数</li>
</ul>
<h3 id="解密逻辑、输出版权信息"><a href="#解密逻辑、输出版权信息" class="headerlink" title="解密逻辑、输出版权信息"></a>解密逻辑、输出版权信息</h3><p>EVECesium 或 EVEThree 中读入 static/license 文件，校验逻辑放在 static/EVECesium/validate 中，输出版权信息放在 static/EVECesium/info 中。解密逻辑和输出版权信息，在 epipe-visual-engine 项目中看到的，是明文的文件，但是在打包后生成的是加密后的文件。上面三个文件读入后，都需要执行解密逻辑，然后通过 eval 执行 validate 校验和输入版权信息。</p>
<p>再说 static/license 正常应该是加密后的授权文件，在技术平台自身的项目 epipe-visual-engine 中，为了维护方便，static/license 是明文文件，就像 validate 和 info 文件一样，通过 webpack 插件 copy-webpack-plugin 打包后生成加密后的文件。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Lottie 加载动画]]></title>
      <url>https://zhulichao.github.io/2020/11/10/lottie-web/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基于 lottie ，将 After Effects 导出的 json 文件渲染成 svg/canvas/html 动画效果。我使用的是 <a href="https://github.com/airbnb/lottie-web" target="_blank" rel="external">lottie-web</a>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install lottie-web --save</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;lottie_box&quot; class=&quot;login-form-container&quot; /&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import lottie from &apos;lottie-web&apos;;</div><div class="line">import * as animationData from &apos;@/assets/image/login-data.json&apos;;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  mounted() &#123;</div><div class="line">    lottie.loadAnimation(&#123;</div><div class="line">      container: document.getElementById(&apos;lottie_box&apos;),</div><div class="line">      renderer: &apos;svg&apos;,</div><div class="line">      loop: true,</div><div class="line">      autoplay: true,</div><div class="line">      animationData: animationData.default,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-border-overlap]]></title>
      <url>https://zhulichao.github.io/2020/11/06/css-border-overlap/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="css-处理边框叠加"><a href="#css-处理边框叠加" class="headerlink" title="css 处理边框叠加"></a>css 处理边框叠加</h2><p>如图所示，想要做一个按钮组的功能，有 hover 效果。</p>
<img src="/2020/11/06/css-border-overlap/buttons.jpg" title="按钮组">
<p>如果做一个 ul 列表，然后给每个 li 加上边框，相邻列表的边框就会变成 2px，解决方法是给 li 在样式中指定 <code>margin-right: -1px;</code> 这样两个边框就可以重叠在一起了。</p>
<p>但是在这个 li 加了 hover 后，鼠标悬停让边框变色，每个变色的只会是上下左三条框，右边框被盖住，看不出效果了，解决方法是给 li 在 hover 时提高层级，就达到了想要的效果。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#FF0000</span>;</div><div class="line">   <span class="attribute">margin-right</span>: -<span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0000FF</span>;</div><div class="line">   <span class="attribute">position</span>: relative;</div><div class="line">   <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="css-让点击穿透"><a href="#css-让点击穿透" class="headerlink" title="css 让点击穿透"></a>css 让点击穿透</h2><p>pointer-event: none; // 点击穿透<br>pointer-event: auto; // 恢复点击</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自文档化代码]]></title>
      <url>https://zhulichao.github.io/2020/10/10/self-documenting-code/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自文档化代码（Self-Documenting-Code）"><a href="#自文档化代码（Self-Documenting-Code）" class="headerlink" title="自文档化代码（Self Documenting Code）"></a>自文档化代码（Self Documenting Code）</h2><ul>
<li>不需要额外的编写、维护文档或注释的工作</li>
<li>文档或注释要随着代码更新，维护版本，多了不好管理</li>
<li>文档或注释会增加人们的阅读量</li>
<li>不要编写需要外部文档支持的代码</li>
<li>唯一能完整并正确地描述代码的文档就是代码本身</li>
</ul>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><ul>
<li>变量、函数名语义化</li>
<li>避免过多地嵌套语句</li>
<li>要谨慎地优化代码，防止它不再清晰地表达基础的算法</li>
<li>结构化，分解为原子函数</li>
<li>把条件表达式换成函数或变量</li>
<li>选择有描述型的类型</li>
<li>命名常量</li>
<li>提供必要的、有意义的注释，如复杂逻辑</li>
<li>恰当的处理错误</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[《面向对象的思考过程》笔记]]></title>
      <url>https://zhulichao.github.io/2020/09/27/object-oriented/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>面向对象的思考过程是一个非常优秀的设计理念。它可以独立于语言存在。如果你熟练掌握了面向对象的思考过程，那么就可以轻松地在不同的面向对象的语言之间切换。</p>
</blockquote>
<p>既然函数式编程这么好，为什么这几年的发展只能算是波澜不惊，没有掀起大风浪呢？</p>
<ul>
<li>首先面向对象的思考过程更加符合大家对世界的直观感受，毕竟不是每个人都是数学家</li>
<li>其次是面向对象的编程范式和函数式编程的范式并不是完全对立的，一些语言既有函数式的特点，也有面向对象的特点</li>
</ul>
<p>历史上定义面向对象的语言拥有：<strong>封装（encapsulation）、继承（inheritance）、多态（polymorphism）</strong>的特点，我也会加入组合的特点。</p>
<p><strong>开发人员面临的问题一直就是如何将新的面向对象技术与现有的系统集成起来。</strong></p>
<p>包装对象是指在面向对象的类中包含其他代码。例如，可以将结构化代码包装到一个对象内部，使其行为就像对象一样。</p>
<p><strong>究竟什么是对象？一个对象由两部分组成：属性及行为，对象的基本定义是一个包含了数据和行为的实体。</strong></p>
<p>在面向对象的设计中，属性及行为包含在单个对象中，而在过程式或结构式设计中，属性和行为通常是分开的。</p>
<p>结构化编程中数据往往与程序分离，而且数据是全局的，所以在你的代码作用域之外依然可以很容易修改数据。</p>
<p>如果设计是恰当的，那么在面向对象模型中则不会有诸如全局数据的元素。事实上，在面向对象系统中具有很高的数据完整性。</p>
<p>对象包含整型和字符串之类的实体，用于表示属性，对象也包含方法，用于表示行为。在对象中，方法用于操作数据及其他行为。更重要的是，你可以控制对对象中成员（包括属性及方法）的访问。</p>
<p>在面向对象的术语中，数据表现为属性，行为表现为方法。限制访问具体属性和（或）方法的行为叫做数据隐藏。将属性及方法合并到同一个实体中，在面向对象中将这种方式叫做封装。</p>
<p>对象不应当操作其它对象的内部数据。</p>
<p>使用面向对象技术的程序本质上是对象的集合。</p>
<p>存放在对象中的数据代表了该对象的状态。在面向对象数据中，数据被称为属性。</p>
<p>对象的行为表示对象可以做什么。在面向对象程序设计术语中，这些行为包含在方法中，你可以通过发送消息的方式来调用方法。</p>
<p>使用对象最强大、最有趣的一点在于，数据与行为是一个整体，而不是与行为代码割裂。</p>
<p>XML 的出现并不全为了以可移植的方式表示数据。它也有一种替代方式起来让代码轻松访问数据。</p>
<p><strong>取值方法和赋值方法的理念就是数据隐藏。</strong></p>
<p>每个类图有三部分组成：类名、数据（属性）、行为（方法）。</p>
<p>请注意没必要为每个对象的每个方法都实现一个物理副本。其实，每个对象指向了同一个实现。</p>
<p>类是对象的蓝图。当你实例化一个对象时，你基于类来构建这个对象。</p>
<p>类可以认为是对象的模板或者模具。</p>
<p>类的数据通过属性来表示。每个类必须定义属性，用来存放该类实例化的每个对象的状态。</p>
<p>在任何情况下，对对象中属性的访问应该由该对象自身控制，任何一个对象都不应该直接修改其它对象的属性。</p>
<p>消息是对象之间的通信机制。例如，当对象A调用了对象B的一个方法，对象A向对象B发送了一个消息。对象B的响应由其返回值定义。</p>
<p>对象仅暴露必要的接口来和其它对象进行交互。除了如何使用该对象，其它细节都应当对其它对象隐藏起来。</p>
<p>数据隐藏是封装的主要部分。</p>
<p>为了实现数据隐藏，必须将所有属性声明为 private。属性绝不是接口的一部分。只有 public 方法是类接口的一部分。</p>
<p>请注意类有接口，方法也有接口。</p>
<p>注意在该类图中，加号（+）表示 public 访问修饰符，而减号（-）表示 private 访问修饰符。</p>
<p>面向对象程序设计的最强大的功能之一就是代码重用。</p>
<p>一个类只能有一个父类称为单继承，一个类可以有多个父类称为多重继承。</p>
<p>多态是一个希腊词，字面上理解为许多形状。在继承体系图中，所有的子类从它们的超类中继承接口。然而，由于每个子类是单独的实体，每个子类需要对同一个消息有单独的应答。</p>
<p>重载（overriding）的基本释义是子类覆盖父类中的一个实现。总之，每个类能够对同一个Draw方法返回不同的响应来绘制自己。这正是多态的意义。</p>
<p>如果方法被定义为abstract，子类必须提供该方法的实现。</p>
<p>如果方法名与类名相同，并且没有返回值，这个方法就是一个特殊的方法，称为构造函数。可以认为构造函数是类的入口，对象在这里被构造。构造函数里可以进行初始化操作和执行一些启动任务。</p>
<p>如果子类继承了父类的一个抽象方法，它必须提供该方法的具体实现，否则它自身也必须是个抽象类。</p>
<p>使用其他对象来构建或结合成新的对象，这种方式就是组合。</p>
<p>我想说只有两种方式来使用其他类构建新类，这两种方式就是继承和组合。我们最好用has-a术语来描述组合关系。</p>
<p>在设计一个系统甚至一个类之前，先思考问题本身。</p>
<p><strong>培养面向对象的思考过程的良好习惯需要注意三个方面：</strong></p>
<ul>
<li>清楚接口和实现之间的区别。</li>
<li>深入理解抽象。</li>
<li>给用户提供尽可能少的接口。</li>
</ul>
<p>当设计类时，应该向用户暴露什么、隐藏什么是非常重要的。</p>
<p>接口与类直接相关。终端用户通常看不到任何类，只会看到GUI或者命令行。程序员会接触类接口。</p>
<p>正确地设计类时要注意两部分，即接口和实现。</p>
<p>作为一个通用的规则，一个类的接口应该只包含需要用户知道的东西。</p>
<p>当设计类时最重要的考虑就是识别类的读者（或用户）。</p>
<p>实现细节对于用户是隐藏的。我们必须时刻牢记关于实现的一个目标，那就是修改实现不需要变动用户代码。</p>
<p>接口包含了调用方法及返回值的语法。</p>
<p>如果一个方法是公共方法，那么程序员就可以访问它，因此可以认为它是类的接口。</p>
<p>只提供给用户绝对需要的东西。这以为着接口要尽可能少。最好只有用户真正需要时才添加接口，不要提供超出用户需求的接口。</p>
<p>公共接口定义了用户可以访问什么。</p>
<p>从用户角度定义类至关重要，而不是从信息系统的角度定义类。</p>
<p>确保设计类时你向真正的用户了解了需求和设计。</p>
<p>我们已经确定用户是实际使用这个系统的人。那么，谁是用户？</p>
<p>需要从每个用户的视角来开始识别每个对象的目的以及需要做的事情。</p>
<p>环境限制往往都是影响因子。</p>
<p>刚开始，你只需要考虑如何使用这个对象，不用考虑如何构建这个对象。</p>
<p>很多面向对象的文章推荐每个接口模型只包含一个行为。这带给我们的问题是我们的设计究竟要抽象到哪种层次。</p>
<p>从技术角度来讲，任何非公共接口可以视为实现。这意味着用户不会看到具体的实现方法。</p>
<p>类可能有一些私有方法仅供内部使用。任何私有方法都可以视为实现的一部分，用户绝不会看到它，从而也不能访问它。</p>
<p>公共方法中的代码是实现的一部分，因为用户不能看到它。</p>
<p>理论上来说，任何对实现的修改都不应该影响用户通过接口与类的交互方式。</p>
<p>构造函数名称与类名相同。构造函数没有返回值。如果有返回值，编译器就不认为该方法是构造函数。</p>
<p>new关键字创建了Cabbie类的一个新实例，这会按需分配内存。然后会调用构造函数自身，并且可以通过参数列表传递参数。开发人员可以在构造函数内进行相应的初始化工作。</p>
<p>构造函数最重要的功能大概是当遇到new关键字时初始化内存分配。总之，构造函数中的代码会把新创建的对象初始化到稳定、安全的状态。</p>
<p>初始化属性是构造函数经常执行的功能。</p>
<p>如果没有为类提供一个显示的构造函数，那么类会有一个默认构造函数。请记住，无论你是否自定义了构造函数，类始终至少有一个构造函数。如果你没有提供构造函数，系统会为你提供一个默认的构造函数。</p>
<p>除了创建对象本身之外，默认构造函数的另一个行为是调用父类的构造函数。</p>
<p>在类中始终包含至少一个构造函数式一个优秀的实践。如果类有属性，最好始终在构造函数中初始化这些属性。延伸开来，无论是否在编写面向对象的代码，初始化变量总是一个优秀的实践。</p>
<p>通用规则是即使并不需要在构造函数中做任何事情，也应当始终提供一个构造函数。你可以提供一个不包含任何代码的构造函数，稍后再按需添加代码。尽管使用编译器默认提供的构造函数在技术上没有任何问题，但基于文档化和维护目的，这样更容易看懂你的代码。</p>
<p>如果你使用的是默认的构造函数，后续操作添加了另一个构造函数，那么系统不会再创建默认的构造函数。总之，只有类中没有包含任何构造函数时，系统才会添加默认的构造函数。一旦你提供了一个构造函数，系统就不再提供默认的构造函数。</p>
<p>重载可以让程序员重复使用相同的方法名，只要每次方法签名不同即可。方法签名包含了方法名以及参数列表。</p>
<p>当使用继承时，你必须知道如何构造父类。请记住，当使用继承时，也继承了父类的所有东西。因此必须熟悉父类的数据和行为。任何继承的属性都是完全可见的。然而，对构造函数的继承则是不可见的。</p>
<p>如果遇到new关键字，那么会分配对象，并发生以下步骤：</p>
<ul>
<li><p>在构造函数中会调用父类的构造函数。如果没有显示调用父类的构造函数，那么系统会默认自动调用。</p>
</li>
<li><p>对象中的所有属性会被初始化。</p>
</li>
<li><p>执行构造函数中的其余代码。</p>
</li>
</ul>
<p>不要依赖编译器来初始化属性。</p>
<p>构造函数用来确保应用程序处于稳定的状态。</p>
<p>优秀的实践应该是为所有属性识别一个稳定的状态，然后在构造函数中初始化这些属性为稳定的状态。</p>
<p>程序中有三种基本的解决方案来处理发现的问题：修复问题、通过压制来忽略问题，或以合适的方式退出运行时。</p>
<ul>
<li>忽略该问题。这不是好主意！</li>
<li>检查潜在的问题，当发现问题时中止程序。</li>
<li>检查潜在的问题，捕获错误并试图修复该问题。</li>
<li>抛出异常（通常这是处理异常的最佳方式）。</li>
</ul>
<p>不应该忽略任何已知的问题。可以让系统收拾残局并进入稍微稳定的状态，比如关闭文件和强制系统重启。</p>
<p>检查潜在问题，捕获错误，并试图恢复的方案远胜于简单地检查问题并中止程序的方案。</p>
<p>并不总能在错误第一次发生的地方就能探测到该错误。</p>
<p>这里的关键概念是用特定的代码块用来处理特定的异常。这既解决了尝试找出错误发生的地方的问题，也解决了在正确的地方处理该错误的问题。</p>
<p>在 Java 中，try 代码块中抛出了异常，catch 代码块会处理该异常。</p>
<ul>
<li>try 代码块会结束执行</li>
<li>catch 从句会检查对应的 catch 代码块能否处理这种异常。（一个 try 代码块可能会对应多个 catch 从句）</li>
<li>如果所有 catch 代码块都不能处理抛出的异常，那么该异常会传递给最近的更高一层的 try 代码块中（如果代码中没有捕获该异常，系统最终会捕获它，结果是无法预料的，可能导致应用程序崩溃）。</li>
<li>如果有一个 catch 从句匹配上了（遇到了第一个匹配的从句），会执行 catch 从句中的代码。</li>
<li>程序会从紧挨着 try 代码块的下面的代码处恢复执行。</li>
</ul>
<p>每个类可以实例化出多个对象。每个对象有唯一的标识和状态。这点很关键。会给每个单独构造的对象分配独立的内存。然而，一个类实例化的多个对象可以共享类中一些属性和方法，从而共享为这些属性和方法分配的内存。</p>
<p>构造函数是一个被类的所有实例共享的方法，这是共享方法的一个好例子。</p>
<p>对象有三种属性：</p>
<ul>
<li>局部属性，由特定的方法拥有</li>
<li>对象属性</li>
<li>类属性</li>
</ul>
<p>属性（和方法）存在于特定的作用域中。</p>
<p>关键字 this 是对当前对象的一个引用。</p>
<p>static 类型的变量，从该类中实例化的所有对象只会为该属性分配一块单独的内存。每个类只有一个副本，该类的所有对象共享该副本。</p>
<p>操作符重载允许你修改一个操作符的含义。</p>
<p>近代面向对象的语言（不如Java、.NET 和 Objective-C）不允许重载操作符。</p>
<p>与操作符重载一样，Java、.NET 和 Objective-C 的设计者认为多重继承带来的系统的复杂度超过了带来的好处，因此从语言层面消除了多重继承。Java、.NET 和 Objective-C 语言提供的接口构造能力在某些方面能弥补这一点。但 Java、.NET 和 Objective-C 不允许传统的多重继承。</p>
<p>接口是行为继承的一种机制，抽象类则用于实现继承。编程语言中的接口类型提供不同行为的接口，但不提供实现，而抽象类既提供接口，也能提供实现。</p>
<p><strong>复杂的数据结构和对象的问题在于它们可能会包含引用。简单对引用的复制不能复制它引用的数据结构或对象。同样，当比较对象时，简单地比较两个指针只是比较了引用，而并未比较指针所指的对象。</strong></p>
<p><strong>追踪所有的引用，并对所有引用对象都创建拷贝，这种方式称为深拷贝。浅拷贝只会简单地拷贝引用，而不会深入层级。</strong></p>
<p>当设计类时，你应当在类中提供一个比较功能，从而保证类的行为是预期的。</p>
<p>最明显的原因是类名用来识别类本身。除了简单的识别作用之外，类名必须是描述性的。选择一个合适的名称相当重要，因为类名提供了这个类的用途以及在大系统中的交互方式等信息。</p>
<p>把属性设置为不存在的值是非常有用的编程技术。检查变量是否为 null 可以识别该值是否正确初始化。检查属性是否为 null 也是一个优秀的编程实践。</p>
<p>构造函数都定义为 public，这是因为构造函数很显然是类接口的成员。如果构造函数是私有的，其它对象就不能访问它们，从而无法实例化对象。</p>
<p>最重要的原因是保证数据完整性以及高效调试。</p>
<p>赋值方法可以在某种程度确保数据的完整性。这也可以解决安全问题。因此通过取值方法和赋值方法来访问数据可以提供一种机制用于密码检查或其它验证技术。这极大地增加了数据的完整性。</p>
<p>如果属性是静态的，而且类为该属性提供了一个赋值方法，其它对象调用该赋值方法只会修改同一个副本。</p>
<p>构造函数和访问器都被定义为公共的，并且属于公共接口的一部分。对外暴露它们是因为它们是使用该类的重要方式。</p>
<p>我最喜爱的有关类设计指导及建议的其中一本书是《Effective C++:50 Specific Ways to Improve Your Programs and Designs》。</p>
<p>在设计类时最重要的问题是保持公共接口最小化。提供最小化的公共接口可以保证类尽可能地简单。</p>
<p>隐藏实现的原因已经阐述得非常详细了。改变类的实现不应该影响到用户，这才是设计良好的类。</p>
<p>但我认为把所有终端用户当做实际客户是相当重要的，而且你必须满足他们的要求。</p>
<p>Gilbert 和 McCarty 指出封装的最高指导原则是”所有字段都应该是私有的“。在这种方式下，其他对象无法直接访问类中的任何字段。</p>
<p>当设计类时，最重要的设计问题之一是如何构造类。首先并且最重要的一点是，构造函数应该把对象设置为安全的初始状态。</p>
<p>在包含构造函数的语言中，析构函数包括了正确的清除功能，这也很重要。</p>
<p>通用规则是应用程序应当绝不崩溃。当系统遭遇错误时，应当自身修复错误并继续执行，或者在不丢失用户的任何重要数据情况下友好地退出。</p>
<p>没有优秀的文档实践是不可能驱动出优秀的设计的。优秀的设计的最重要的方面之一是，设计类时应该小心地记录过程。</p>
<p>几乎没有完全隔离的类，几乎没有任何原因来构建一个不需要与其他类交互的类。</p>
<p>确定哪些属性和方法可声明为静态的相当重要。这些属性和方法会被类的所有对象共享。</p>
<p>为类、属性和方法遵循命名约定也是同一目的。有很多命名约定，你选择哪种约定并不重要，重要的是选择一个并始终遵守。当选择了一种约定后，确保当你新建类、属性和方法时，你不仅遵循了约定，而且名称具有含义。确保这些约定是有意义的，每个相关的人都能理解背后的意图。</p>
<p>保持命名具有描述性是优秀的开发实践，无论哪种开发范式中的都要执行这项实践。</p>
<p>最小化全局数据是优秀的编程风格，这并不特定于面向对象编程。全局数据在结构化开发中是允许的，但它们是危险的。</p>
<p>swap() 方法的作用域内需要 temp 属性。没有理由将 temp 属性放置到类级别。因此，你应该把 temp 的作用域移动到 swap() 方法的作用域中。</p>
<p>高度依赖其他类的行为被称为高度耦合。即如果修改一个类会强迫修改另一个类，那么这两个类则可以说是高度耦合的。</p>
<p>在大多数设计和编程过程中，一般都推荐使用迭代过程。基本上，这意味着不要一次性写完所有代码！用小步增长的方式来编写代码，每步都进行构建和测试。</p>
<p>测试人员更喜欢用迭代过程，因为他们可以在早期就参与进来。</p>
<p>接口的最小实现通常称为桩（stub）。</p>
<p>当使用完桩后，不要删除它。保留桩以便后续使用。确保用户不能看到它们。</p>
<p>系统可以被定义为相互交互的类。</p>
<p>创建优秀的设计最重要的因素是找到一个你和你的组织都感到舒服的方式并且坚持使用它。实现一个没人愿意遵循的设计没有任何意义。</p>
<p>通常一个稳固的面向对象的设计过程包含以下步骤：</p>
<ul>
<li>进行正确的分析</li>
<li>编写工作陈述文档来描述该系统</li>
<li>通过规格说明收集需求</li>
<li>开发用户接口的原型</li>
<li>识别类</li>
<li>确定每个类的职责</li>
<li>确定类与类之间如何交互</li>
<li>创建一个高层次的模型来描述系统的构建</li>
</ul>
<p>彻底测试软件确保绝对没有任何缺陷存在是不可能的。</p>
<p>在分析阶段，如果没有有效的理由来做该项目，那么可以毫不犹豫地中止该项目。</p>
<p>工作陈述（SOW)是描述系统的文档。</p>
<p>Visual Basic.NET 是一个创建原型的非常棒的环境。</p>
<p>我认为作为一名优秀的程序员意味着理解基本的编程逻辑，并且对写代码充满激情。</p>
<p>将一个现有的类包装到一个新类中，以便修改它的实现或接口。</p>
<p>最困难及最有趣的设计决策就是决定使用继承还是组合。</p>
<p>正确做法是应该始终测试新代码。每个新的继承关系使用继承而来的方法时会创建新的上下文。完整的测试策略是基于这些上下文做测试。</p>
<p>该概念有时被称为通用到特例，这是使用继承时的又一个重要的考虑因素。</p>
<p>在大型系统中，尽可能保持简单往往是最佳实践。过于精确的模型无法维持较低的复杂度。决定在设计时引入更小的复杂度或者更多的功能是一项平衡艺术。</p>
<p>当前还有未来的开销因素也是决策的主要因素。</p>
<p>对象组合的经典例子是汽车。</p>
<p>本书中，UML 中的聚合以带线的菱形表示，比如引擎是汽车的一部分。联合则只有一根线（没有菱形）表示。</p>
<p>封装是面向对象的本质，所以它是面向对象设计的基本原则之一。继承也是三个主要的面向对象概念之一。然而，继承在某种方式上实际上破坏了封装！</p>
<p>继承意味着对其他类的强封装，但是弱化了父类和其子类之间的封装。</p>
<p>多态是对继承的最优雅的使用之一。实体类自身负责实现功能。</p>
<p>子类不能从协议继承任何代码。因此协议用法与抽象类不是完全相同的，所以设计对象模型时要考虑这一点。</p>
<p>接口、协议和抽象类是代码重用的重要机制，提供了所谓契约这一功能。</p>
<p>面向对象的拥护者鼓吹面向对象的主要优势就是一次编写，多次重用。</p>
<p>创建可重用的代码的方式之一是使用框架。</p>
<p>框架可以实现插拔机制和重用准则。它也能让开发者最大化地重用代码，而且可以重用界面设计。</p>
<p>编写类或类库的人应该提供文档来介绍如何使用这些类和类库（至少我们希望他这样做）。通常这些文档代表了应用程序编程接口（API）。</p>
<p>我们定义契约为要求开发人员遵循API规格要求的一种机制。</p>
<p>如果不强制遵守，一些淘气的程序员会决定重新发明轮子来自己实现代码，而不会使用框架提供的规格说明。</p>
<p>实现契约的方式之一是使用抽象类。抽象类包含一个或多个没有提供任何实现的方法。</p>
<p>假设我们想创建一个应用程序来绘制形状。我们的目标是绘制产品设计中包含的所有类型的形状，以后还可以添加新的形状。那么必须遵循两个条件。</p>
<ul>
<li>首先所有形状必须使用相同的语法来绘制自生</li>
<li>其次请记住每个类必须要响应自身的行为</li>
</ul>
<p>向对象发送消息，不同的对象会得到不同的响应，这是多态的本质。</p>
<p>如果我们想让 Shape 类包含所有可能的（当前的以及以后加入的）形状代码，那么需要一些条件语句（比如 Case 语句）。这会非常杂乱，而且难以维护。</p>
<p>如果 Circle 继承自 Shape 但没有提供 draw() 方法，对 Circle 类的编译会失败。这是因为 Circle 没有满足 Shape 的契约。</p>
<p>如果 Circle 没有实现 draw() 方法，那么可以认为它自身是抽象的。那么另一个子类必须继承自 Circle 并且实现 draw() 方法。该子类则成为 Shape 和 Circle 类的实体实现。</p>
<p>请记住对抽象类的定义是它包含一个或多个抽象方法，这暗示了抽象类也可以提供实体方法。</p>
<p>这些抽象方法就是契约。</p>
<p>契约不适合用于组合情况（或者 has-a 关系）。</p>
<p>第一，当涉及用户交互的可视化接口（比如显示器）时，会广泛使用图形化用户接口（GUI）。</p>
<p>第二，类的接口基本上是指其方法签名。</p>
<p>第三，在 Objective-C 语言中，接口和实现会将代码在物理上分割为不同的模块。</p>
<p>第四，Java 中的接口和 Objective-C 的协议本质上是父类和子类之间的契约。</p>
<p>使用多个抽象类构成了多重继承。如果设计上是合理的，理论上你可以为任何类添加接口。而抽象类要求你继承自该抽象类，并且延伸至其自身所有可能的父类。</p>
<p>基于这些考虑，接口往往作为缺少多重继承情况下的一种替代方案。但接口并不是替代或回避使用多重继承。</p>
<p>接口不像抽象类，它完全不能提供任何实现。所以任何实现某个接口的类必须提供实现所有方法。</p>
<p>有时继承被称为实现继承，而接口被称为定义继承。</p>
<p>抽象类可以提供抽象方法，也可以提供实体方法，而接口只能提供抽象方法。为什么要有这样的区别呢？</p>
<ul>
<li>狗是哺乳动物，所以 Dog 和 Mammal 之间的关系是继承关系</li>
<li>Dog 实现了 Nameable，所以它们之间是接口关系</li>
<li>狗有头，所以 Dog 和 Head 之间是组合关系</li>
</ul>
<p>尽管接口是继承的特殊类型，但了解特殊之处是非常重要的。理解这特殊之处是设计出强壮的面向对象系统的关键。</p>
<p>虽然继承时严格的 is-a 关系，但接口不是。</p>
<p>接口可被应用到不相关的类。你可以给狗命名，也可以给蜥蜴命名。这是使用抽象类和使用接口的关键区别。</p>
<p>接口指定了没有明显联系的类之间的相同行为。</p>
<p>所以我们可以安全地说狗是有名字的实体。这是简单但有效的证据，继承和接口都构成 is-a 关系。</p>
<p>首先，很多情况下开发系统时甚至并未考虑重用。其次，即使考虑到了重用，计划限制、有限的资源以及经费考虑等问题经常干扰最佳实践。</p>
<p>使用组合的另一个优势是可以分别构建系统及子系统，而且更重要的是这些系统可以被独立测试和维护。</p>
<ul>
<li>稳定的复杂系统通常有一定的层级结构，每个系统由更简单的子系统构建而成，这些子系统又由更简单的子系统构建而成。组合适用于这条准则，即通过简单的对象来构造复杂的对象。</li>
<li>稳定的复杂系统是可分解的。</li>
<li>稳定的复杂系统往往由不同类型的子系统以不同的方式组合而成。</li>
<li>可工作的复杂系统往往是从可工作的简单系统演化而来。</li>
</ul>
<p>作为软件设计者，组合是用于对抗软件的复杂度的非常重要的策略之一。</p>
<p>使用组件的主要好处就是可以使用其他开发人员（甚至是第三方供应商）构建的组件。</p>
<p>通常有两种组合方式：联合和聚合。联合和聚合的微小区别在于部分如何构成整体。在聚合中，通常只看到整体，而在联合中，通常看到的是组成整体的部分。</p>
<p>最直观的组合方式就是聚合。聚合意味着复杂的对象由其他对象构成。</p>
<p>聚合代表你通常看到了整体，而联合既代表整体，也代表部分。在立体音响系统中，各种各样的组件是独立的，通过插接线（连接各种各样组件的线）连接成整体。</p>
<p>聚合是指复杂的对象由其他对象组成。而当一个对象需要其他对象的服务时则使用联合。</p>
<p>最佳实践是一个领域中的对象不应当和另一个领域中的对象混合，除非有非常特殊的情况。</p>
<p>利用混合系统的便利性是一项设计决策。如果TV/VCR集成系统的便利性比单个组件的风险和故障更重要，那么采用混合领域则是首选的设计决策。</p>
<p>基数表示参与联合的对象个数，可以表示这种联合关系是可以选还是强制的。</p>
<p>当处理联合时最重要的问题之一是确保设计应用程序时检查可选的联合。即代码必须检查该联合是否为 null。</p>
<p>类图有三部分组成：类名、属性和方法（构造函数也是方法）。</p>
<p>属性没有签名，有类型；方法具有签名。</p>
<p>通过类图可以知道参数的数据类型。因为属性之前有个减号（-）前缀，声明了这些属性是私有属性。加号（+）则表示这些属性是公共的，而这是不应该的。</p>
<p>在 Java 中访问修饰符的默认类型是受保护类型。</p>
<p>当需要借助其他类来创建一个类时就是组合关系。当一个类由其他类组成时就是聚合关系（比如轮胎和汽车的关系）。当一个类需要其他类的服务时就是联合关系（比如客户需要服务器的服务）。</p>
<p>聚合由一个头部有一个菱形的线表示。</p>
<p>在UML标记中，一条单纯的线表示这种关系，线的两端没有任何形状。</p>
<p>XML是一种标准的机制，可以在完全不同的系统之间定义和传输数据（JSON是另一种机制）。XML和JSON提供了一种在相互独立的应用程序之间共享数据的机制。</p>
<p>XML提供了以多种方式传输数据的标准。通常可以认为数据能够以垂直和水平两种范式来传输。词条垂直意味着数据可以跨行业传输。</p>
<p>采用XML标准的另一种方式是建立水平应用程序。水平的应用程序特定于某个行业。</p>
<p>XML全程为扩展标记语言。你可能早已熟悉另一种标记语言，叫作超文本标记语言（HTML）。XML 和 HTML 是 SGML 的后代，SGML 是标准的通用标记语言。</p>
<p>然而 XML 提供了两个 HTML 不具备的优势，就是验证文档以及格式化文档。</p>
<p>HTML 的标签是预定义的。</p>
<p>存在一种叫作文档类型定义的（DTD）的文档。DTD 用于定义描述数据的标签。当创建 XML 文档时，只可以使用预定义的标签。</p>
<p>你不必强制使用 DTD。但使用 DTD 可以验证 XML 文档。对 XML 的唯一验证方式就是检查 XML 的格式是否正确。而使用了 DTD 的 XML 则不接受最佳猜测。如果文档结构不正确，那么会产生一个错误，该文档是不合法的。</p>
<p>通常使用面向对象的语言开发的应用程序可以与 XML 进行交互。</p>
<p>XML 文档可以将 DTD 内嵌在文档中，也可以指定一个外部的 DTD。外部的 DTD 提供了一种更强大的机制。</p>
<p>PCDATA 全称为解析字符数据，是从文本文件中解析字符信息的标准。</p>
<p>早期的一个工具叫作 XML Notepad，它和微软操作系统提供的 Notepad 很相似，有助于我们理解 XML 文档的结构。</p>
<p>需要使用 XML 验证器来检查合法性。</p>
<p>w3schools 网站的 XML 验证器是其中之一，而且简单易用。</p>
<p>需要指出 HTML 不会进行这种类型的检查。事实上，即使 XML 文档结构是非法的，但仍然可以用浏览器打开。</p>
<p>请记住 XML 主要用于定义数据，而 HTML 则基本上是一种展示机制。它们都可以用于在浏览器中展示数据。</p>
<p>JavaScript 对象标记（又称为 JSON）更加灵活。</p>
<ul>
<li>JSON 是轻量级文本数据交换格式</li>
<li>JSON 与语言无关</li>
<li>JSON 是”自描述的“，并且容易理解</li>
</ul>
<p>JSON 使用 JavaScript 语法来描述数据对象，但 JSON 依然是语言和平台无关的。</p>
<p>JavaScript 程序可以使用内建的 eval() 函数来执行 JSON 数据并创建原生的 JavaScript 对象。</p>
<p>XML 和 JSON 共同目标是可以轻松解析、分享和使用包含在对象中的传输数据。很多人喜欢使用 JSON 是因为它的结构比 XML 简单，而且处理速度更快。</p>
<p>保存对象的状态以便以后使用，这一概念被称为持久化。我们使用术语持久化对象来定义一个不依赖与单个应用程序的对象，该对象可以被存储并稍后再次使用。</p>
<ul>
<li>保存到平面文件中</li>
<li>保存到关系型数据库中</li>
<li>保存到对象数据库中</li>
</ul>
<p>存储对象还要考虑的另一个问题是对象可以包含其他对象。</p>
<p>在上面 Java 序列化的例子中，方法并没有被显示保存。注意我们已经说明 Java 即用于存储对象，也用于恢复对象。事实上定义类时就限制了存储和恢复时对象的类型都必须是同一个类。因此方法自身无需保存到数据存储中。</p>
<p>公司如果使用对象数据库，则需要将所有数据从关系型数据库中转换到对象数据库中。这有很多缺点：</p>
<ul>
<li>第一，任何做过数据库间数据迁移的人都知道这事非常痛苦的过程。</li>
<li>第二。即使数据转换成功了，也没有任何方式知道数据库工具的改变将如何影响应用程序代码。</li>
<li>第三，当发生问题时（这种情况经常发生），很难确定是数据库导致的问题还是应用程序代码导致的问题。</li>
</ul>
<p>作为专业开发人员的最酷的现实之一是改变永无止境。</p>
<p>电子邮件的出现揭示了”分布式计算“这一概念。</p>
<p>我们已经说过C++不是真正的面向对象的编程语言，而是基于对象的编程语言。</p>
<p>注意任何 Web 应用都需要在客户端和服务器做验证，因为在客户端有方式可以绕过客户端验证直接向服务器发送数据，或者用户可以直接禁用客户端脚本而发送非法值。解决该问题有几个关键点需要考虑：</p>
<ul>
<li>向服务器端发送信息需要更多的时间成本。</li>
<li>向服务器端发送信息会增加网络传输。</li>
<li>向服务器端发送信息会占用服务器资源。</li>
<li>向服务器端发送信息会存在潜在的错误。</li>
</ul>
<p>基于这些原因以及其他潜在的问题，最终目标是在客户端进行尽可能多的验证。</p>
<p>JavaScript 和大多数脚本语言都是基于对象的。可以认为脚本语言是传统的编程范式和面向对象范式之间的桥梁。</p>
<p>客户端 JavaScript 通常存活在浏览器作用域中。</p>
<p>尽管 Java 和 JavaScript 都基于 C 语法，但他们没有什么直接关系。</p>
<p>很多对象类型可以直接内置到HTML文档中。网页控制器由一组预先构建的对象组成。可以使用<code>&lt;object&gt;</code>标签来使用这些对象。<code>&lt;object&gt;</code>标签也可以用于在浏览器中内置和启动各种音乐播放器。启动的播放器类型取决于浏览器加载的默认播放器。</p>
<p>对企业计算最基本的定义是它本质上是分布式计算。分布式计算文如其名，指一组分布式的计算机通过网络一起工作。分布式计算的力量在于计算机可以共享网络。</p>
<p>企业系统都是基于分布式对象构建的。使用分布式对象有很多优势。最大优势是理论上系统可以调用处于网络任何位置的对象。这是一种非常强大的能力，而且是当今基于互联网的业务的基石。另一个主要优势是可以通过网络中的多台服务器分发系统服务。</p>
<p>我们使用W3C提供的对Web服务的通用定义，即”客户端和服务器端使用基于SOAP（simple object access protocol，简单对象访问协议）标准的XML消息进行通信”。</p>
<p>SOAP是一项通信协议，用于通过互联网发送消息。我们可以描述SOAP为：SOAP是基于XML的用于分布式应用程序的协议。</p>
<p>远程程序调用（RPC）是一个通信机制，允许通过共享的网络调用其他计算机上的服务（对象）。</p>
<p>这种方式叫作表征状态转移，也叫作ReST。ReST 是一种无状态的协议，基本上依赖于HTTP。由于HTTP是互联网自身的基石，很大程度上可以说互联网的架构基于ReST，这通常称为RESTful架构。</p>
<p>软件开发的有趣之处在于，当设计软件系统时，实际上是在对现实世界系统进行建模。</p>
<p>设计模式归为三类，分别是创建型模式、结构型模式和行为型模式。</p>
<ul>
<li>模式名称，使用一到两个词语来描述一个设计问题、对应的解决方案以及后果。</li>
<li>适用于该模式的待解决的问题，需要解释该问题的详细内容。</li>
<li>解决方案，描述了设计方案，比如类与对象之间的关系，各自的职责和协作等。</li>
<li>效果，效果是指应用该模式的结果以及利弊。</li>
</ul>
<p>模型是应用程序对象，视图是屏幕显示，控制器则定义了用户接口如何响应用户输入。</p>
<ul>
<li>创建型模式。帮你创建对象，你无需直接实例化对象。你可以根据给定的条件创建对象，这给程序带来更大的灵活性。</li>
<li>结构型模式。将一组对象组合更复杂的结构，比如复杂的用户接口或者账单数据。</li>
<li>行为型模式。定义系统中对象之间的通信方式，控制复杂程序中的流向。</li>
</ul>
<p>创建型模式包含以下模式：</p>
<ul>
<li>抽象工厂模式</li>
<li>构造器模式</li>
<li>工厂方法模式</li>
<li>原型模式</li>
<li>单例模式</li>
</ul>
<p>请记住面向对象的重要规则之一是对象的职责由自身管理。</p>
<p>结构型模式用于使用一组对象来创建更复杂的结构，包括：</p>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>装饰器模式</li>
<li>外观模式</li>
<li>轻量模式</li>
<li>代理模式</li>
</ul>
<p>行为型模式包含以下类别：</p>
<ul>
<li>责任链模式</li>
<li>命令模式</li>
<li>解释器模式</li>
<li>迭代器模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>模板方法模式</li>
<li>访问者模式</li>
</ul>
<p>设计模式是从有益的经验中总结出来的，反模式则来自于失败的经验。大多数软件项目最终不成功的原因都会被记载下来，最终总结为反模式。</p>
]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[组件拆分、设计]]></title>
      <url>https://zhulichao.github.io/2020/09/26/component-splitting/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h2><ul>
<li>各种名称要尽量语义化、规范化，如组件名、参数名、方法名，语义化可以起到注释的作用，规范化保证系统各处命名规则一致</li>
<li>必要的容错处理，如没传参数、参数不正确等</li>
<li>常用的设置可以提取为缺省值</li>
<li>尽量提取出配置项，可预留用户自己定义内容的地方</li>
<li>场景化，如 dialog 的 success、warning 状态</li>
<li>可以拆分出子组件但不用过度组件化，适当的时候再分离也可以，维护良好的层次结构，可借助 StarUML 等工具画出组件图</li>
<li>扁平化、面向数据的 state/props，更加纯粹的 state 变化，这也是Redux推崇的，完全的扁平化设计能带来的开发体验和性能提升</li>
<li>考虑集中、统一的状态管理</li>
<li>提前考虑可扩展性，尽量做到后面的改变能向下兼容</li>
<li>分阶段、多版本维护，没必要一次就完成全部功能</li>
<li>维护详细的 CHANGELOG 或其它文档，能够记录变更历史</li>
<li>辅助代码分离，提取配置代码、假数据、非技术说明文档等</li>
</ul>
<h2 id="组件化规范"><a href="#组件化规范" class="headerlink" title="组件化规范"></a>组件化规范</h2><ul>
<li>组件之间独立、松耦合</li>
<li>组件间嵌套使用</li>
<li>组件间通信</li>
<li>组件公用部分设计</li>
<li>组件的构建打包</li>
<li>组件继承与复用性</li>
<li>私有组件的统一管理</li>
<li>根据特性场景进行扩展或自定义</li>
</ul>
<h2 id="组件拆分"><a href="#组件拆分" class="headerlink" title="组件拆分"></a>组件拆分</h2><h3 id="拆分依据"><a href="#拆分依据" class="headerlink" title="拆分依据"></a>拆分依据</h3><ul>
<li>通常一个工程，由多个模块组成，每个模块由多个组件构成</li>
<li>可复用性，基础组件，方便统一管理，src/components</li>
<li>可维护性，拆分的依据一般是单一原则，分而治之，降低复杂度，src/views/xxx/components</li>
<li>可测试性，耦合度低到一定程度就可以了，没必要再无限制的拆分下去</li>
<li>适应UI设计师的建模</li>
<li>方便协作，有人控制逻辑，有人只写展示组件</li>
<li>不拆分是否有性能影响，使拆分后的组件更容易判断是否更新</li>
<li>考虑拆分的好处是否超过了成本</li>
</ul>
<h3 id="拆分方式"><a href="#拆分方式" class="headerlink" title="拆分方式"></a>拆分方式</h3><ul>
<li>区分展示组件和容器组件，展示组件，通常没有自己的状态，只为展示信息，容器组件，有自己的状态、逻辑处理、数据绑定等，通常调用展示组件</li>
<li>切割复杂的 render() 方法，创建子组件</li>
<li>模板化组件，固定的东西放在模板组件中，业务组件进行逻辑处理后调用模板组件</li>
<li>高阶组件，做一层封装返回新组件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-shapes]]></title>
      <url>https://zhulichao.github.io/2020/09/26/css-shapes/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://jiongks.name/slides/five-css-features/#17" target="_blank" rel="external">My Slides</a></p>
<h2 id="css-shape"><a href="#css-shape" class="headerlink" title="css shape"></a>css shape</h2><p>shape-outside 定义当前元素的形状为非矩形形状，相邻元素中的内容可沿着此元素形状的边缘进行编写</p>
<p>shape-margin 就是沿着 shape-outside 属性生成形状再向外扩展相应的距离，不过扩展后的形状不能超过参考盒模型的区域！</p>
<p>shape-image-threshold 这个属性是专门用来设置图片形状提取时透明通道的阈值，范围为0 ~ 1，默认值为0；阈值为n代表图片中透明通道值大于n的区域都是浮动区域。</p>
<h2 id="css-exclusions"><a href="#css-exclusions" class="headerlink" title="css exclusions"></a>css exclusions</h2><p>致力于解决文本环绕图片的效果，只有微软旗下 IE 和 Edge 可以用</p>
<p><a href="http://www.360doc.com/content/17/0209/17/13092497_627829160.shtml" target="_blank" rel="external">http://www.360doc.com/content/17/0209/17/13092497_627829160.shtml</a><br><a href="https://www.html5rocks.com/en/tutorials/regions/adobe/" target="_blank" rel="external">https://www.html5rocks.com/en/tutorials/regions/adobe/</a></p>
<p>wrap-flow 设置 exclusion 区域以及内容围绕的方式<br>wrap-margin 设置 exclusion 区与周边围绕区域的间距</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[主题切换思路]]></title>
      <url>https://zhulichao.github.io/2020/08/25/theme-change/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="js-中动态引入样式文件-import"><a href="#js-中动态引入样式文件-import" class="headerlink" title="js 中动态引入样式文件 import()"></a>js 中动态引入样式文件 import()</h2><p>不能通过 import() 动态引用样式文件来解决主题切换的问题，因为 import 文件后引入的样式会覆盖先引入的样式，如果选择主题1、主题2，再选择主题1是没办法切换回去的。</p>
<h2 id="export-实现-CSS、JS变量共享"><a href="#export-实现-CSS、JS变量共享" class="headerlink" title=":export 实现 CSS、JS变量共享"></a>:export 实现 CSS、JS变量共享</h2><p>scss 中导出变量，js 中导入变量。但是 js 中动态改变这个变量的值后无法实现数据双向绑定，dom 不会实时动态渲染。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$--color-primary</span>: <span class="number">#1890ff</span>;</div><div class="line"></div><div class="line">:export &#123;</div><div class="line">  theme: <span class="variable">$--color-primary</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> variables <span class="keyword">from</span> <span class="string">'@/variables.scss'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(variables.theme);</div></pre></td></tr></table></figure>
<p>如果要设置主题颜色，可以将从 css 中导出的变量值注入到 js 的全局变量中，需要设置主题颜色的地方，将样式写在 js 中并使用这个全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;el-menu</div><div class="line">    :active-text-color=&quot;settings.theme&quot;</div><div class="line">  &gt;</div><div class="line">  &lt;router-link</div><div class="line">    :style=&quot;activeStyle(tag)&quot;</div><div class="line">  &gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  computed: &#123;</div><div class="line">    ...mapState([&quot;settings&quot;]),</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    activeStyle(tag) &#123;</div><div class="line">      if (!this.isActive(tag)) return &#123;&#125;;</div><div class="line">      return &#123;</div><div class="line">        &quot;background-color&quot;: this.settings.theme,</div><div class="line">        &quot;border-color&quot;: this.settings.theme</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">&#125;,</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="js-动态改变-css-的变量"><a href="#js-动态改变-css-的变量" class="headerlink" title="js 动态改变 css 的变量"></a>js 动态改变 css 的变量</h2><p>设定 css 可以直接读取的参数，注意变量名前面要加两根连词线，这是 css 的规则。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].style.setProperty(<span class="string">'--参数名'</span>,<span class="string">'值'</span>);</div></pre></td></tr></table></figure>
<p>css 中读取参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$--color-primary: var(--参数名);</div></pre></td></tr></table></figure>
<h2 id="js-改变主-html-元素上的类"><a href="#js-改变主-html-元素上的类" class="headerlink" title="js 改变主 html 元素上的类"></a>js 改变主 html 元素上的类</h2><p>js 中修改主 html 元素上的类名，css 中不同类名下定义相同的变量，取不同的颜色值，页面元素使用变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name 为 blue 或 red</span></div><div class="line"><span class="built_in">document</span>.documentElement.className = <span class="string">'theme-'</span> + name;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.theme-blue</span> &#123;</div><div class="line">  <span class="attribute">--color</span>: blue;</div><div class="line">  <span class="attribute">--background-color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.theme-red</span> &#123;</div><div class="line">  <span class="attribute">--color</span>: red;</div><div class="line">  <span class="attribute">--background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--background-color);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="data-theme-多套主题配色方案"><a href="#data-theme-多套主题配色方案" class="headerlink" title="data-theme 多套主题配色方案"></a>data-theme 多套主题配色方案</h2><p>html 根标签设置一个 data-theme 属性，然后通过 js 切换 data-theme 的属性值，SCSS 根据此属性来判断使用对应主题变量。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$themes</span>: (</div><div class="line">  red: (</div><div class="line">    text-color-primary: <span class="number">#dc2b34</span>,</div><div class="line">    bg-color-primary: <span class="number">#d91720</span>,</div><div class="line">  ),</div><div class="line">  blue: (</div><div class="line">    text-color-primary: <span class="number">#78A4FA</span>,</div><div class="line">    bg-color-primary: <span class="number">#78A4FA</span>,</div><div class="line">  ),</div><div class="line">)</div><div class="line"></div><div class="line">@mixin themeify &#123;</div><div class="line">  @each <span class="variable">$theme-name</span>, <span class="variable">$theme-map</span> in <span class="variable">$themes</span> &#123;</div><div class="line">    <span class="variable">$theme-map</span>: <span class="variable">$theme-map</span> !global;</div><div class="line">    <span class="selector-attr">[data-theme=#&#123;$theme-name&#125;]</span> &amp; &#123;</div><div class="line">      @<span class="keyword">content</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">mixin</span> themedColor(<span class="variable">$key</span>, <span class="variable">$name</span>) &#123;</div><div class="line">  @<span class="keyword">include</span> themeify &#123;</div><div class="line">    #&#123;<span class="variable">$key</span>&#125;: themed(<span class="variable">$name</span>) <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@import './mixin';</div><div class="line"></div><div class="line">.testTheme .item &#123;</div><div class="line">  @include themedColor('color', 'text-color-primary');</div><div class="line">  @include themedColor('background-color', 'bg-color-primary');</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name 为 blue 或 red</span></div><div class="line"><span class="built_in">window</span>.document.documentElement.setAttribute(<span class="string">'data-theme'</span>, name);</div></pre></td></tr></table></figure>
<h2 id="若依方案"><a href="#若依方案" class="headerlink" title="若依方案"></a>若依方案</h2><p><a href="https://vue.ruoyi.vip/login" target="_blank" rel="external">若依管理系统在线演示地址</a></p>
<p>思路是下载 element-ui 相应版本的 theme-chalk 样式文件，将其中的主题相关颜色替换成新的颜色值，然后添加到页面的 style 标签上。因为页面中除了 element-ui 还有自己定义的主题样式，再查找一遍所有的 style 标签找到使用主题颜色的标签，替换其中的主题相关颜色值。注意，这种方式只进行了 element-ui 组件基础颜色的切换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;el-color-picker</div><div class="line">    v-model=&quot;theme&quot;</div><div class="line">    :predefine=&quot;[&apos;#409EFF&apos;, &apos;#1890ff&apos;, &apos;#304156&apos;,&apos;#212121&apos;,&apos;#11a983&apos;, &apos;#13c2c2&apos;, &apos;#6959CD&apos;, &apos;#f5222d&apos;, ]&quot;</div><div class="line">    class=&quot;theme-picker&quot;</div><div class="line">    popper-class=&quot;theme-picker-dropdown&quot;</div><div class="line">  /&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">const version = require(&apos;element-ui/package.json&apos;).version // element-ui version from node_modules</div><div class="line">const ORIGINAL_THEME = &apos;#409EFF&apos; // default color</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      chalk: &apos;&apos;, // content of theme-chalk css</div><div class="line">      theme: &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    // store 中的 theme 值</div><div class="line">    defaultTheme() &#123;</div><div class="line">      return this.$store.state.settings.theme</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    // 监听 store 中的 theme 值发生变化，修改 theme 值</div><div class="line">    defaultTheme: &#123;</div><div class="line">      handler: function(val, oldVal) &#123;</div><div class="line">        this.theme = val</div><div class="line">      &#125;,</div><div class="line">      immediate: true</div><div class="line">    &#125;,</div><div class="line">    // 监听 theme 值发生变化</div><div class="line">    async theme(val) &#123;</div><div class="line">      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME</div><div class="line">      if (typeof val !== &apos;string&apos;) return</div><div class="line">      const themeCluster = this.getThemeCluster(val.replace(&apos;#&apos;, &apos;&apos;))</div><div class="line">      // 此次改变时，上一次的颜色值，用来替换带有主题颜色值的 style 标签</div><div class="line">      const originalCluster = this.getThemeCluster(oldVal.replace(&apos;#&apos;, &apos;&apos;))</div><div class="line"></div><div class="line">      const $message = this.$message(&#123;</div><div class="line">        message: &apos;  Compiling the theme&apos;,</div><div class="line">        customClass: &apos;theme-message&apos;,</div><div class="line">        type: &apos;success&apos;,</div><div class="line">        duration: 0,</div><div class="line">        iconClass: &apos;el-icon-loading&apos;</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      const getHandler = (variable, id) =&gt; &#123;</div><div class="line">        return () =&gt; &#123;</div><div class="line">          // 初始化时的主题颜色值，用来修改 element-ui 的 theme-chalk 文件中对应的值，因为每次改变并没有将新的值更新到 this.chalk，所以每次都是用初始值替换新的值</div><div class="line">          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace(&apos;#&apos;, &apos;&apos;))</div><div class="line">          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)</div><div class="line"></div><div class="line">          let styleTag = document.getElementById(id)</div><div class="line">          if (!styleTag) &#123;</div><div class="line">            styleTag = document.createElement(&apos;style&apos;)</div><div class="line">            styleTag.setAttribute(&apos;id&apos;, id)</div><div class="line">            document.head.appendChild(styleTag)</div><div class="line">          &#125;</div><div class="line">          styleTag.innerText = newStyle</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // 用 this.chalk 保存下载的 element-ui 的 theme-chalk 样式文件</div><div class="line">      if (!this.chalk) &#123;</div><div class="line">        const url = `https://unpkg.com/element-ui@$&#123;version&#125;/lib/theme-chalk/index.css`</div><div class="line">        await this.getCSSString(url, &apos;chalk&apos;)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      const chalkHandler = getHandler(&apos;chalk&apos;, &apos;chalk-style&apos;)</div><div class="line">      // 替换 this.chalk 样式文件中的主题相关颜色值，将新的内容赋给指定的 style 标签</div><div class="line">      chalkHandler()</div><div class="line">      // 找到页面中带有旧颜色值的 style 标签，替换其中的主题相关颜色值</div><div class="line">      const styles = [].slice.call(document.querySelectorAll(&apos;style&apos;))</div><div class="line">        .filter(style =&gt; &#123;</div><div class="line">          const text = style.innerText</div><div class="line">          return new RegExp(oldVal, &apos;i&apos;).test(text) &amp;&amp; !/Chalk Variables/.test(text)</div><div class="line">        &#125;)</div><div class="line">      styles.forEach(style =&gt; &#123;</div><div class="line">        const &#123; innerText &#125; = style</div><div class="line">        if (typeof innerText !== &apos;string&apos;) return</div><div class="line">        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      this.$emit(&apos;change&apos;, val)</div><div class="line"></div><div class="line">      $message.close()</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  methods: &#123;</div><div class="line">    updateStyle(style, oldCluster, newCluster) &#123;</div><div class="line">      let newStyle = style</div><div class="line">      oldCluster.forEach((color, index) =&gt; &#123;</div><div class="line">        newStyle = newStyle.replace(new RegExp(color, &apos;ig&apos;), newCluster[index])</div><div class="line">      &#125;)</div><div class="line">      return newStyle</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getCSSString(url, variable) &#123;</div><div class="line">      return new Promise(resolve =&gt; &#123;</div><div class="line">        const xhr = new XMLHttpRequest()</div><div class="line">        xhr.onreadystatechange = () =&gt; &#123;</div><div class="line">          if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">            this[variable] = xhr.responseText.replace(/@font-face&#123;[^&#125;]+&#125;/, &apos;&apos;)</div><div class="line">            resolve()</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        xhr.open(&apos;GET&apos;, url)</div><div class="line">        xhr.send()</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    getThemeCluster(theme) &#123;</div><div class="line">      const tintColor = (color, tint) =&gt; &#123;</div><div class="line">        let red = parseInt(color.slice(0, 2), 16)</div><div class="line">        let green = parseInt(color.slice(2, 4), 16)</div><div class="line">        let blue = parseInt(color.slice(4, 6), 16)</div><div class="line"></div><div class="line">        if (tint === 0) &#123; // when primary color is in its rgb space</div><div class="line">          return [red, green, blue].join(&apos;,&apos;)</div><div class="line">        &#125; else &#123;</div><div class="line">          red += Math.round(tint * (255 - red))</div><div class="line">          green += Math.round(tint * (255 - green))</div><div class="line">          blue += Math.round(tint * (255 - blue))</div><div class="line"></div><div class="line">          red = red.toString(16)</div><div class="line">          green = green.toString(16)</div><div class="line">          blue = blue.toString(16)</div><div class="line"></div><div class="line">          return `#$&#123;red&#125;$&#123;green&#125;$&#123;blue&#125;`</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      const shadeColor = (color, shade) =&gt; &#123;</div><div class="line">        let red = parseInt(color.slice(0, 2), 16)</div><div class="line">        let green = parseInt(color.slice(2, 4), 16)</div><div class="line">        let blue = parseInt(color.slice(4, 6), 16)</div><div class="line"></div><div class="line">        red = Math.round((1 - shade) * red)</div><div class="line">        green = Math.round((1 - shade) * green)</div><div class="line">        blue = Math.round((1 - shade) * blue)</div><div class="line"></div><div class="line">        red = red.toString(16)</div><div class="line">        green = green.toString(16)</div><div class="line">        blue = blue.toString(16)</div><div class="line"></div><div class="line">        return `#$&#123;red&#125;$&#123;green&#125;$&#123;blue&#125;`</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      const clusters = [theme]</div><div class="line">      for (let i = 0; i &lt;= 9; i++) &#123;</div><div class="line">        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))</div><div class="line">      &#125;</div><div class="line">      clusters.push(shadeColor(theme, 0.1))</div><div class="line">      return clusters</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">.theme-message,</div><div class="line">.theme-picker-dropdown &#123;</div><div class="line">  z-index: 99999 !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.theme-picker .el-color-picker__trigger &#123;</div><div class="line">  height: 26px !important;</div><div class="line">  width: 26px !important;</div><div class="line">  padding: 2px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.theme-picker-dropdown .el-color-dropdown__link-btn &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="webpack-theme-color-replacer"><a href="#webpack-theme-color-replacer" class="headerlink" title="webpack-theme-color-replacer"></a>webpack-theme-color-replacer</h2><p>参考<a href="https://github.com/iczer/vue-antd-admin" target="_blank" rel="external">Ant Design Pro 的 Vue 实现</a>项目的主题切换配置。主要代码涉及如下几个文件：</p>
<p>vue.config.js<br>src/utils/themeUtil.js<br>src/store/modules/setting.js<br>src/App.vue<br>src/components/setting/Setting.vue</p>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cookie 共享]]></title>
      <url>https://zhulichao.github.io/2020/08/24/cookie-domain/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul>
<li>cookie 针对 IP，不区分端口</li>
<li>顶级域名只能设置 domain 为顶级域名，不能设置为二级域名或者三级域名等等</li>
<li>顶级域名设置的 cookie 可以共享给二级或三级域名，需要显示设置 domain 值</li>
</ul>
<h2 id="修改-host-文件"><a href="#修改-host-文件" class="headerlink" title="修改 host 文件"></a>修改 host 文件</h2><ul>
<li><code>sudo vi /etc/hosts</code></li>
</ul>
<h2 id="Invalid-Host-Header"><a href="#Invalid-Host-Header" class="headerlink" title="Invalid Host Header"></a>Invalid Host Header</h2><p>更改 localhost 域名为其它域名后，出现了 Invalid Host Header 错误，一通百度过后，发现是 webpack 对于 host 安全性鉴定造成的，解决方案是在 webpack.dev.conf.js 文件中的 devServer 配置对象中添加 disableHostCheck: true 这个属性，修改后就可正常访问了。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 iframe 引用 NPM 包]]></title>
      <url>https://zhulichao.github.io/2020/08/21/iframe-module/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题描述：想创建一个基于 vue 的业务平台，分为前台和后台，前台写业务相关的代码，后台是依赖<a href="https://ruoyi.vip/" target="_blank" rel="external">若依</a>的管理系统，将后台项目打包后发布到私有 npm 仓库，前台安装这个包直接使用，项目运行起来后是一个整体。这样用户可以下载前台的项目直接运行整个项目，可以修改代码进行个性化定制，但是后台的部分职能只用，不能修改。</p>
<p>依赖若依的后台项目，打包后是一个完整的项目，有自己的 index.html 入口文件，如果想让后台项目打包后与前台项目融合为一体，因为 vue 的入口在前台，前台就需要使用后台项目的所有路由、store，这样的可行性不高，即使可行代价也比较大，所以采用了前台通过 iframe 嵌入后台的入口文件的方式，前台和后台保持相同的登录退出逻辑，能让前台和后台同步登录和退出的状态。</p>
<h3 id="后台项目"><a href="#后台项目" class="headerlink" title="后台项目"></a>后台项目</h3><ul>
<li>基于 <a href="https://gitee.com/y_project/RuoYi-Vue" target="_blank" rel="external">RuoYi-Vue/ruoyi-ui</a> 初始化项目</li>
<li>src/router/index.js 文件中添加，让前台通过 iframe 嵌入的地址重定向到主页</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  path: <span class="string">'/static/cms/index.html'</span>,</div><div class="line">  redirect: <span class="string">'index'</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>src/layout/components/Navbar.vue 文件中修改，让后台点击退出时进入前台页面的主页</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'LogOut'</span>).then(() =&gt; &#123;</div><div class="line">  location.replace(<span class="string">'/index'</span>);</div><div class="line">  <span class="built_in">window</span>.parent.location.replace(<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>vue.config.js 中修改打包静态资源的路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">assetsDir: <span class="string">'static/cms'</span>;</div></pre></td></tr></table></figure>
<h3 id="前台项目"><a href="#前台项目" class="headerlink" title="前台项目"></a>前台项目</h3><ul>
<li>vue init webpack 初始化项目</li>
<li>移植若依登录、401、404 页面相关代码</li>
<li>build/webpack.base.conf.js 文件中添加对 sass 和 svg 的处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.sass$/</span>,</div><div class="line">  loader: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'sass'</span>]</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">  loader: <span class="string">'url-loader'</span>,</div><div class="line">  exclude: [resolve(<span class="string">'src/assets/icons'</span>)],</div><div class="line">  options: &#123;</div><div class="line">    limit: <span class="number">10000</span>,</div><div class="line">    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.svg$/</span>,</div><div class="line">  loader: <span class="string">'svg-sprite-loader'</span>,</div><div class="line">  include: [resolve(<span class="string">'src/assets/icons'</span>)],</div><div class="line">  options: &#123;</div><div class="line">    symbolId: <span class="string">'icon-[name]'</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>集成后台项目，因为 iframe 只能访问静态资源，不能直接访问 node_modules 下的资源，因此需要将 node_modules 下打包后的后台项目资源拷贝到前台项目 static 目录下，webpack 添加如下配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">  ...</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">from</span>: <span class="string">'node_modules/后台项目名/index.html'</span>,</div><div class="line">    to: path.join(config.dev.assetsSubDirectory, <span class="string">'cms'</span>),</div><div class="line">    ignore: [<span class="string">'.*'</span>],</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">from</span>: <span class="string">'node_modules/后台项目名/static/cms'</span>,</div><div class="line">    to: path.join(config.dev.assetsSubDirectory, <span class="string">'cms'</span>),</div><div class="line">    ignore: [<span class="string">'.*'</span>],</div><div class="line">  &#125;,</div><div class="line">]);</div></pre></td></tr></table></figure>
<ul>
<li>使用 iframe 引用后台入口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;iframe id=&quot;cms&quot; class=&quot;content&quot; src=&quot;/static/cms/index.html&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;style scoped&gt;</div><div class="line">.content &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  width: 100vw;</div><div class="line">  height: 100vh;</div><div class="line">  border: none;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NPM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSDoc-修改模板]]></title>
      <url>https://zhulichao.github.io/2020/08/06/jsdoc-template/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JSDoc 无法修改 Title 名称，显示一直为 Home，无法解析方法返回值的对象结构，可以通过修改模板来解决这些问题。</p>
<h3 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h3><p>复制 /node_modules/jsdoc/templates/default 目录到项目目录下，命令中添加 -t path/to/default 即指定了使用项目下的 default 目录作为模板，这时我们就可以修改模板了。</p>
<h3 id="修改-Title-名称"><a href="#修改-Title-名称" class="headerlink" title="修改 Title 名称"></a>修改 Title 名称</h3><p>将 default/publish.js 中替换 Home 替换为想要的值即可。</p>
<h3 id="解析方法返回值的对象结构"><a href="#解析方法返回值的对象结构" class="headerlink" title="解析方法返回值的对象结构"></a>解析方法返回值的对象结构</h3><p>default/tmpl/method.tmpl 文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 原内容</div><div class="line">&lt;?js if (data.returns &amp;&amp; returns.length) &#123; ?&gt;</div><div class="line">&lt;h5&gt;Returns:&lt;/h5&gt;</div><div class="line">&lt;?js if (returns.length &gt; 1) &#123; ?&gt;&lt;ul&gt;&lt;?js</div><div class="line">    returns.forEach(function(r) &#123; ?&gt;</div><div class="line">        &lt;li&gt;&lt;?js= self.partial(&apos;returns.tmpl&apos;, r) ?&gt;&lt;/li&gt;</div><div class="line">    &lt;?js &#125;);</div><div class="line">?&gt;&lt;/ul&gt;&lt;?js &#125; else &#123;</div><div class="line">    returns.forEach(function(r) &#123; ?&gt;</div><div class="line">        &lt;?js= self.partial(&apos;returns.tmpl&apos;, r) ?&gt;</div><div class="line">    &lt;?js &#125;);</div><div class="line">&#125; &#125; ?&gt;</div><div class="line"></div><div class="line">// 替换为</div><div class="line">&lt;?js if (data.returns &amp;&amp; returns.length) &#123; ?&gt;</div><div class="line">&lt;h5&gt;Returns:&lt;/h5&gt;</div><div class="line">&lt;?js= this.partial(&apos;params.tmpl&apos;, returns) ?&gt;</div><div class="line">&lt;?js &#125; ?&gt;</div></pre></td></tr></table></figure>
<p>default/publish.js 文件中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原内容</span></div><div class="line">returnTypesString = util.format(<span class="string">' &amp;rarr; %s&#123;%s&#125;'</span>, attribsString, returnTypes.join(<span class="string">'|'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 替换为</span></div><div class="line">returnTypesString = util.format(<span class="string">' &amp;rarr; %s&#123;%s&#125;'</span>, attribsString, returnTypes[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<p>添加自定义插件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">exports.handlers = &#123;</div><div class="line">  newDoclet: e =&gt; &#123;</div><div class="line">    // 修改对 return 的解析</div><div class="line">    if (e.doclet.returns) &#123;</div><div class="line">      e.doclet.returns.forEach(item =&gt; &#123;</div><div class="line">        if (item.description) &#123;</div><div class="line">          const parseArr = item.description.split(&apos; - &apos;);</div><div class="line">          if (parseArr.length &gt; 1) &#123;</div><div class="line">            item.description = parseArr[1];</div><div class="line">            item.name = parseArr[0];</div><div class="line">          &#125; else &#123;</div><div class="line">            item.description = parseArr[0];</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>效果为</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 返回 viewer.</div><div class="line">  * @return &#123;object&#125; viewer - The viewer value.</div><div class="line">  * @return &#123;number&#125; viewer.key1 - 描述1</div><div class="line">  * @return &#123;string&#125; viewer.key2 - 描述2</div><div class="line">  */</div><div class="line"><span class="keyword">static</span> getViewer() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.viewer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2020/08/06/jsdoc-template/return.png" width="400" title="返回对象">
<h2 id="类名称显示模块路径"><a href="#类名称显示模块路径" class="headerlink" title="类名称显示模块路径"></a>类名称显示模块路径</h2><p>default/publish.js 文件中，将 buildMemberNav 方法替换为如下内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 替换为</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMemberNav</span>(<span class="params">items, itemHeading, itemsSeen, linktoFn</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> nav = <span class="string">''</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (items.length) &#123;</div><div class="line">    <span class="keyword">let</span> itemsNav = <span class="string">''</span>;</div><div class="line">    <span class="keyword">let</span> pathName = <span class="string">''</span>;</div><div class="line">    items.forEach(item =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> result = item.comment.match(<span class="regexp">/@path \&#123;[^\&#125;]+\&#125;/</span>);</div><div class="line">      <span class="keyword">if</span> (result &amp;&amp; result[<span class="number">0</span>]) &#123;</div><div class="line">        pathName = result[<span class="number">0</span>].replace(<span class="string">'@path &#123;'</span>, <span class="string">''</span>).replace(<span class="string">'&#125;'</span>, <span class="string">''</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> displayName;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!hasOwnProp.call(item, <span class="string">'longname'</span>)) &#123;</div><div class="line">        itemsNav += <span class="string">`&lt;li&gt;<span class="subst">$&#123;linktoFn('', item.name)&#125;</span>&lt;/li&gt;`</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasOwnProp.call(itemsSeen, item.longname)) &#123;</div><div class="line">        <span class="keyword">if</span> (env.conf.templates.default.useLongnameInNav) &#123;</div><div class="line">          displayName = item.longname;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathName) &#123;</div><div class="line">          displayName = pathName;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          displayName = item.name;</div><div class="line">        &#125;</div><div class="line">        itemsNav += <span class="string">`&lt;li&gt;<span class="subst">$&#123;linktoFn(</span></span></div><div class="line">          item.longname,</div><div class="line">          displayName.replace(/\b(module|event):/g, '')</div><div class="line">        )&#125;&lt;/li&gt;`;</div><div class="line"></div><div class="line">        itemsSeen[item.longname] = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (itemsNav !== <span class="string">''</span>) &#123;</div><div class="line">      nav += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;itemHeading&#125;</span>&lt;/h3&gt;&lt;ul&gt;<span class="subst">$&#123;itemsNav&#125;</span>&lt;/ul&gt;`</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> nav;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果为</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过火星科技创建地球</div><div class="line"> * @hideconstructor</div><div class="line"> * @path &#123;EVECesium.App.Viewer&#125;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Viewer</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<img src="/2020/08/06/jsdoc-template/path.png" title="Class显示模块路径">
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[API-设计]]></title>
      <url>https://zhulichao.github.io/2020/08/06/api-design/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="js-类库升级兼容，暴露出来的东西，尽量不要变"><a href="#js-类库升级兼容，暴露出来的东西，尽量不要变" class="headerlink" title="js 类库升级兼容，暴露出来的东西，尽量不要变"></a>js 类库升级兼容，暴露出来的东西，尽量不要变</h2><ul>
<li>模块名、类名、方法名，保持不变</li>
<li>已有参数尽量不变，如果发生变化可以在代码中做非空判断、类型转换、判断 version 等方式来兼容老版本</li>
<li>新增参数非必填，可以提供默认值</li>
<li>返回值预留出扩展空间</li>
<li>多做一些非空判断，报错信息</li>
<li>不到万不得已，不要写新的方法替代老的方法</li>
</ul>
<h2 id="类库编写规范"><a href="#类库编写规范" class="headerlink" title="类库编写规范"></a>类库编写规范</h2><ul>
<li>注释清晰，与代码一致</li>
<li>函数顶部，先进行参数校验、格式转换</li>
<li>所有方法都写上 @since，表示从哪个版本支持的</li>
</ul>
<h2 id="constructor-中异步操作"><a href="#constructor-中异步操作" class="headerlink" title="constructor 中异步操作"></a>constructor 中异步操作</h2><p>constructor 的作用是返回一个对像实例，如果加了 async 就变成返回一个 promise 了，所以这个方法行不通，因为做不到既返回一个 promise 又返回一个 object 实例。</p>
<p>如果一定要进行异步操作，可以考虑使用静态方法，在异步操作结束后返回一个自定义的对象。但是因为这个静态方法是异步的，在调用处还要考虑对异步操作的处理。</p>
<p>这种操作可以参考 React 的官方文档，建议请求接口数据不要放在 constructor 中，而是放在 componentDidMount 中。</p>
<img src="/2020/08/06/api-design/1.png" title="constructor">
<img src="/2020/08/06/api-design/2.png" title="componentDidMount">
<h2 id="区别类方法和静态方法"><a href="#区别类方法和静态方法" class="headerlink" title="区别类方法和静态方法"></a>区别类方法和静态方法</h2><p>对于变量，只要数据在对象中都是不同的，就是对象中的特有数据，必须存储在对象中，是非静态的；如果是相同的数据，对象不需要做修改，只需要用即可，不需要存储在对象中，定义成静态的。</p>
<p>函数是否用静态的就参考一点，就是该函数的功能能否访问到对象的特有数据。简单点说从源码看该功能是否要访问非静态的成员变量，如果需要，该功能是非静态的，如果不需就可以定义成静态函数。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack-error]]></title>
      <url>https://zhulichao.github.io/2020/08/05/webpack-error/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ERROR-Failed-to-compile-with-2-errors"><a href="#ERROR-Failed-to-compile-with-2-errors" class="headerlink" title="ERROR  Failed to compile with 2 errors"></a>ERROR  Failed to compile with 2 errors</h2><p><code>npm run dev</code> 报 <code>ERROR  Failed to compile with 2 errors</code>，没有详细的报错信息，出现这种情况可能是引入的文件路径不对导致的，如 HTML 模板路径，有几个 error 说明有几处路径不对。</p>
]]></content>
      
        <categories>
            
            <category> Webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack-entry-html]]></title>
      <url>https://zhulichao.github.io/2020/07/29/webpack-entry-html/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目中有多个 js 入口，要将编译生成的 js 分别插入到不同的 html 页面中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  app: <span class="string">'./app/main.js'</span>,</div><div class="line">  source: <span class="string">'./source/index.js'</span></div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">    filename: <span class="string">'index.html'</span>,</div><div class="line">    template: <span class="string">'index.html'</span>,</div><div class="line">    inject: <span class="literal">true</span>,</div><div class="line">    chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'app'</span>],</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">    filename: <span class="string">'demo.html'</span>,</div><div class="line">    template: <span class="string">'demo.html'</span>,</div><div class="line">    inject: <span class="literal">false</span>,</div><div class="line">    chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'source'</span>],</div><div class="line">  &#125;),</div><div class="line">],</div></pre></td></tr></table></figure>
<p>demo.html 中指定插入位置</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">css</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.files.css</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&lt;%=htmlWebpackPlugin.files.css[css] %&gt;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">chunk</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.files.chunks</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=htmlWebpackPlugin.files.chunks[chunk].entry %&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./static/app/utils.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="comment">// other js</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Commander.js-demo]]></title>
      <url>https://zhulichao.github.io/2020/07/24/commander-demo/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> commander = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</div><div class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> packageJson = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</div><div class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'正在下载模板...'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 命令</span></div><div class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> commander.Command(packageJson.name)</div><div class="line">  .version(packageJson.version)</div><div class="line">  .arguments(<span class="string">'&lt;name&gt;'</span>)</div><div class="line">  .action((name) =&gt; &#123;</div><div class="line">    <span class="comment">// 问题</span></div><div class="line">    inquirer</div><div class="line">      .prompt([</div><div class="line">        &#123;</div><div class="line">          type: <span class="string">'input'</span>,</div><div class="line">          name: <span class="string">'description'</span>,</div><div class="line">          message: <span class="string">'请输入项目描述'</span>,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          type: <span class="string">'input'</span>,</div><div class="line">          name: <span class="string">'author'</span>,</div><div class="line">          message: <span class="string">'请输入作者名称'</span>,</div><div class="line">        &#125;,</div><div class="line">      ])</div><div class="line">      .then((answers) =&gt; &#123;</div><div class="line">        <span class="comment">// 显示下载中</span></div><div class="line">        spinner.start();</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          spinner.succeed();</div><div class="line">          <span class="built_in">console</span>.log(symbols.success, name + <span class="string">'下载完成'</span>);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'问题答案：'</span>, symbols.info, answers);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'--verbose 参数：'</span>, program.verbose);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'--info 参数：'</span>, program.info);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'--use-npm 参数'</span>, program.useNpm);</div><div class="line">        &#125;, <span class="number">5000</span>);</div><div class="line">      &#125;);</div><div class="line">  &#125;)</div><div class="line">  .option(<span class="string">'--verbose'</span>, <span class="string">'print additional logs'</span>)</div><div class="line">  .option(<span class="string">'--info'</span>, <span class="string">'print environment debug info'</span>)</div><div class="line">  .option(<span class="string">'--use-npm'</span>)</div><div class="line">  .allowUnknownOption()</div><div class="line">  .usage(<span class="string">`<span class="subst">$&#123;chalk.green('&lt;name&gt;')&#125;</span> [options]`</span>)</div><div class="line">  .on(<span class="string">'--help'</span>, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`  If you have any problems, do not hesitate to file an issue.`</span></div><div class="line">    );</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure>
<img src="/2020/07/24/commander-demo/commander.png" title="效果图">
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CommonJS-ES6]]></title>
      <url>https://zhulichao.github.io/2020/07/23/commonjs-es6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS 规范的出发点：后台 JS 没有模块系统、标准库较少、缺乏包管理工具；为了让 JS 可以在任何地方运行，以达到 Java、C#、PHP 这些后台语言具备开发大型应用的能力。</p>
<p>CommonJS 是服务端模块的规范你，由 nodejs 推广使用。每一个文件就是一个模块，拥有自己独立的作用域、变量、以及方法等，对其它的模块都不可见。CommonJS 规范规定，每个模块内部，module 变量代表当前模块这个变量是一个对象，它的 exports 属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性，require 方法用于加载模块。</p>
<p>CommonJS 规范加载模块是同步的，输入的是变量的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test1.js</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> addX = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value + x;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.x = x;</div><div class="line"><span class="built_in">module</span>.exports.addX = addX;</div><div class="line"></div><div class="line"><span class="comment">// test2.js</span></div><div class="line"><span class="keyword">var</span> app =<span class="built_in">require</span>(<span class="string">'./test1.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(app.addX(app.x)); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的 require、Python 的 import，甚至就连 CSS 都有 @import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>
<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。ES6 模块输入的是只读的变量的绑定，因为它的本质是输入接口。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test1.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> x = <span class="number">5</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addX</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value + x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// test2.js</span></div><div class="line"><span class="keyword">import</span> &#123; x, addX &#125; <span class="keyword">from</span> <span class="string">'./test1.js'</span>;</div><div class="line"><span class="built_in">console</span>.log(addX(x)); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-内存分配]]></title>
      <url>https://zhulichao.github.io/2020/07/22/javascript-memory-allocation/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原始数据类型值，比如Undefined,Null,Boolean,Number,String，是存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。</p>
<p>引用类型值，也就是对象类型 Object type,比如Object,Array,Function,Date等，是存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>
<p>在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。而原始类型的值则是可以直接访问到的。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-垃圾回收]]></title>
      <url>https://zhulichao.github.io/2020/07/22/javascript-garbage-collection/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>如果一个对象不再被引用， 那么这个对象就会被垃圾回收机制回收；如果两个对象互相引用， 且不再被第3者所引用， 那么这两个互相引用的对象也会被回收。在闭包中，父函数被子函数引用，子函数又被外部的一个变量引用，这就是父函数不被回收的原因。</p>
<p>如果不再用到的内存，没有及时释放，我们就称之为内存泄漏。大多数语言都有它自身的垃圾回收机制，这样的好处是自动帮我们清理不必要的内存占用，但是我们的可控性却比较差，而C语言就无法自动清理垃圾，但它的可控性较强。</p>
<p>在 Javascript 中，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存，以此来解决内存泄漏的问题。但并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用，如果没有引用就必须手动解除引用。 现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。js中最常用的垃圾回收方式就是标记清除。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>首先给所有的变量或者对象添加一个标记，当变量进入环境（引用变量）的时候，把上一步标记的内容清除，当变量离开环境（不再需要引用变量）的时候，再重新给这些变量添加标记，这些重新添加上标记的变量或对象会回收到垃圾回收机器里面，垃圾回收机制会周期性的清除这些垃圾回收机器里面的所有对象或属性。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>语言引擎有一张”引用表”，保存了内存里面所有资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。但是引用计数有个最大的问题循环引用，最好是在不使用它们的时候手动将它们设为空。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj1 = &#123;&#125;;</div><div class="line">    <span class="keyword">let</span> obj2 = &#123;&#125;;</div><div class="line"></div><div class="line">    obj1.a = obj2; <span class="comment">// obj1 引用 obj2</span></div><div class="line">    obj2.a = obj1; <span class="comment">// obj2 引用 obj1</span></div><div class="line"></div><div class="line">    <span class="comment">// 手动清除</span></div><div class="line">    obj1 = <span class="literal">null</span>;</div><div class="line">    obj2 = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包的垃圾回收"><a href="#闭包的垃圾回收" class="headerlink" title="闭包的垃圾回收"></a>闭包的垃圾回收</h2><p>由于闭包时建立在一个函数内部的子函数，由于其可访问上级作用域的原因，即使上级函数执行完，作用域也不会随之销毁，这时的子函数—也就是闭包，便拥有了访问上级作用域中的变量的权限，即使上级函数执行完后，作用域内的值也不会被销毁，这个函数的作用域就会一直保存到闭包不存在为止。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        a--;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">fn3()(); <span class="comment">// 9</span></div><div class="line">fn3()(); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>当fn3()()第一次执行完后，整个fn3()被销毁，第二次fn3()相当于重新开辟了一块新的空间，所以第二次fn3()()和第一次打印的结果无关。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        a--;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> val = fn3();</div><div class="line">val(); <span class="comment">// 9</span></div><div class="line">val(); <span class="comment">// 8</span></div></pre></td></tr></table></figure>
<p>当fn3第一次执行完后，val并没有被销毁，第二次是在第一次基础之上执行的，val指向的对象会永远存在堆内存中,即使是fn3已经执行完毕，需要 <code>val=null</code> 将其指向的对象释放。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-border-image]]></title>
      <url>https://zhulichao.github.io/2020/07/14/css-border-image/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>border-image-slice</code> 用来分解引入进来的背景图片，使图像边界向内偏移，取值为 <code>number</code> | <code>percentage</code> 其中 number 是没有单位的，专指像素 px，<code>number</code> 或<code>percentage</code> 都可取 1~4 个值，类似于 border-width 的取值方式。如果取值上还可以加上 fill，如果使用这个关键字，图片边界的中间部分将保留下来，默认情况下是为空的。</p>
<p><code>border-image-slice</code> 把通过 <code>border-image-source</code> 取到的图片切成了九份，中间一份为内容区域，其他分别对应边框的对应部分，如图 1 所示。</p>
<img src="/2020/07/14/css-border-image/slice.png" width="400" title="图1">
<p>其中，1、2、3、4 区域和内容区域水平和垂直方向均被拉伸。a、b、c、d 区域根据 <code>border-image-repeat</code> 属性值展示，是否应重复（repeat）、拉伸（stretch）或铺满（round），可取两个值，分别表示水平和垂直方向。<br><code>border-image-width</code> 指定图像边界的宽度，不改变元素本身大小。<br><code>border-image-outset</code> 用于指定在边框外部绘制的量，向元素外显示图片边框，不影响其它元素。</p>
<p>示例代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Untitled Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-class">.container</span> &#123;</div><div class="line">        <span class="attribute">display</span>: flex;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">background-color</span>: orange;</div><div class="line">        <span class="attribute">border</span>: <span class="number">100px</span> solid;</div><div class="line">        <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(<span class="string">'slice.png'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box1</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box2</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">200</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box3</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">200</span> <span class="number">200</span> <span class="number">100</span> <span class="number">100</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box4</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">200</span> <span class="number">100</span> <span class="number">50</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box5</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-repeat</span>: stretch;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box6</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-repeat</span>: round;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box7</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-repeat</span>: repeat;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box8</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-repeat</span>: space;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box9</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-width</span>: <span class="number">20px</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box10</span> &#123;</div><div class="line">        <span class="attribute">border-image-slice</span>: <span class="number">100</span>;</div><div class="line">        <span class="attribute">border-image-width</span>: <span class="number">20px</span>;</div><div class="line">        <span class="attribute">border-image-outset</span>: <span class="number">20px</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box5"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box6"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box7"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box8"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box9"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box10"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<img src="/2020/07/14/css-border-image/border-width.png" title="运行结果">
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM-授权安装]]></title>
      <url>https://zhulichao.github.io/2020/07/06/npm-authorization/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题描述：工作中遇到一个特殊的需求，部门自己研发的平台，纯前端项目，没有后端，发布为私有包，希望可以通过授权安装控制项目分摊成本。</p>
<p>任何客户端都存在同样的问题，无论如何代码都要在客户端运行，所以就目前的技术而言是无法避免文件拷贝的。但可以通过混淆、加密等手段增加对方使用代码的成本。webpack 的 uglifyjs-webpack-plugin 插件可以进行代码混淆，但是还是能搜索到一些关键字。如果要对整个 js 文件进行加密，浏览器是无法识别加密后的文件的，可以考虑只对关键信息进行加密，解密后再执行。</p>
<h2 id="方式一：输出版权信息"><a href="#方式一：输出版权信息" class="headerlink" title="方式一：输出版权信息"></a>方式一：输出版权信息</h2><p>思路：这是收费 js 的通用做法，只能限制商业运用，但任何人都可以得到你的源码。下载源码后，搜索版权信息中的关键字，很容易就能定位到这段代码，然后自己删除掉。为了不让用户轻易找到输出版权信息的代码，可以对这部分输出代码进行加密，减小用户找到这段代码的可能性。</p>
<p>借助 webpack 的 copy-webpack-plugin 插件，可以在打包时对静态资源进行加密，使用 axios 加载打包后的静态资源再进行解密，这样就可以在代码中写明文的输出信息，方便维护，打包后就是进行了加密的代码。</p>
<p>实现代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// encrypt.js 加密文件</span></div><div class="line"><span class="keyword">var</span> CryptoJS = <span class="built_in">require</span>(<span class="string">'crypto-js'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">content, path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = content.toString();</div><div class="line">  <span class="comment">// 密钥 16 位</span></div><div class="line">  <span class="keyword">var</span> key = config.encrypt.key;</div><div class="line">  <span class="comment">// 初始向量 initial vector 16 位</span></div><div class="line">  <span class="keyword">var</span> iv = config.encrypt.iv;</div><div class="line">  <span class="comment">// key 和 iv 可以一致</span></div><div class="line"></div><div class="line">  key = CryptoJS.enc.Utf8.parse(key);</div><div class="line">  iv = CryptoJS.enc.Utf8.parse(iv);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(str, key, &#123;</div><div class="line">    iv: iv,</div><div class="line">    mode: CryptoJS.mode.CBC,</div><div class="line">    padding: CryptoJS.pad.Pkcs7,</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 转换为字符串</span></div><div class="line">  encrypted = encrypted.toString();</div><div class="line"></div><div class="line">  <span class="comment">// mode 支持 CBC、CFB、CTR、ECB、OFB, 默认 CBC</span></div><div class="line">  <span class="comment">// padding 支持 Pkcs7、AnsiX923、Iso10126</span></div><div class="line">  <span class="comment">// 、NoPadding、ZeroPadding, 默认 Pkcs7, 即 Pkcs5</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> encrypted;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = encrypt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// decrypt.js 解密文件</span></div><div class="line"><span class="keyword">var</span> CryptoJS = <span class="built_in">require</span>(<span class="string">'crypto-js'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> key = config.encrypt.key;</div><div class="line">  <span class="keyword">var</span> iv = config.encrypt.iv;</div><div class="line"></div><div class="line">  key = CryptoJS.enc.Utf8.parse(key);</div><div class="line">  iv = CryptoJS.enc.Utf8.parse(iv);</div><div class="line"></div><div class="line">  <span class="comment">// DES 解密</span></div><div class="line">  <span class="keyword">var</span> decrypted = CryptoJS.AES.decrypt(content, key, &#123;</div><div class="line">    iv: iv,</div><div class="line">    mode: CryptoJS.mode.CBC,</div><div class="line">    padding: CryptoJS.pad.Pkcs7,</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 转换为 utf8 字符串</span></div><div class="line">  decrypted = CryptoJS.enc.Utf8.stringify(decrypted);</div><div class="line">  <span class="keyword">return</span> decrypted;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = decrypt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js webpack 配置</span></div><div class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../../static/info'</span>),</div><div class="line">      to: <span class="string">'static'</span>,</div><div class="line">      transform (content, path) &#123;</div><div class="line">        <span class="keyword">return</span> encrypt(content, path)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// static/info 输入版权信息的静态文件</span></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">  <span class="string">'%c未授权 xxxx公司 版权所有 copyright@2020'</span>,</div><div class="line">  <span class="string">'\n\tfont-size: 16px;\n\tcolor: red;\n'</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 代码中读取加密后的静态文件，解密后执行</span></div><div class="line">axios.get(<span class="string">'static/info'</span>).then(result =&gt; &#123;</div><div class="line">  <span class="built_in">eval</span>(decrypt(result.data));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="方案二：授权安装"><a href="#方案二：授权安装" class="headerlink" title="方案二：授权安装"></a>方案二：授权安装</h2><p>思路：利用 NPM 的 preinstall 钩子，可以在输入 npm install 后，安装包之前，执行一个 Node.js 脚本，在这个脚本中，可以要求用户输入一个 token 到后端进行校验，也可以拿到 mac 地址到后端请求进行验证，也可以拿项目目录下的授权文件，解密后校验，如果可以安装则继续，如果不可以安装则中断安装。</p>
<p>实现代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"><span class="keyword">const</span> getMAC = <span class="built_in">require</span>(<span class="string">'getmac'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出 mac 地址，可做校验</span></div><div class="line"><span class="built_in">console</span>.log(getMAC.default());</div><div class="line"></div><div class="line"><span class="comment">// 读取项目目录下 static/config.json 文件，可做校验</span></div><div class="line"><span class="keyword">const</span> configJSON = <span class="built_in">require</span>(path.resolve(</div><div class="line">  process.cwd(),</div><div class="line">  <span class="string">'../../static/config.json'</span></div><div class="line">));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'===='</span>, configJSON);</div><div class="line"></div><div class="line"><span class="comment">// 用户输入指定信息，可做校验</span></div><div class="line">process.stdout.write(<span class="string">`<span class="subst">$&#123;chalk.cyan('Please input token:')&#125;</span>`</span>);</div><div class="line">process.stdin.on(<span class="string">'data'</span>, (input) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> token = input.toString().trim();</div><div class="line">  <span class="keyword">if</span> (token !== <span class="string">'aaa'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'认证失败，结束安装！'</span>);</div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'认证成功，开始安装...'</span>);</div><div class="line">  process.stdin.pause();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是这种方式还是存在问题，主要问题是在不同环境下执行安装包命令时获取的 mac 地址可能不正确，如在容器中执行，或 CI 的线上环境。而且包一旦被安装了，就在项目的 node_modules 目录下了，一是可以通过拷贝的方式泄露，二是安装到本地后执行解密的代码就泄露了。</p>
<h2 id="方式三：授权运行"><a href="#方式三：授权运行" class="headerlink" title="方式三：授权运行"></a>方式三：授权运行</h2><p>思路：不控制安装，所有人都可以进行安装包的操作，使用时需要给项目一个加密的授权文件，运行时拿到这个授权文件，解密后进行校验，如果正确则向下运行，否则终止运行。这就要求授权文件中被加密的信息要是运行时能拿到的信息，并且具有唯一性，由于客户端是没办法获取 mac 地址的，可以使用域名和时间的方式进行加密。运行时获取授权文件，判断如果是生产环境授权文件，进行域名和端口号的校验，如果是开发环境授权文件，则校验授权日期和过期天数。</p>
<p>生成授权文件时我们向用户要了域名，那用户就知道我们是使用了域名进行校验，肯定有获取域名的代码，在代码中搜索 <code>location.host</code> 很容易定位到进行校验的代码，仔细读读就可以进行破解，因此希望能对这段校验的代码进行加密。我们使用方案一中对静态资源加密的方式，把校验逻辑的代码写在一个静态文件中。注意这里不能把整个校验逻辑写成一个完整的方法放在静态文件中导出使用，因为这个文件没有被 babel 处理，解密后的文件中会存在 import 等浏览器无法识别的关键字。</p>
<p>最后为了使用方便，还需要一个能生成授权文件的脚本。</p>
<p>实现代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// generateLicense.js 生成授权文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"><span class="keyword">var</span> encrypt = <span class="built_in">require</span>(<span class="string">'./encrypt'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * static/license 为加密前的明文文件</div><div class="line"> * 生产环境指定 type 为 production，添加 domains</div><div class="line"> * 开发环境指定 type 为 development，添加 created 创建时间、expired 过期天数</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> buffer = fs.readFileSync(path.resolve(__dirname, <span class="string">'../static/license'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 写入文件，项目根目录下 license，不会被提交</span></div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'./license'</span>);</div><div class="line">ws.write(encrypt(buffer));</div><div class="line">ws.end();</div><div class="line"><span class="built_in">console</span>.log(chalk.green(<span class="string">'已生成 license 文件'</span>));</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js webpack 配置</span></div><div class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../../static/validate'</span>),</div><div class="line">      to: <span class="string">'static'</span>,</div><div class="line">      transform (content, path) &#123;</div><div class="line">        <span class="keyword">return</span> encrypt(content, path)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// 项目入口进行授权校验</span></div><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line"><span class="keyword">let</span> validate = <span class="literal">false</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// 获取授权文件</span></div><div class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.get(<span class="string">'static/license'</span>);</div><div class="line">  <span class="keyword">const</span> FORMAT = <span class="string">'YYYY-MM-DD'</span>;</div><div class="line">  <span class="keyword">const</span> str = decrypt(result.data);</div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(str);</div><div class="line">  <span class="keyword">const</span> nowDate = moment().format(FORMAT);</div><div class="line">  <span class="comment">// 获取加密后的校验逻辑文件，执行校验</span></div><div class="line">  <span class="keyword">const</span> validate = <span class="keyword">await</span> axios.get(<span class="string">'static/validate'</span>)</div><div class="line">  <span class="built_in">eval</span>(decrypt(validate.data));</div><div class="line">&#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">  <span class="built_in">console</span>.error(error);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* eslint-enable */</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!validate) &#123;</div><div class="line">  <span class="comment">// 校验失败处理</span></div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 校验通过，向下运行</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// static/validate 校验逻辑静态文件</span></div><div class="line"><span class="keyword">if</span> (data.type === <span class="string">'production'</span> &amp;&amp; data.domains.includes(<span class="built_in">window</span>.location.host)) &#123;</div><div class="line">  validate = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (data.type === <span class="string">'development'</span>) &#123;</div><div class="line">  <span class="keyword">const</span> expiredDate = moment(data.created, <span class="string">'YYYY-MM-DD'</span>)</div><div class="line">    .add(data.expired, <span class="string">'days'</span>)</div><div class="line">    .format(<span class="string">'YYYY-MM-DD'</span>);</div><div class="line">  <span class="keyword">if</span> (nowDate &lt;= expiredDate) &#123;</div><div class="line">    validate = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NPM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitLab 代码审核]]></title>
      <url>https://zhulichao.github.io/2020/06/12/gitlab-pull-request/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="设置钉钉-GitLab-机器人"><a href="#设置钉钉-GitLab-机器人" class="headerlink" title="设置钉钉 GitLab 机器人"></a>设置钉钉 GitLab 机器人</h2><p>打开钉钉，在需要配置 GitLab 机器人的群中，点击【群设置】→【智能群助手】→【添加机器人】→【GitLab】→【添加】，复制生成的 Webhook 地址备用。</p>
<p>进行如下 GitLab 配置。</p>
<img src="/2020/06/12/gitlab-pull-request/integration.png" title="设置钉钉 webhook">
<h2 id="GitLab-代码审核配置"><a href="#GitLab-代码审核配置" class="headerlink" title="GitLab 代码审核配置"></a>GitLab 代码审核配置</h2><img src="/2020/06/12/gitlab-pull-request/branch.png" title="分支设置">
<img src="/2020/06/12/gitlab-pull-request/merge-request.png" title="设置 merge request">
<p>开发人员创建一个 merge request，然后线下 @审核人 进行代码审核，添加评论，开发人员解决评论中的问题，重复这个步骤直至所有评论解决后，线下 @Maintainer 进行合并。</p>
<p>代码审核要求：</p>
<ul>
<li>格式规范</li>
<li>变量名称要是单词，符合语义</li>
<li>局部逻辑，尽量简化</li>
<li>复杂逻辑要补充注释</li>
<li>一个组件不要写的太复杂，适当拆分</li>
<li>公共模块需要提取</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VSCode 插件]]></title>
      <url>https://zhulichao.github.io/2020/06/12/vscode-plugin/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="external">Auto Close Tag</a> 自动闭合 HTML 标签</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="external">Auto Rename Tag</a> 自动修改匹配的标签</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=JerryHong.autofilename" target="_blank" rel="external">AutoFileName</a> 输入的文件路径的智能补全</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete" target="_blank" rel="external">Path Autocomplete</a> 文件路径补全，可设置别名</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="external">Path Intellisense</a> 文件路径补全</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments" target="_blank" rel="external">Better Comments</a> 美化注释</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="external">Bracket Pair Colorizer</a> 为括号提供颜色高亮</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" target="_blank" rel="external">Code Spell Checker</a> 拼写检查</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight" target="_blank" rel="external">Color Highlight</a> 颜色值在代码中高亮显示</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="external">Document This</a> 注释文档生成</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv" target="_blank" rel="external">DotENV</a> DotENV 插件</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="external">EditorConfig for VS Code</a> EditorConfig 插件</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external">ESLint</a> ESLint 插件，高亮提示</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="external">Git History</a> 查看 Git log</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="external">gitignore</a> 更好的使用 gitignore</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">GitLens — Git supercharged</a> 显示当前行commit信息</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow" target="_blank" rel="external">indent-rainbow</a> 突出显示代码缩进</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="external">markdownlint</a> markdown 格式检查</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank" rel="external">Material Icon Theme</a> 设置文件图标</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="external">Polacode</a> 代码截图工具</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="external">Prettier - Code formatter</a> Prettier 插件</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="external">stylelint</a> stylelint 插件</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines" target="_blank" rel="external">Sort lines</a> 排序选中行</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="external">Vetur</a> Vue 语法高亮</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode" target="_blank" rel="external">Visual Studio IntelliCode</a> 代码智能提示</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=peakchen90.vue-beautify" target="_blank" rel="external">vue-beautify</a> vue 格式化</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=shenjiaolong.vue-helper" target="_blank" rel="external">vue-helper</a> Vue2 代码片段</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">Settings Sync</a> 设置同步</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=jasonnutter.search-node-modules" target="_blank" rel="external">Search node_modules</a> 搜索node_modules下目录</p>
<h2 id="Settings-Sync-使用"><a href="#Settings-Sync-使用" class="headerlink" title="Settings Sync 使用"></a>Settings Sync 使用</h2><h3 id="上传设置"><a href="#上传设置" class="headerlink" title="上传设置"></a>上传设置</h3><ul>
<li>需要 GitHub 账号</li>
<li>安装 Settings Sync 插件</li>
<li>cmd + shift + p，输入 Sync:Advanced Options，LOGIN WITH GITHUB</li>
<li><a href="https://github.com/settings/tokens" target="_blank" rel="external">生成 Github Token</a></li>
<li>Gist ID，输入上步获取的 Token</li>
<li>cmd + shift + p，输入 Sync:Upload/Update Settings 上传设置</li>
</ul>
<h3 id="下载设置"><a href="#下载设置" class="headerlink" title="下载设置"></a>下载设置</h3><ul>
<li>cmd + shift + p，输入 Sync:Advanced Options，LOGIN WITH GITHUB</li>
<li>输入 Gist ID 和 获取令牌</li>
<li>cmd + shift + p，输入 Sync:Download Settings 下载设置</li>
<li>若未下载成功，多尝试几次，注意确认 Gist ID 和 获取令牌是否正确</li>
</ul>
]]></content>
      
        <categories>
            
            <category> VSCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSZip 简单使用]]></title>
      <url>https://zhulichao.github.io/2020/06/12/jszip/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/Stuk/jszip" target="_blank" rel="external">JSZip</a> 是一个用于创建、读取和编辑.zip文件的JavaScript库，且API的使用也很简单。如下是使用 JSZip 压缩一个文件夹到指定目录的例子。</p>
<p>zip.js 文件中内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">let</span> JsZip = <span class="built_in">require</span>(<span class="string">'jszip'</span>);</div><div class="line"><span class="keyword">let</span> zip = <span class="keyword">new</span> JsZip();</div><div class="line"></div><div class="line"><span class="comment">// 读取目录及文件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readDir</span>(<span class="params">obj, nowPath, nowFolder</span>) </span>&#123;</div><div class="line">  <span class="comment">// 读取目录中的所有文件及文件夹</span></div><div class="line">  <span class="keyword">let</span> files = fs.readdirSync(nowPath);</div><div class="line">  files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fileName, index</span>) </span>&#123;</div><div class="line">    <span class="comment">// 遍历检测目录中的文件</span></div><div class="line">    <span class="keyword">let</span> fillPath = nowPath + <span class="string">'/'</span> + fileName;</div><div class="line">    <span class="keyword">let</span> file = fs.statSync(fillPath);</div><div class="line">    <span class="keyword">if</span> (file.isDirectory()) &#123;</div><div class="line">      <span class="comment">// 如果是目录的话，继续查询</span></div><div class="line">      <span class="keyword">let</span> folder = nowFolder + <span class="string">'/'</span> + fileName;</div><div class="line">      <span class="comment">// 压缩对象中生成该目录</span></div><div class="line">      <span class="keyword">let</span> dirList = zip.folder(folder);</div><div class="line">      <span class="comment">// 重新检索目录文件</span></div><div class="line">      readDir(dirList, fillPath, folder);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果是文件压缩目录添加文件</span></div><div class="line">      obj.file(fileName, fs.readFileSync(fillPath));</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 开始压缩文件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startZIP</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> currPath = __dirname;</div><div class="line">  <span class="comment">// 要压缩的文件夹目录</span></div><div class="line">  <span class="keyword">var</span> sourceDir = path.join(currPath, <span class="string">'../../dist:source/'</span>);</div><div class="line">  <span class="comment">// 生成压缩包的目录</span></div><div class="line">  <span class="keyword">var</span> targetDir = path.join(currPath, <span class="string">'../../dist:app/static/source.zip'</span>);</div><div class="line">  readDir(zip, sourceDir, <span class="string">''</span>);</div><div class="line">  zip</div><div class="line">    .generateAsync(&#123;</div><div class="line">      type: <span class="string">'nodebuffer'</span>,</div><div class="line">      compression: <span class="string">'DEFLATE'</span>,</div><div class="line">      compressionOptions: &#123;</div><div class="line">        level: <span class="number">9</span>,</div><div class="line">      &#125;,</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</div><div class="line">      fs.writeFileSync(targetDir, content, <span class="string">'utf-8'</span>);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'压缩完成'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">startZIP();</div></pre></td></tr></table></figure>
<p>命令：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node zip.js</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack 打包]]></title>
      <url>https://zhulichao.github.io/2020/06/12/webpack-build/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装包后自动将文件从软件包复制到本地目录"><a href="#安装包后自动将文件从软件包复制到本地目录" class="headerlink" title="安装包后自动将文件从软件包复制到本地目录"></a>安装包后自动将文件从软件包复制到本地目录</h2><p>npm 的 postinstall 脚本会在安装完包后自动执行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"postinstall"</span>: <span class="string">"node bin/copy.js"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="webpack-打包后可通过-import-引入、script-标签引入"><a href="#webpack-打包后可通过-import-引入、script-标签引入" class="headerlink" title="webpack 打包后可通过 import 引入、script 标签引入"></a>webpack 打包后可通过 import 引入、script 标签引入</h2><ul>
<li><code>output.libraryTarget</code> 打包类库的发布模式，使用 <code>umd</code> 可通过 <code>import</code> 方式引入</li>
<li><code>output.library</code> 为导出的库指定义一个全局使用的名称变量，主要用于直接引用的方式，如用 script 标签</li>
<li><code>output.libraryExport</code> 库中被导出的项，如对外暴露 default 属性，就可以直接调用 default 里的属性</li>
</ul>
<p>配置以下内容即可实现 webpack 打包后的包可通过 import 和 script 标签引入。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">  path: config.buildSource.assetsRoot,</div><div class="line">  filename: <span class="string">'index.js'</span>,</div><div class="line">  libraryTarget: <span class="string">'umd'</span>,</div><div class="line">  libraryExport: <span class="string">'default'</span>,</div><div class="line">  library: config.buildSource.name,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import 方式</span></div><div class="line"><span class="keyword">import</span> Library <span class="keyword">from</span> <span class="string">'lib'</span>;</div><div class="line"></div><div class="line"><span class="comment">// script 标签方式</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;</div><div class="line">    &lt;link rel="stylesheet" href="./lib.css"/&gt;</div><div class="line">    &lt;script src="./lib.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;title&gt;测试包引入&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id="app"&gt;&lt;/div&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">      const viewer = new Library.App.Viewer("app");</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="添加对下载时需要的静态资源的处理，下载页面"><a href="#添加对下载时需要的静态资源的处理，下载页面" class="headerlink" title="添加对下载时需要的静态资源的处理，下载页面"></a>添加对下载时需要的静态资源的处理，下载页面</h2><p>类库提供了下载链接可直接下载使用，这就需要维护所有版本的下载压缩包，放在指定的文件夹中，在 webpack.config.js 中，通过 node 的 fs 模块读取文件夹中的文件列表，放到一个变量中，再通过 webpack.DefinePlugin 暴露成全局变量，页面中就可以取到压缩文件列表了。注意，在项目启动后修改下载列表中的文件需要重启。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> files = fs.readdirSync(path.join(__dirname, <span class="string">'../../static/app/source/'</span>));</div><div class="line">files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (fileName.endsWith(<span class="string">'.zip'</span>)) &#123;</div><div class="line">    sourceZipList.push(fileName);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">    <span class="string">'sourceZipList'</span>: <span class="built_in">JSON</span>.stringify(sourceZipList),</div><div class="line">  &#125;),</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSDoc javascript 注释]]></title>
      <url>https://zhulichao.github.io/2020/06/12/jsdoc/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/jsdoc/jsdoc" target="_blank" rel="external">JSDoc</a> 是根据 JavaScript 文件中的注释信息，生成静态文件的工具，使用简单方便。</p>
<p><a href="https://jsdoc.app/" target="_blank" rel="external">JSDoc 官方文档</a><br><a href="https://jsdoc.zcopy.site/" target="_blank" rel="external">JSDoc 中文文档</a></p>
<p>在使用 JSDoc 时，发现无法定义指向项目内的链接。<code>@link</code> 和 <code>@see</code> 语法创建内联标签连接到文档中的其它项 或 外部URL，无法使用相对路径连接到项目内的地址，但可以通过自定义插件实现该功能。</p>
<p>plugins/demo.js 文件中内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// demo&#123;/#/cesium|参考样例&#125;</span></div><div class="line">exports.handlers = &#123;</div><div class="line">  beforeParse: (e) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> result = e.source.match(<span class="regexp">/demo\&#123;[^\&#125;]+\&#125;/</span>);</div><div class="line">    <span class="keyword">if</span> (result &amp;&amp; result[<span class="number">0</span>]) &#123;</div><div class="line">      <span class="keyword">const</span> value = result[<span class="number">0</span>].replace(<span class="string">'demo&#123;'</span>, <span class="string">''</span>).replace(<span class="string">'&#125;'</span>, <span class="string">''</span>).split(<span class="string">'|'</span>);</div><div class="line">      <span class="keyword">if</span> (value &amp;&amp; value.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        e.source = e.source.replace(result[<span class="number">0</span>], <span class="string">`&lt;a href="<span class="subst">$&#123;value[0]&#125;</span>"&gt;<span class="subst">$&#123;value[1]&#125;</span>&lt;/a&gt;`</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>conf.json 文件中内容如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"plugins/demo"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>命令</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsdoc -c conf.json source<span class="comment">/**/</span>* -d <span class="keyword">static</span>/doc</div></pre></td></tr></table></figure>
<img src="/2020/06/12/jsdoc/jsdoc.png" title="样例">
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-Module]]></title>
      <url>https://zhulichao.github.io/2020/05/22/es6-module/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西，导致完全没办法在编译时做“静态优化”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CommonJS 模块就是对象，输入时必须查找对象属性。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象。</span></div><div class="line"><span class="keyword">let</span> &#123; stat, exists, readfile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">let</span> stat = _fs.stat;</div><div class="line"><span class="keyword">let</span> exists = _fs.exists;</div><div class="line"><span class="keyword">let</span> readfile = _fs.readfile;</div><div class="line"></div><div class="line"><span class="comment">// ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，再通过 import 命令输入指定方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载。</span></div><div class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</div></pre></td></tr></table></figure>
<p>ES6 模块还有以下好处：</p>
<ul>
<li>静态加载</li>
<li>不再需要 UMD 模块格式了，将来服务器和浏览器都会支持 ES6 模块格式</li>
<li>将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者 <code>navigator</code> 对象的属性</li>
<li>不再需要对象作为命名空间（比如 Math 对象），未来这些功能可以通过模块提供</li>
</ul>
<p>模块功能主要由两个命令构成：<code>export</code> 和 <code>import</code>。<code>export</code> 命令用于规定模块的对外接口，<code>import</code> 命令用于输入其他模块提供的功能。<code>import</code> 和 <code>export</code> 命令只能在模块的顶层，不能在代码块之中。</p>
<p><code>export</code> 命令用于规定模块的对外接口，必须与模块内部的变量建立一一对应关系，<code>export</code> 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。<code>export</code> 命令可以出现在模块的任何位置，只要处于模块顶层就可以。可以用 <code>as</code> 重命名，可以用不同的名字输出两次。<code>export default</code> 命令，为模块指定默认输出，一个模块只能有一个默认输出，<code>export default</code> 就是输出一个叫做 <code>default</code> 的变量或方法，然后系统允许你为它取任意名字。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  firstName <span class="keyword">as</span> f,</div><div class="line">  lastName <span class="keyword">as</span> l,</div><div class="line">  lastName <span class="keyword">as</span> L</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 默认输出</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 因为 export default 命令的本质是将后面的值，赋给 default 变量，所以可以直接将一个值写在 export default 之后</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</div></pre></td></tr></table></figure>
<p><code>import</code> 命令用于输入其他模块提供的功能。如果想为输入的变量重新取一个名字，<code>import</code> 命令要使用 <code>as</code> 关键字，将输入的变量重命名。<code>import</code> 命令输入的变量都是只读的，因为它的本质是输入接口。如果输入的变量是一个对象，改写属性是允许的。<code>import</code> 命令具有提升效果，会提升到整个模块的头部，首先执行。由于 <code>import</code> 是静态执行，所以不能使用表达式和变量、if 语句，这些只有在运行时才能得到结果的语法结构。<code>import</code> 语句会执行所加载的模块。如果多次重复执行同一句 <code>import</code> 语句，那么只会执行一次，而不会执行多次。除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面，这个对象应该是可以静态分析的，所以不允许运行时改变。加载默认模块时，<code>import</code> 命令可以为该匿名函数指定任意名字。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"><span class="comment">// 加载默认输出</span></div><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</div></pre></td></tr></table></figure>
<p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code> 语句可以与 <code>export</code> 语句写在一起。但需要注意的是，写成一行以后，<code>foo</code> 和 <code>bar</code> 实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用 <code>foo</code> 和 <code>bar</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> myFoo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"><span class="comment">// 忽略 my_module 模块的 default 方法</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">"mod"</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">"mod"</span>;</div><div class="line"><span class="keyword">export</span> &#123;ns&#125;;</div></pre></td></tr></table></figure>
<p>ES2020提案 引入 <code>import()</code> 函数，支持动态加载模块。<code>import</code> 命令能够接受什么参数，<code>import()</code> 函数就能接受什么参数，两者区别主要是后者为动态加载。<code>import()</code> 返回一个 <code>Promise</code> 对象。 <code>import()</code> 函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。<code>import()</code> 函数与所加载的模块没有静态连接关系，这点也是与 <code>import</code> 语句不相同。<code>import()</code> 类似于 Node 的 <code>require</code> 方法，区别主要是前者是异步加载，后者是同步加载。<code>import()</code> 适用于按需加载、条件加载、动态的模块路径。<code>import()</code> 加载模块成功以后，这个模块会作为一个对象，当作 <code>then</code> 方法的参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">'main'</span>);</div><div class="line"></div><div class="line"><span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</div><div class="line">  .then(<span class="built_in">module</span> =&gt; &#123;</div><div class="line">    <span class="built_in">module</span>.loadPageInto(main);</div><div class="line">  &#125;)</div><div class="line">  .catch(err =&gt; &#123;</div><div class="line">    main.textContent = err.message;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>HTML 网页中，浏览器通过 <code>&lt;script&gt;</code> 标签加载 JavaScript 脚本，默认情况下，浏览器是同步加载 JavaScript 脚本。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>defer</code> 与 <code>async</code> 的区别是：<code>defer</code> 要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code> 一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，<code>defer</code> 是“渲染完再执行”，<code>async</code> 是“下载完就执行”。另外，如果有多个 <code>defer</code> 脚本，会按照它们在页面出现的顺序加载，而多个 <code>async</code> 脚本是不能保证加载顺序的。</p>
<p>浏览器加载 ES6 模块，也使用 <code>&lt;script&gt;</code> 标签，但是要加入 <code>type=&quot;module&quot;</code> 属性。浏览器对于带有 <code>type=&quot;module&quot;</code> 的 <code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了 <code>&lt;script&gt;</code> 标签的 <code>defer</code> 属性。<code>&lt;script&gt;</code> 标签的 <code>async</code> 属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。模块脚本自动采用严格模式，不管有没有声明use strict。模块之中，顶层的 <code>this</code> 关键字返回 <code>undefined</code>，而不是指向 <code>window</code>。也就是说，在模块顶层使用 <code>this</code> 关键字，是无意义的。同一个模块如果加载多次，将只执行一次。<strong>利用顶层的 <code>this</code> 等于 <code>undefined</code> 这个语法点，可以侦测当前代码是否在 ES6 模块之中。</strong></p>
<p>ES6 模块与 CommonJS 模块完全不同：</p>
<ul>
<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用</li>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li>
</ul>
<p>Node.js 要求，<code>.mjs</code> 文件总是以 ES6 模块加载，<code>.cjs</code> 文件总是以 CommonJS 模块加载，<code>.js</code> 文件的加载取决于 <code>package.json</code> 里面 <code>type</code> 字段的设置，取值为 <code>module</code> 或 <code>commonjs</code>。</p>
<p><code>package.json</code> 文件有两个字段可以指定模块的入口文件：<code>main</code> 和 <code>exports</code>，<code>exports</code> 字段的优先级高于 <code>main</code> 字段。<code>exports</code> 有多种用法：</p>
<ul>
<li>可以指定脚本或子目录的别名</li>
<li>别名如果是<code>.</code>，就代表模块的主入口，优先级高于 <code>main</code> 字段，可以简写成 <code>exports</code>字段的值</li>
<li>条件加载，利用 <code>.</code> 这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指定脚本或子目录的别名</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"exports"</span>: &#123;</div><div class="line">    <span class="string">"./submodule"</span>: <span class="string">"./src/submodule.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">import</span> submodule <span class="keyword">from</span> <span class="string">'es-module-package/submodule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 模块的主入口</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"exports"</span>: &#123;</div><div class="line">    <span class="string">"."</span>: <span class="string">"./main.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"exports"</span>: <span class="string">"./main.js"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 条件加载</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"type"</span>: <span class="string">"module"</span>,</div><div class="line">  <span class="string">"exports"</span>: &#123;</div><div class="line">    <span class="string">"."</span>: &#123;</div><div class="line">      <span class="string">"require"</span>: <span class="string">"./main.cjs"</span>,</div><div class="line">      <span class="string">"default"</span>: <span class="string">"./main.js"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 等同于，如果同时还有其他别名，就不能采用简写</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"exports"</span>: &#123;</div><div class="line">    <span class="string">"require"</span>: <span class="string">"./main.cjs"</span>,</div><div class="line">    <span class="string">"default"</span>: <span class="string">"./main.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CommonJS 的一个模块，就是一个脚本文件。<code>require</code> 命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象，以后需要用到这个模块的时候，就会到这个对象上面取值，即使再次执行 <code>require</code> 命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。CommonJS 模块的重要特性是加载时执行，即脚本代码在 <code>require</code> 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line">exports.done = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 a.js 之中，b.done = %j'</span>, b.done);</div><div class="line">exports.done = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 执行完毕'</span>);</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line">exports.done = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 b.js 之中，a.done = %j'</span>, a.done);</div><div class="line">exports.done = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 执行完毕'</span>);</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 main.js 之中, a.done=%j, b.done=%j'</span>, a.done, b.done);</div><div class="line"></div><div class="line"><span class="comment">// 在 b.js 之中，a.done = false</span></div><div class="line"><span class="comment">// b.js 执行完毕</span></div><div class="line"><span class="comment">// 在 a.js 之中，b.done = true</span></div><div class="line"><span class="comment">// a.js 执行完毕</span></div><div class="line"><span class="comment">// 在 main.js 之中, a.done=true, b.done=true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.mjs</span></div><div class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a.mjs'</span>);</div><div class="line"><span class="built_in">console</span>.log(bar);</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.mjs</span></div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b.mjs'</span>);</div><div class="line"><span class="built_in">console</span>.log(foo);</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> bar = <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// $ node --experimental-modules a.mjs</span></div><div class="line"><span class="comment">// b.mjs</span></div><div class="line"><span class="comment">// ReferenceError: foo is not defined</span></div></pre></td></tr></table></figure>
<p>ES6 处理循环加载时，首先，执行 <code>a.mjs</code> 以后，引擎发现它加载了 <code>b.mjs</code>，因此会优先执行 <code>b.mjs</code>，然后再执行 <code>a.mjs</code>。接着，执行 <code>b.mjs</code> 的时候，已知它从 <code>a.mjs</code> 输入了 <code>foo</code> 接口，这时不会去执行 <code>a.mjs</code>，而是认为这个接口已经存在了，继续往下执行。执行到第三行 <code>console.log(foo)</code> 的时候，才发现这个接口根本没定义，因此报错。解决这个问题的方法，就是让 <code>b.mjs</code> 运行的时候，<code>foo</code> 已经有定义了，这可以通过将 <code>foo</code> 写成函数来解决，因为函数具有提升作用。</p>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-Class]]></title>
      <url>https://zhulichao.github.io/2020/05/22/es6-class/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Class-的基本语法"><a href="#Class-的基本语法" class="headerlink" title="Class 的基本语法"></a>Class 的基本语法</h2><p>ECMAScript 的原生构造函数大致有下面这些：</p>
<ul>
<li>Boolean()</li>
<li>Number()</li>
<li>String()</li>
<li>Array()</li>
<li>Date()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Error()</li>
<li>Object()</li>
</ul>
<p>ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">// 实例属性也可以定义在类的最顶层</span></div><div class="line">  x = <span class="number">0</span>;</div><div class="line">  y = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 一个类必须有 constructor 方法，如果没有显式定义，一个空的 constructor 方法会被默认添加</span></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get prop() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span> + value);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 类的属性名可以采用表达式</span></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// Point.prototype = &#123;</span></div><div class="line"><span class="comment">//   constructor() &#123;&#125;,</span></div><div class="line"><span class="comment">//   toString() &#123;&#125;,</span></div><div class="line"><span class="comment">// &#125;;</span></div><div class="line"></div><div class="line"><span class="comment">// 类必须使用 new 调用</span></div><div class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">point.prop = <span class="number">123</span>; <span class="comment">// setter: 123</span></div><div class="line">point.prop; <span class="comment">// 'getter'</span></div><div class="line">point.toString(); <span class="comment">// (2,3)</span></div><div class="line"></div><div class="line"><span class="comment">// ES6 的类，完全可以看作构造函数的另一种写法</span></div><div class="line">Point === Point.prototype.constructor <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 在类的实例上面调用方法，其实就是调用原型上的方法</span></div><div class="line">point.constructor === Point.prototype.constructor <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// prototype 对象的 constructor 属性，直接指向“类”的本身，与 ES5 是一致的</span></div><div class="line">Point.prototype.constructor === Point <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 类的内部所有定义的方法，都是不可枚举的，与 ES5 不一致</span></div><div class="line"><span class="built_in">Object</span>.keys(Point.prototype) <span class="comment">// []</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype)<span class="comment">// ["constructor","toString"]</span></div><div class="line"></div><div class="line"><span class="comment">// 实例的属性除非显式定义在其本身（this对象上），否则都是定义在原型上（class上）</span></div><div class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></div><div class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></div><div class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 类的所有实例共享一个原型对象</span></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line">p1.__proto__ === p2.__proto__ <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 存值函数和取值函数是设置在属性的 Descriptor 对象上的</span></div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(</div><div class="line">  Point.prototype, <span class="string">"prop"</span></div><div class="line">);</div><div class="line"><span class="string">"get"</span> <span class="keyword">in</span> descriptor  <span class="comment">// true</span></div><div class="line"><span class="string">"set"</span> <span class="keyword">in</span> descriptor  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>类的所有实例共享一个原型对象，这也意味着，可以通过实例的 <code>__proto__</code> 属性为“类”添加方法。<code>__proto__</code> 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。使用实例的 <code>__proto__</code> 属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。生产环境中，我们可以使用 <code>Object.getPrototypeOf</code> 方法来获取实例对象的原型，然后再来为原型添加方法/属性。</p>
<p>与函数一样，类也可以使用表达式的形式定义，如下。需要注意的是，这个类的名字是 <code>Me</code>，但是 <code>Me</code> 只在 <code>Class</code> 的内部可用，指代当前类。在 <code>Class</code> 外部，这个类只能用 <code>MyClass</code> 引用。如果类的内部没用到的话，可以省略 <code>Me</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</div><div class="line">  getClassName() &#123;</div><div class="line">    <span class="keyword">return</span> Me.name;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</div><div class="line">inst.getClassName() <span class="comment">// Me</span></div><div class="line"></div><div class="line"><span class="comment">// 采用 Class 表达式，可以写出立即执行的 Class</span></div><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayName() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="string">'张三'</span>);</div><div class="line"></div><div class="line">person.sayName(); <span class="comment">// "张三"</span></div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>类和模块的内部，默认就是严格模式，考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式</li>
<li>类不存在变量提升（hoist），这一点与 ES5 完全不同</li>
<li><code>name</code> 属性总是返回紧跟在 <code>class</code> 关键字后面的类名</li>
<li>如果某个方法之前加上星号（*），就表示该方法是一个 <code>Generator</code> 函数</li>
<li>类的方法内部如果含有 <code>this</code>，它默认指向类的实例。但是，一旦单独使用该方法，很可能报错，可以在构造方法中绑定 <code>this</code> 或者使用箭头函数来解决</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">  printName(name = <span class="string">'there'</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print(text) &#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</div><div class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</div><div class="line">printName(); <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></div></pre></td></tr></table></figure>
<p>如果在一个方法前，加上 <code>static</code> 关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="comment">// 提案，静态属性</span></div><div class="line">  <span class="keyword">static</span> myStaticProp = <span class="number">42</span>;</div><div class="line">  <span class="comment">// 静态方法</span></div><div class="line">  <span class="keyword">static</span> classMethod() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 如果静态方法包含this关键字，这个this指的是类，而不是实例，静态方法可以与非静态方法重名</span></div><div class="line">  <span class="keyword">static</span> bar() &#123;</div><div class="line">    <span class="keyword">this</span>.baz();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> baz() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  baz() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.classMethod() <span class="comment">// 'hello'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</div><div class="line">foo.classMethod() <span class="comment">// TypeError: foo.classMethod is not a function</span></div><div class="line">Foo.bar() <span class="comment">// hello</span></div><div class="line"></div><div class="line"><span class="comment">// 父类的静态方法，可以被子类继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> classMethod() &#123;</div><div class="line">    <span class="comment">// 静态方法也是可以从 super 对象上调用的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.classMethod() + <span class="string">', too'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Bar.bar() <span class="comment">// 'hello'</span></div><div class="line">Bar.classMethod() <span class="comment">// "hello, too"</span></div><div class="line"></div><div class="line"><span class="comment">// 静态属性</span></div><div class="line">Foo.prop = <span class="number">1</span>;</div><div class="line">Foo.prop <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>私有方法和私有属性， ES6 不提供，只能通过变通方法模拟实现。私有属性和私有方法前面，也可以加上 <code>static</code> 关键字，表示这是一个静态的私有属性或私有方法，只能在类的内部调用。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class IncreasingCounter &#123;</div><div class="line">  // 在命名上加以区别</div><div class="line">  _count = 0;</div><div class="line">  // 提案</div><div class="line">  #count = 0;</div><div class="line">  get value() &#123;</div><div class="line">    console.log('Getting the current value!');</div><div class="line">    return this.#count;</div><div class="line">  &#125;</div><div class="line">  increment() &#123;</div><div class="line">    this.#count++;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 私有属性不限于从 this 引用，只要是在类的内部，实例也可以引用私有属性</div><div class="line">class Foo &#123;</div><div class="line">  #privateValue = 42;</div><div class="line">  static getPrivateValue(foo) &#123;</div><div class="line">    return foo.#privateValue;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.getPrivateValue(new Foo()); // 42</div></pre></td></tr></table></figure>
<p>ES6 为 <code>new</code> 命令引入了一个 <code>new.target</code> 属性，该属性一般用在构造函数之中，返回 <code>new</code> 命令作用于的那个构造函数。如果构造函数不是通过 <code>new</code> 命令或 <code>Reflect.construct()</code> 调用的，<code>new.target</code> 会返回 <code>undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">new</span>.target === Person) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须使用 new 命令生成实例'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>); <span class="comment">// 正确</span></div><div class="line"><span class="keyword">var</span> notAPerson = Person.call(person, <span class="string">'张三'</span>);  <span class="comment">// 报错</span></div><div class="line"></div><div class="line"><span class="comment">// Class 内部调用 new.target，返回当前 Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(length, width) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target === Rectangle);</div><div class="line">    <span class="keyword">this</span>.length = length;</div><div class="line">    <span class="keyword">this</span>.width = width;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 输出 true</span></div><div class="line"></div><div class="line"><span class="comment">// 子类继承父类时，new.target 会返回子类，利用这个特点，可以写出不能独立使用、必须继承后才能使用的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(length, width) &#123;</div><div class="line">    <span class="keyword">super</span>(length, width);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Square(<span class="number">3</span>); <span class="comment">// 输出 false</span></div></pre></td></tr></table></figure>
<h2 id="Class-的继承"><a href="#Class-的继承" class="headerlink" title="Class 的继承"></a>Class 的继承</h2><p>Class 可以通过 <code>extends</code> 关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。父类的静态方法，也会被子类继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的 constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的 toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> cp = <span class="keyword">new</span> ColorPoint(<span class="number">25</span>, <span class="number">8</span>, <span class="string">'green'</span>);</div><div class="line"></div><div class="line">cp <span class="keyword">instanceof</span> ColorPoint <span class="comment">// true</span></div><div class="line">cp <span class="keyword">instanceof</span> Point <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// Object.getPrototypeOf 方法可以用来从子类上获取父类，可以使用这个方法判断，一个类是否继承了另一个类</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorPoint) === Point <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法，否则新建实例时会报错。这是因为子类自己的 <code>this</code> 对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 <code>super</code> 方法，子类就得不到 <code>this</code> 对象。ES5 的继承，实质是先创造子类的实例对象 <code>this</code>，然后再将父类的方法添加到 <code>this</code> 上面 <code>（Parent.apply(this)）</code>。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 <code>this</code> 上面（所以必须先调用<code>super</code> 方法），然后再用子类的构造函数修改 <code>this</code>。</p>
<p>如果子类没有定义 <code>constructor</code> 方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有 <code>constructor</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">    <span class="comment">// 只有调用 super 之后，才可以使用 this 关键字</span></div><div class="line">    <span class="keyword">super</span>(...args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>super</code> 这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。使用 <code>super</code> 的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。第一种情况，<code>super</code> 作为函数调用时，代表父类的构造函数，<code>super()</code> 只能用在子类的构造函数之中。ES6 要求，子类的构造函数必须执行一次 <code>super</code> 函数，<code>super</code> 虽然代表了父类的构造函数，但是返回的是子类的实例。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> A() <span class="comment">// A</span></div><div class="line"><span class="keyword">new</span> B() <span class="comment">// B</span></div></pre></td></tr></table></figure>
<p>第二种情况，<code>super</code> 作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。ES6 规定，在子类普通方法中通过 <code>super</code> 调用父类的方法时，方法内部的 <code>this</code> 指向当前的子类实例。由于 <code>this</code> 指向子类实例，所以如果通过 <code>super</code> 对某个属性赋值，这时 <code>super</code> 就是 <code>this</code>，赋值的属性会变成子类实例的属性。在子类的静态方法中通过 <code>super</code> 调用父类的方法时，方法内部的 <code>this</code> 指向当前的子类，而不是子类的实例。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</div><div class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></div><div class="line">  &#125;</div><div class="line">  m() &#123;</div><div class="line">    <span class="keyword">super</span>.print();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    <span class="keyword">super</span>.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div><div class="line">b.m() <span class="comment">// 2</span></div><div class="line"></div><div class="line">B.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</div><div class="line">b.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></div></pre></td></tr></table></figure>
<p>大多数浏览器的 ES5 实现之中，每一个对象都有 <code>__proto__</code> 属性，指向对应的构造函数的 <code>prototype</code> 属性。Class 作为构造函数的语法糖，同时有 <code>prototype</code> 属性和 <code>__proto__</code> 属性，因此同时存在两条继承链：</p>
<ul>
<li>子类的 <code>__proto__</code> 属性，表示构造函数的继承，总是指向父类</li>
<li>子类 <code>prototype</code> 属性的 <code>__proto__</code> 属性，表示方法的继承，总是指向父类的 <code>prototype</code> 属性</li>
</ul>
<p>这两条继承链，可以这样理解：作为一个对象，子类（B）的原型（<code>__proto__</code> 属性）是父类（A）；作为一个构造函数，子类（B）的原型对象（<code>prototype</code> 属性）是父类的原型对象（<code>prototype</code> 属性）的实例。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">// true</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// B 的实例继承 A 的实例</span></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.prototype.__proto__ = A.prototype;</div><div class="line"><span class="comment">// B 继承 A 的静态属性</span></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">B.__proto__ = A;</div></pre></td></tr></table></figure>
<p><code>extends</code> 关键字后面可以跟多种类型的值，只要是一个有 <code>prototype</code> 属性的函数，就能被继承.由于函数都有 <code>prototype</code> 属性（除了 <code>Function.prototype</code> 函数），因此可以继承任意函数，还可以用来继承原生的构造函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子类继承 Object 类，A其实就是构造函数 Object 的复制，A的实例就是 Object 的实例</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 不存在任何继承，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承 Function.prototype。但是，A调用后返回一个空对象（即Object实例），所以 A.prototype.__proto__ 指向构造函数（Object）的 prototype 属性</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>子类实例的 <code>__proto__</code> 属性的 <code>__proto__</code> 属性，指向父类实例的 <code>__proto__</code> 属性。也就是说，子类的原型的原型，是父类的原型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> ColorPoint(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'red'</span>);</div><div class="line"></div><div class="line">p2.__proto__ === p1.__proto__ <span class="comment">// false</span></div><div class="line">p2.__proto__.__proto__ === p1.__proto__ <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>以前，这些原生构造函数是无法继承的，比如，不能自己定义一个 <code>Array</code> 的子类，因为这个类的行为与 <code>Array</code> 完全不一致，子类无法获得原生构造函数的内部属性，通过 <code>Array.apply()</code> 或者分配给原型对象都不行。原生构造函数会忽略 <code>apply</code> 方法传入的 <code>this</code>，也就是说，原生构造函数的 <code>this</code> 无法绑定，导致拿不到内部属性。ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象 <code>this</code>，然后再用子类的构造函数修饰 <code>this</code>，使得父类的所有行为都可以继承，这是 ES5 无法做到的。</p>
<p>注意，继承 <code>Object</code> 的子类，有一个行为差异。下面代码中，<code>NewObj</code> 继承了 <code>Object</code>，但是无法通过 <code>super</code> 方法向父类 <code>Object</code> 传参。这是因为 ES6 改变了 <code>Object</code> 构造函数的行为，一旦发现 <code>Object</code> 方法不是通过 <code>new Object()</code> 这种形式调用，ES6 规定 <code>Object</code> 构造函数会忽略参数。</p>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Saber 学习总结]]></title>
      <url>https://zhulichao.github.io/2020/03/23/saber/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Saber 是 SpringBlade 前端 UI 框架，主要选型技术为 Vue、Vuex、Avue、Element UI，项目基于 Vue CLI 构建。</p>
<p><a href="https://saber.bladex.vip/#/login" target="_blank" rel="external">Saber 在线演示地址</a></p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>参考 <a href="https://www.kancloud.cn/smallchill/saber" target="_blank" rel="external">Saber开发手册</a>、<a href="/2020/03/23/saber-base/">Saber 基础</a> 搭建前后端环境，后端项目 SpringBlade 是 SpringCloud 微服务架构，搭建比较复杂，可使用 SpringBlade boot 版，<strong>目前测试代码生成的功能只有在 boot 版才能跑通</strong>。</p>
<p><a href="https://gitee.com/smallc/Saber?_from=gitee_search" target="_blank" rel="external">Saber 项目地址</a></p>
<p><a href="https://gitee.com/smallc/SpringBlade" target="_blank" rel="external">SpringBlade 项目地址</a></p>
<p><a href="https://gitee.com/smallc/SpringBlade/tree/2.0-boot/" target="_blank" rel="external">SpringBlade boot 项目地址</a></p>
<h2 id="集成代码校验"><a href="#集成代码校验" class="headerlink" title="集成代码校验"></a>集成代码校验</h2><p>参考 <a href="/2020/03/23/saber-lint/">Saber 项目集成代码检查</a>，集成拼写检查、JavaScript 代码检查、CSS 代码检查、代码风格检查以及使用 Git Hook 工具进行提交前代码规范校验。</p>
<h2 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h2><p>对照 <a href="https://www.kancloud.cn/smallchill/saber" target="_blank" rel="external">Saber开发手册</a>进行练习，除项目发布外所有练习都可完成。</p>
<h2 id="Avue-官网学习"><a href="#Avue-官网学习" class="headerlink" title="Avue 官网学习"></a>Avue 官网学习</h2><p>Avue 是基于现有 Element UI 组件库进行的二次封装，组件库主要针对 table 表格和 form 表单场景，且有在线表单设计器和表格设计器生成代码，还有一些企业常用的组件，是一个更贴近企业级的前端开发组件库，让开发变的更容易。</p>
<p>对照官网进行练习时，可先将 Saber 中 Avue 的版本升级到最新版本后再进行，避免由于版本问题一些 demo 运行报错。</p>
<p><a href="https://avuejs.com/" target="_blank" rel="external">Avue.js 官网地址</a></p>
<p><a href="https://form.avuejs.com/" target="_blank" rel="external">Avue表单设计器</a></p>
<p><a href="https://crud.avuejs.com/" target="_blank" rel="external">Avue表格设计器</a></p>
<h2 id="Avue-cli-学习"><a href="#Avue-cli-学习" class="headerlink" title="Avue-cli 学习"></a>Avue-cli 学习</h2><p>avue-cli 是一款基于 avue 和 element-ui 完全开源、免费的企业后端产品前端集成解决方案，已经准备好了大部分的项目准备工作，可以快速进行二次开发。</p>
<p><a href="https://cli.avuejs.com/#/login" target="_blank" rel="external">avue-cli 在线演示地址</a></p>
<p><a href="https://gitee.com/smallweigit/avue-cli?_from=gitee_search" target="_blank" rel="external">avue-cli 项目地址</a></p>
<p><a href="https://www.kancloud.cn/smallwei/avue" target="_blank" rel="external">avue-cli后台模板框架讲解</a></p>
<h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><p>参考 <a href="https://www.kancloud.cn/smallwei/avue" target="_blank" rel="external">avue-cli后台模板框架讲解</a>、<a href="/2020/03/23/saber-code/">Saber 源码学习</a> 学习 Saber 源码。</p>
<h2 id="集成-PWA"><a href="#集成-PWA" class="headerlink" title="集成 PWA"></a>集成 PWA</h2><p>参考<a href="/2020/03/23/saber-pwa/">Saber 集成 PWA</a></p>
]]></content>
      
        <categories>
            
            <category> Saber </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Saber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Saber 集成 PWA]]></title>
      <url>https://zhulichao.github.io/2020/03/23/saber-pwa/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Saber 是基于 Vue CLI 构建，@vue/cli3.0 的 package 目录下有很多具体的可添加模块，其中就包括 cli-plugin-pwa。具体步骤如下。</p>
<h2 id="添加-pwa-插件"><a href="#添加-pwa-插件" class="headerlink" title="添加 pwa 插件"></a>添加 pwa 插件</h2><p>项目根目录下执行 <code>vue add @vue/pwa</code> ，会添加或修改如下文件</p>
<img src="/2020/03/23/saber-pwa/files.png" title="生成文件">
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>npm run build</code></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在 dist 目录下执行  <code>python -m SimpleHTTPServer 1888</code></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><img src="/2020/03/23/saber-pwa/pwa.png" title="运行效果">
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>参考 <a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa" target="_blank" rel="external">vue-cli/packages/@vue/cli-plugin-pwa at dev · vuejs/vue-cli · GitHub</a>，通过  <code>vue.config.js</code>  的 <code>pwa</code>  字段进行配置。</p>
<p>vue.config.js 添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pwa: &#123;</div><div class="line">    name: &apos;My App&apos;,</div><div class="line">    themeColor: &apos;#4DBA87&apos;,</div><div class="line">    msTileColor: &apos;#000000&apos;,</div><div class="line">    appleMobileWebAppCapable: &apos;yes&apos;,</div><div class="line">    appleMobileWebAppStatusBarStyle: &apos;black&apos;,</div><div class="line"></div><div class="line">    // 配置 workbox 插件</div><div class="line">    workboxPluginMode: &apos;InjectManifest&apos;,</div><div class="line">    workboxOptions: &#123;</div><div class="line">      // InjectManifest 模式下 swSrc 是必填的。</div><div class="line">      swSrc: &apos;dev/sw.js&apos;,</div><div class="line">      // ...其它 Workbox 选项...</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>dev 目录下添加 sw.js 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(&apos;install&apos;, event =&gt; &#123;</div><div class="line">  console.log(&apos;Version installing&apos;, event);</div><div class="line">  event.waitUntil(</div><div class="line">    caches</div><div class="line">      .open(&apos;static-v1&apos;)</div><div class="line">      .then(cache =&gt;</div><div class="line">        cache.addAll([</div><div class="line">          &apos;/&apos;,</div><div class="line">          &apos;index.html&apos;,</div><div class="line">          &apos;/cdn&apos;,</div><div class="line">          &apos;/css&apos;,</div><div class="line">          &apos;/img&apos;,</div><div class="line">          &apos;/js&apos;,</div><div class="line">          &apos;/svg&apos;,</div><div class="line">          &apos;/util&apos;,</div><div class="line">        ])</div><div class="line">      )</div><div class="line">  );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">self.addEventListener(&apos;activate&apos;, () =&gt; &#123;</div><div class="line">  console.log(&apos;Version now ready to handle&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">self.addEventListener(&apos;fetch&apos;, event =&gt; &#123;</div><div class="line">  console.log(&apos;fetch&apos;, event.request);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>注意，src/registerServiceWorker.js  文件中修改内容 service-worker.js 为 sw.js。</strong></p>
]]></content>
      
        <categories>
            
            <category> Saber </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Saber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Saber 源码学习]]></title>
      <url>https://zhulichao.github.io/2020/03/23/saber-code/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2020/03/23/saber-code/saber-code.png" title="Saber 源码学习">
<p><a href="/2020/03/23/saber-code/Saber 源码学习.xmind">下载源文件</a></p>
]]></content>
      
        <categories>
            
            <category> Saber </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Saber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Saber 项目集成代码检查]]></title>
      <url>https://zhulichao.github.io/2020/03/23/saber-lint/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开发 Saber 项目使用 VSCode 作为编辑器。Saber 项目使用 @vue/cli 创建的，在此基础上再进行代码检查相关配置，包括拼写检查、JavaScript 代码检查、CSS 代码检查、代码风格检查、使用 Git Hook 工具进行提交前代码规范校验。</p>
<h2 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h2><ul>
<li>VSCode 中添加 <strong>Code Spell Checker</strong> 插件，进行单词的拼写检查，如果代码中出现了拼写错误编辑器会有提示</li>
</ul>
<img src="/2020/03/23/saber-lint/spell.png" width="400" title="错误提示">
<h2 id="JS-检查"><a href="#JS-检查" class="headerlink" title="JS 检查"></a>JS 检查</h2><ul>
<li>VSCode 中添加 <strong>ESLint</strong> 插件，参考 <a href="https://eslint.org/" target="_blank" rel="external">ESLint 官网</a> 进行配置，进行 JavaScript 语法和格式检查</li>
<li>项目安装 eslint-plugin-import、eslint-plugin-node、eslint-plugin-promise、eslint-plugin-vue 包</li>
<li>项目根目录添加 .eslintrc.js 文件，内容如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// .eslintrc.js 文件</div><div class="line">module.exports = &#123;</div><div class="line">  root: true,</div><div class="line">  env: &#123;</div><div class="line">    node: true</div><div class="line">  &#125;,</div><div class="line">  extends: [</div><div class="line">    &apos;plugin:vue/essential&apos;,</div><div class="line">    &apos;eslint:recommended&apos;,</div><div class="line">    &apos;prettier&apos;</div><div class="line">  ],</div><div class="line">  plugins: [&quot;import&quot;, &quot;prettier&quot;],</div><div class="line">  rules: &#123;</div><div class="line">    &quot;prettier/prettier&quot;: &quot;error&quot;,</div><div class="line">    &apos;no-console&apos;: process.env.NODE_ENV === &apos;production&apos; ? &apos;error&apos; : &apos;off&apos;,</div><div class="line">    &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? &apos;error&apos; : &apos;off&apos;,</div><div class="line">    &quot;no-var&quot;: &quot;error&quot;,</div><div class="line">    &quot;indent&quot;: [&quot;error&quot;, 2, &#123; &quot;SwitchCase&quot;: 1 &#125;],</div><div class="line">    &quot;quotes&quot;: [ &quot;error&quot;, &quot;single&quot;],</div><div class="line">    &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],</div><div class="line">    &quot;comma-dangle&quot;: [</div><div class="line">      &quot;error&quot;,</div><div class="line">      &#123;</div><div class="line">        &quot;arrays&quot;: &quot;ignore&quot;,</div><div class="line">        &quot;objects&quot;: &quot;always-multiline&quot;,</div><div class="line">        &quot;imports&quot;: &quot;always-multiline&quot;,</div><div class="line">        &quot;exports&quot;: &quot;ignore&quot;,</div><div class="line">        &quot;functions&quot;: &quot;ignore&quot;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    &quot;no-empty&quot;: 2,</div><div class="line">    &quot;no-eq-null&quot;: 2,</div><div class="line">    &quot;no-new&quot;: 0,</div><div class="line">    &quot;no-fallthrough&quot;: 0,</div><div class="line">    &quot;no-unreachable&quot;: 0,</div><div class="line">    &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],</div><div class="line">    &quot;import/newline-after-import&quot;: 2</div><div class="line">  &#125;,</div><div class="line">  parserOptions: &#123;</div><div class="line">    parser: &apos;babel-eslint&apos;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2020/03/23/saber-lint/eslint.png" width="500" title="错误提示">
<h2 id="CSS-检查"><a href="#CSS-检查" class="headerlink" title="CSS 检查"></a>CSS 检查</h2><ul>
<li>VSCode 中添加 <strong>stylelint</strong> 插件，参考 <a href="https://stylelint.io/" target="_blank" rel="external">stylelint</a> 进行配置，进行 CSS 语法和格式检查</li>
<li>项目添加 stylelint、stylelint-config-standard、stylelint-config-prettier、stylelint-order 包</li>
<li>项目根目录添加 .stylelintrc.js 文件，内容如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line">// stylelintrc.js 文件</div><div class="line">module.exports = &#123;</div><div class="line">  extends: [&apos;stylelint-config-standard&apos;, &apos;stylelint-config-prettier&apos;],</div><div class="line">  plugins: [&apos;stylelint-order&apos;],</div><div class="line">  rules: &#123;</div><div class="line">    &apos;property-no-unknown&apos;: [</div><div class="line">      true,</div><div class="line">      &#123;</div><div class="line">        ignoreProperties: [&apos;composes&apos;],</div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">    &apos;selector-pseudo-class-no-unknown&apos;: [</div><div class="line">      true,</div><div class="line">      &#123;</div><div class="line">        ignorePseudoClasses: [&apos;global&apos;],</div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">    &apos;string-quotes&apos;: &apos;single&apos;,</div><div class="line">    &apos;order/order&apos;: [</div><div class="line">      &apos;custom-properties&apos;,</div><div class="line">      &apos;dollar-variables&apos;,</div><div class="line">      &apos;declarations&apos;,</div><div class="line">      &apos;at-rules&apos;,</div><div class="line">      &apos;rules&apos;,</div><div class="line">    ],</div><div class="line">    &apos;order/properties-order&apos;: [</div><div class="line">      &apos;composes&apos;,</div><div class="line">      &apos;position&apos;,</div><div class="line">      &apos;top&apos;,</div><div class="line">      &apos;right&apos;,</div><div class="line">      &apos;bottom&apos;,</div><div class="line">      &apos;left&apos;,</div><div class="line">      &apos;z-index&apos;,</div><div class="line">      &apos;display&apos;,</div><div class="line">      &apos;align-content&apos;,</div><div class="line">      &apos;align-items&apos;,</div><div class="line">      &apos;align-self&apos;,</div><div class="line">      &apos;flex&apos;,</div><div class="line">      &apos;flex-basis&apos;,</div><div class="line">      &apos;flex-direction&apos;,</div><div class="line">      &apos;flex-flow&apos;,</div><div class="line">      &apos;flex-grow&apos;,</div><div class="line">      &apos;flex-shrink&apos;,</div><div class="line">      &apos;flex-wrap&apos;,</div><div class="line">      &apos;justify-content&apos;,</div><div class="line">      &apos;order&apos;,</div><div class="line">      &apos;float&apos;,</div><div class="line">      &apos;width&apos;,</div><div class="line">      &apos;height&apos;,</div><div class="line">      &apos;max-width&apos;,</div><div class="line">      &apos;max-height&apos;,</div><div class="line">      &apos;min-width&apos;,</div><div class="line">      &apos;min-height&apos;,</div><div class="line">      &apos;padding&apos;,</div><div class="line">      &apos;padding-top&apos;,</div><div class="line">      &apos;padding-right&apos;,</div><div class="line">      &apos;padding-bottom&apos;,</div><div class="line">      &apos;padding-left&apos;,</div><div class="line">      &apos;margin&apos;,</div><div class="line">      &apos;margin-top&apos;,</div><div class="line">      &apos;margin-right&apos;,</div><div class="line">      &apos;margin-bottom&apos;,</div><div class="line">      &apos;margin-left&apos;,</div><div class="line">      &apos;margin-collapse&apos;,</div><div class="line">      &apos;margin-top-collapse&apos;,</div><div class="line">      &apos;margin-right-collapse&apos;,</div><div class="line">      &apos;margin-bottom-collapse&apos;,</div><div class="line">      &apos;margin-left-collapse&apos;,</div><div class="line">      &apos;overflow&apos;,</div><div class="line">      &apos;overflow-x&apos;,</div><div class="line">      &apos;overflow-y&apos;,</div><div class="line">      &apos;clip&apos;,</div><div class="line">      &apos;clear&apos;,</div><div class="line">      &apos;font&apos;,</div><div class="line">      &apos;font-family&apos;,</div><div class="line">      &apos;font-size&apos;,</div><div class="line">      &apos;font-smoothing&apos;,</div><div class="line">      &apos;osx-font-smoothing&apos;,</div><div class="line">      &apos;font-style&apos;,</div><div class="line">      &apos;font-weight&apos;,</div><div class="line">      &apos;hyphens&apos;,</div><div class="line">      &apos;src&apos;,</div><div class="line">      &apos;line-height&apos;,</div><div class="line">      &apos;letter-spacing&apos;,</div><div class="line">      &apos;word-spacing&apos;,</div><div class="line">      &apos;color&apos;,</div><div class="line">      &apos;text-align&apos;,</div><div class="line">      &apos;text-decoration&apos;,</div><div class="line">      &apos;text-indent&apos;,</div><div class="line">      &apos;text-overflow&apos;,</div><div class="line">      &apos;text-rendering&apos;,</div><div class="line">      &apos;text-size-adjust&apos;,</div><div class="line">      &apos;text-shadow&apos;,</div><div class="line">      &apos;text-transform&apos;,</div><div class="line">      &apos;word-break&apos;,</div><div class="line">      &apos;word-wrap&apos;,</div><div class="line">      &apos;white-space&apos;,</div><div class="line">      &apos;vertical-align&apos;,</div><div class="line">      &apos;list-style&apos;,</div><div class="line">      &apos;list-style-type&apos;,</div><div class="line">      &apos;list-style-position&apos;,</div><div class="line">      &apos;list-style-image&apos;,</div><div class="line">      &apos;pointer-events&apos;,</div><div class="line">      &apos;cursor&apos;,</div><div class="line">      &apos;background&apos;,</div><div class="line">      &apos;background-attachment&apos;,</div><div class="line">      &apos;background-color&apos;,</div><div class="line">      &apos;background-image&apos;,</div><div class="line">      &apos;background-position&apos;,</div><div class="line">      &apos;background-repeat&apos;,</div><div class="line">      &apos;background-size&apos;,</div><div class="line">      &apos;border&apos;,</div><div class="line">      &apos;border-collapse&apos;,</div><div class="line">      &apos;border-top&apos;,</div><div class="line">      &apos;border-right&apos;,</div><div class="line">      &apos;border-bottom&apos;,</div><div class="line">      &apos;border-left&apos;,</div><div class="line">      &apos;border-color&apos;,</div><div class="line">      &apos;border-image&apos;,</div><div class="line">      &apos;border-top-color&apos;,</div><div class="line">      &apos;border-right-color&apos;,</div><div class="line">      &apos;border-bottom-color&apos;,</div><div class="line">      &apos;border-left-color&apos;,</div><div class="line">      &apos;border-spacing&apos;,</div><div class="line">      &apos;border-style&apos;,</div><div class="line">      &apos;border-top-style&apos;,</div><div class="line">      &apos;border-right-style&apos;,</div><div class="line">      &apos;border-bottom-style&apos;,</div><div class="line">      &apos;border-left-style&apos;,</div><div class="line">      &apos;border-width&apos;,</div><div class="line">      &apos;border-top-width&apos;,</div><div class="line">      &apos;border-right-width&apos;,</div><div class="line">      &apos;border-bottom-width&apos;,</div><div class="line">      &apos;border-left-width&apos;,</div><div class="line">      &apos;border-radius&apos;,</div><div class="line">      &apos;border-top-right-radius&apos;,</div><div class="line">      &apos;border-bottom-right-radius&apos;,</div><div class="line">      &apos;border-bottom-left-radius&apos;,</div><div class="line">      &apos;border-top-left-radius&apos;,</div><div class="line">      &apos;border-radius-topright&apos;,</div><div class="line">      &apos;border-radius-bottomright&apos;,</div><div class="line">      &apos;border-radius-bottomleft&apos;,</div><div class="line">      &apos;border-radius-topleft&apos;,</div><div class="line">      &apos;content&apos;,</div><div class="line">      &apos;quotes&apos;,</div><div class="line">      &apos;outline&apos;,</div><div class="line">      &apos;outline-offset&apos;,</div><div class="line">      &apos;outline-width&apos;,</div><div class="line">      &apos;outline-style&apos;,</div><div class="line">      &apos;outline-color&apos;,</div><div class="line">      &apos;opacity&apos;,</div><div class="line">      &apos;filter&apos;,</div><div class="line">      &apos;visibility&apos;,</div><div class="line">      &apos;size&apos;,</div><div class="line">      &apos;zoom&apos;,</div><div class="line">      &apos;transform&apos;,</div><div class="line">      &apos;box-align&apos;,</div><div class="line">      &apos;box-flex&apos;,</div><div class="line">      &apos;box-orient&apos;,</div><div class="line">      &apos;box-pack&apos;,</div><div class="line">      &apos;box-shadow&apos;,</div><div class="line">      &apos;box-sizing&apos;,</div><div class="line">      &apos;table-layout&apos;,</div><div class="line">      &apos;animation&apos;,</div><div class="line">      &apos;animation-delay&apos;,</div><div class="line">      &apos;animation-duration&apos;,</div><div class="line">      &apos;animation-iteration-count&apos;,</div><div class="line">      &apos;animation-name&apos;,</div><div class="line">      &apos;animation-play-state&apos;,</div><div class="line">      &apos;animation-timing-function&apos;,</div><div class="line">      &apos;animation-fill-mode&apos;,</div><div class="line">      &apos;transition&apos;,</div><div class="line">      &apos;transition-delay&apos;,</div><div class="line">      &apos;transition-duration&apos;,</div><div class="line">      &apos;transition-property&apos;,</div><div class="line">      &apos;transition-timing-function&apos;,</div><div class="line">      &apos;background-clip&apos;,</div><div class="line">      &apos;backface-visibility&apos;,</div><div class="line">      &apos;resize&apos;,</div><div class="line">      &apos;appearance&apos;,</div><div class="line">      &apos;user-select&apos;,</div><div class="line">      &apos;interpolation-mode&apos;,</div><div class="line">      &apos;direction&apos;,</div><div class="line">      &apos;marks&apos;,</div><div class="line">      &apos;page&apos;,</div><div class="line">      &apos;set-link-source&apos;,</div><div class="line">      &apos;unicode-bidi&apos;,</div><div class="line">      &apos;speak&apos;,</div><div class="line">    ],</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<img src="/2020/03/23/saber-lint/stylelint.png" width="500" title="错误提示">
<h2 id="格式检查"><a href="#格式检查" class="headerlink" title="格式检查"></a>格式检查</h2><ul>
<li>VSCode 中添加 <strong>Prettier - Code formatter</strong> 插件，参考 <a href="https://prettier.io" target="_blank" rel="external">prettier 官网</a> 进行配置，配置完成可用 Alt + Shift + F 进行代码格式化</li>
<li>项目添加 eslint-config-prettier、eslint-plugin-prettier 包</li>
<li>项目根目录添加 .prettierrc.js 文件，内容如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// .prettierrc.js 文件</div><div class="line">module.exports = &#123;</div><div class="line">  &quot;singleQuote&quot;: false, // 字符串是否使用单引号，默认为false，使用双引号</div><div class="line">  &quot;trailingComma&quot;: &quot;none&quot;, // 是否使用尾逗号，有三个可选值&quot;&lt;none|es5|all&gt;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2020/03/23/saber-lint/prettier.png" title="格式化">
<h2 id="Git-Hook"><a href="#Git-Hook" class="headerlink" title="Git Hook"></a>Git Hook</h2><ul>
<li>利用 git 的 hooks 机制，在提交 commit 时自动调用格式校验</li>
<li>项目安装 husky、lint-staged 包</li>
<li>package.json 中添加如下内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// package.json 文件</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">  &quot;lint-staged&quot;: &#123;</div><div class="line">    &quot;*.js&quot;: [</div><div class="line">      &quot;vue-cli-service lint&quot;,</div><div class="line">      &quot;git add&quot;</div><div class="line">    ],</div><div class="line">    &quot;*.&#123;css,less,scss,sss&#125;&quot;: [</div><div class="line">      &quot;stylelint --fix&quot;,</div><div class="line">      &quot;git add&quot;</div><div class="line">    ],</div><div class="line">    &quot;*.vue&quot;: [</div><div class="line">      &quot;vue-cli-service lint&quot;,</div><div class="line">      &quot;git add&quot;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &quot;husky&quot;: &#123;</div><div class="line">    &quot;hooks&quot;: &#123;</div><div class="line">      &quot;pre-commit&quot;: &quot;lint-staged&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2020/03/23/saber-lint/githook.png" title="Git Hook 执行">
]]></content>
      
        <categories>
            
            <category> Saber </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Saber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Saber-基础]]></title>
      <url>https://zhulichao.github.io/2020/03/23/saber-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2020/03/23/saber-base/saber-base.png" title="Saber 基础">
<p><a href="/2020/03/23/saber-base/Saber 学习.xmind">下载源文件</a></p>
]]></content>
      
        <categories>
            
            <category> Saber </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Saber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[诺兰模型]]></title>
      <url>https://zhulichao.github.io/2020/01/07/nolan-model/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>诺兰认为，任何组织由手工信息系统向以计算机为基础的信息系统发展时，都存在着一条客观的发展道路和规律。数据处理的发展涉及到技术的进步、应用的拓展、计划和控制策略的变化以及用户的状况四个方面。1979年，诺兰将计算机信息系统的发展道路划分为六个阶段。诺兰强调，任何组织在实现以计算机为基础的信息系统时都必须从一个阶段发展到下一个阶段，不能实现跳跃式发展。</p>
<p>诺兰模型的六个阶段分别是：初始阶段、传播阶段、控制阶段、集成阶段、数据管理阶段和成熟阶段。</p>
<p>六阶段模型反映了企业计算机应用发展的规律性，前三个阶段具有计算机时代的特征，后三个阶段具有信息时代的特征，其转折点处是进行信息资源规划的时机。”诺兰模型”的预见性，被其后国际上许多企业的计算机应用发展情况所证实。</p>
<img src="/2020/01/07/nolan-model/nuolan.jpg" title="诺兰6阶段模型">
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-网格布局]]></title>
      <url>https://zhulichao.github.io/2019/12/25/css-grid/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="external">CSS Grid 网格布局教程</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p>
<p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。项目只能是容器的顶层子元素，不包含项目的子元素。Grid 布局只对项目生效。Grid 布局的属性分成两类，一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。</p>
<p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。行和列的交叉区域，称为”单元格”（cell）。划分网格的线，称为”网格线”（grid line）。</p>
<h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p><code>display: grid</code> 指定一个容器内部采用网格布局，块级元素<br><code>display: inline-grid</code> 指定一个容器内部采用网格布局，行内元素</p>
<p>容器设为网格布局以后，子元素（项目）的 <code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code> 和 <code>column-*</code> 等设置都将失效。</p>
<h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><code>grid-template-columns</code> 属性设置每一列的列宽<br><code>grid-template-rows</code> 属性设置每一行的行高<br><code>grid-auto-columns</code> 属性设置浏览器自动创建的多余网格的列宽<br><code>grid-auto-rows</code> 属性设置浏览器自动创建的多余网格的行高</p>
<p>有时候，一些项目的指定位置，在现有网格的外部。这时，浏览器会自动生成多余的网格，以便放置项目。如果不指定 <code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p>
<p>(1) 绝对单位或百分比</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</div><div class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(2) repeat()</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(3, 33.33%);</div><div class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 100px 20px 80px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(3) fr</p>
<p>表示比例关系，可以与绝对长度的单位结合使用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(4) minmax()</p>
<p>表示长度就在这个范围之中</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(100px, 1fr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(5) auto</p>
<p>表示由浏览器自己决定长度</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(6) auto-fit</p>
<p>限制单元格的最小宽度，如果容器宽度足够就平均分配剩余空间给每个子元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, minmax(50px, 1fr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(7) auto-fill</p>
<p>限制单元格的最小宽度，如果容器宽度足够保留剩余空间，不进行分配</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, minmax(50px, 1fr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2019/12/25/css-grid/auto-fit.png" title="auto-fit VS. auto-fill">
<p>(8) 网格线名称</p>
<p>使用方括号，指定每一根网格线的名字，同一根线可以有多个名字</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4 right-line];</div><div class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4 bottom-line];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><p><code>grid-column-gap</code> 属性设置列间距<br><code>grid-row-gap</code> 属性设置行间距<br><code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">display</span>: grid;</div><div class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><p><code>grid-template-areas</code> 指定”区域”（area），一个区域由单个或多个单元格组成，如果某些区域不需要利用，则使用”点”（.），每个区域的起始网格线，会自动命名为 <code>区域名-start</code>，终止网格线自动命名为 <code>区域名-end</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.area &#123;</div><div class="line">    display: grid;</div><div class="line">    width: calc(5 * 60px);</div><div class="line">    height: calc(5 * 60px);</div><div class="line">    background: white;</div><div class="line">    grid-template-rows: repeat(5, 60px);</div><div class="line">    grid-template-columns: repeat(5, 60px);</div><div class="line">    grid-template-areas: ".  g  g  g  . " "o_ .  .  .  . " "o  .  e  e  . " "o  .  .  .  l " ".  g_ g_ g_ . ";</div><div class="line">&#125;</div><div class="line"></div><div class="line">.g &#123;</div><div class="line">    grid-area: g;</div><div class="line">    background: #ea4335;</div><div class="line">&#125;</div><div class="line">.o_ &#123;</div><div class="line">    grid-area: o_;</div><div class="line">    background: #ff9800;</div><div class="line">&#125;</div><div class="line">.o &#123;</div><div class="line">    grid-area: o;</div><div class="line">    background: #fbbc05;</div><div class="line">&#125;</div><div class="line">.g_ &#123;</div><div class="line">    grid-area: g_;</div><div class="line">    background: #34a853;</div><div class="line">&#125;</div><div class="line">.l &#123;</div><div class="line">    grid-area: l;</div><div class="line">    background: #00bcd4;</div><div class="line">&#125;</div><div class="line">.e &#123;</div><div class="line">    grid-area: e;</div><div class="line">    background: #4285f4;</div><div class="line">&#125;</div><div class="line">.x &#123;</div><div class="line">    grid-area: x;</div><div class="line">    background: #9e9e9e;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;div class="area"&gt;</div><div class="line">    &lt;div class="g"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="o_"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="o"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="g_"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="l"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="e"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<img src="/2019/12/25/css-grid/area.png" width="300" title="area 效果图">
<h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p><code>grid-auto-flow</code> 默认值是 row，即”先行后列”，也可以将它设成 column，表示”先列后行”；row dense 表示”先行后列并且尽可能紧密填满”，column dense 表示”先列后行并且尽量填满空格”</p>
<h3 id="容器对齐"><a href="#容器对齐" class="headerlink" title="容器对齐"></a>容器对齐</h3><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右）<br><code>align-content</code> 属性是整个内容区域的垂直位置（上中下）<br><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</div><div class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="项目对齐"><a href="#项目对齐" class="headerlink" title="项目对齐"></a>项目对齐</h3><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右）<br><code>align-items</code> 属性设置单元格内容的垂直位置（上中下）<br><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">justify-items</span>: start | end | center | <span class="built_in">stretch</span>(默认);</div><div class="line">  <span class="attribute">align-items</span>: start | end | center | <span class="built_in">stretch</span>(默认);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="合并简写"><a href="#合并简写" class="headerlink" title="合并简写"></a>合并简写</h3><p><code>grid-template</code> 属性是 <code>grid-template-columns</code>、<code>grid-template-rows</code> 和 <code>grid-template-areas</code> 的合并简写形式</p>
<p><code>grid</code> 属性是 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、<code>grid-auto-rows</code>、<code>grid-auto-columns</code> 和 <code>grid-auto-flow</code> 的合并简写形式</p>
<h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p><code>grid-column-start</code> 属性设置项目左边框所在的垂直网格线，值为数字或网格线的名字<br><code>grid-column-end</code> 属性设置项目右边框所在的垂直网格线，值为数字或网格线的名字<br><code>grid-row-start</code> 属性设置项目上边框所在的水平网格线，值为数字或网格线的名字<br><code>grid-row-end</code> 属性设置项目下边框所在的水平网格线，值为数字或网格线的名字</p>
<p>上面四个属性的值可以为数字、网格线的名字，也可以使用 <code>span</code> 关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。使用这四个属性，如果产生了项目的重叠，则使用 <code>z-index</code> 属性指定项目的重叠顺序。</p>
<p><code>grid-column: &lt;grid-column-start&gt;/&lt;grid-column-end&gt;</code> 属性是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式<br><code>grid-row: &lt;grid-row-start&gt;/&lt;grid-row-end&gt;</code> 属性是 <code>grid-row-start</code> 和 <code>grid-row-end</code> 的合并简写形式<br><code>grid-area</code> 属性指定项目放在哪一个区域，值可为区域名称或 <code>&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code> 的合并简写形式</p>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p><code>justify-self</code> 属性设置单个单元格内容的水平位置（左中右）<br><code>align-self</code> 属性设置单个单元格内容的垂直位置（上中下）<br><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">justify-self</span>: start | end | center | <span class="built_in">stretch</span>(默认);</div><div class="line">  <span class="attribute">align-self</span>: start | end | center | <span class="built_in">stretch</span>(默认);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML-特殊标签]]></title>
      <url>https://zhulichao.github.io/2019/12/24/html-special-tag/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML特殊标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 带有一定样式，不提倡使用的标签，目前HTML5仍然保留 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>b加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>i斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tt</span>&gt;</span>tt打字机字体<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>small小一些的字体<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 带有明确语义的标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>del删除<span class="tag">&lt;/<span class="name">del</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>ins添加<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>s过时废弃<span class="tag">&lt;/<span class="name">s</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sup</span>&gt;</span>sup上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sub</span>&gt;</span>sub下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mark</span>&gt;</span>mark特别强调<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>em强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong着重<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>definition定义<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>code代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">samp</span>&gt;</span>samp例子代码<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>kbd用户输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">var</span>&gt;</span>variable变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>cite引用<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 英文单词过长时，根据浏览器宽度指定单词换行时机裁切换行 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>To learn AJAX, you must be familiar with the XMLHttpRequest Object.To learn AJAX, you must be familiar with the XMLHttp<span class="tag">&lt;<span class="name">wbr</span>&gt;</span>Request Object.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 既表达语义又带有一定样式的标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>address地址<span class="tag">&lt;/<span class="name">address</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>blockquote缩进<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q</span>&gt;</span>q小引用<span class="tag">&lt;/<span class="name">q</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>pre预格式化标签<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"中华人民共和国"</span>&gt;</span>abbr简写<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span>bdo反向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<img src="/2019/12/24/html-special-tag/tag.png" title="效果图">
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PWA]]></title>
      <url>https://zhulichao.github.io/2019/12/11/service-worker/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p>PWA 就是渐进式 web 应用(Progressive Web App)。早在2016年初，Google 便提出 PWA，希望提供更强大的 web 体验，引导开发者回归开放互联网。它弥补了 web 对比 Native App 急缺的几个能力，比如离线使用、后台加载、添加到主屏和消息推送等，同时它还具备了小程序标榜的“无需安装、用完即走”的特性。目的就是在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验的渐进式网页应用。虽然 PWA 技术已经被 W3C 列为标准，但是其落地情况一直以来是很让人失望的，始终受到苹果的阻碍，最重要的原因在于 PWA 绕过 Apple Store 审核，直接推给用户。</p>
<p>如 <a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js 官网</a> <a href="https://react.docschina.org/" target="_blank" rel="external">React 官网</a></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>可靠的——即时加载，即使在不确定的网络条件下也不会受到影响</li>
<li>快速的——快速响应用，用平滑的动画和滚动快速响应用户交互</li>
<li>迷人的——感觉就像设备上的原生应用程序，具有沉浸式的用户体验</li>
</ul>
<h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><ul>
<li>Web App Manifest</li>
<li>Service Worker</li>
<li>Cache API</li>
<li>Push &amp; Notification</li>
<li>App Shell &amp; App Skeleton</li>
<li>Background Sync</li>
</ul>
<h2 id="Web-App-Manifest"><a href="#Web-App-Manifest" class="headerlink" title="Web App Manifest"></a>Web App Manifest</h2><p>实现添加至主屏。Web应用程序中，可以通过 manifest.json 控制应用程序的显示方式和启动方式，指定主屏幕图标、启动应用程序时要加载的页面、屏幕方向，甚至可以指定是否显示浏览器 Chrome。<a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="external">Manifest 参考文档</a></p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>实现离线缓存。由于 JavaScript 是单线程的，随着 web 业务的复杂化，开发者逐渐在 js 中做了许多耗费资源的运算过程，这使得单线程的弊端更加凹显。web worker 正是基于此被创造出来，它是脱离在主线程之外的，我们可以将复杂耗费时间的事情交给 web worker 来做。但是 web worker 作为一个独立的线程，它的功能应当不仅于此。Service Worker 便是在 web worker 的基础上增加了离线缓存的能力。当然在 Service Worker 之前也有在 HTML5 上做离线缓存的 API 叫 AppCache, 但是 AppCache 存在很多缺点。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="external">Service Worker 参考文档</a> <a href="https://github.com/GoogleChrome/workbox" target="_blank" rel="external">GoogleChrome/workbox 库</a></p>
<p>Service Worker 是由事件驱动的，具有生命周期，可以拦截处理页面的所有网络请求(fetch)，可以访问 cache 和 indexDB，支持推送，并且可以让开发者自己控制管理缓存的内容以及版本，为离线弱网环境下的 web 的运行提供了可能，让 web 在体验上更加贴近 native。</p>
<h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul>
<li>不能操作页面 DOM，但可以通过事件机制来处理</li>
<li>事件驱动型服务线程</li>
<li>必须使用 HTTPS 和 localhost</li>
<li>运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的 HTTP 请求</li>
<li>单独的作用域范围，单独的运行环境和执行线程，与主线程独立不会被阻塞</li>
<li>完全异步，无法使用 XHR 和 localStorage</li>
<li>一旦被 install，就永远存在，除非被 uninstall 或者 dev 模式手动删除</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[styled-components]]></title>
      <url>https://zhulichao.github.io/2019/12/11/styled-components/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.styled-components.com/" target="_blank" rel="external">styled-components</a> 是一个针对 React 的 css in js 类库。和所有同类型的类库一样，通过 js 赋能解决了原生 css 所不具备的能力，比如变量、循环、函数等。解决了 css 全局命名空间，避免样式冲突的问题，维护起来更加方便。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>贯彻 React 的 everything in JS 理念，降低 js 对 css 文件的依赖</li>
<li>保留前端开发 CSS 书写习惯，无学习和迁移成本</li>
<li>使用方便，不需要配置 webpack，开箱即用</li>
<li>不用再担心样式命名的问题，移除样式与组件之间的对应关系</li>
<li>样式可以使用变量，更加灵活</li>
<li>组件的逻辑、生命周期、样式、结构完全和其它组件解耦，对组件维护很有帮助</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>可读性差，不方便直接看出组件的 html 元素</li>
</ul>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="IDE-插件"><a href="#IDE-插件" class="headerlink" title="IDE 插件"></a>IDE 插件</h3><p>VSCode 插件 vscode-styled-components</p>
<h3 id="Babel-配置"><a href="#Babel-配置" class="headerlink" title="Babel 配置"></a>Babel 配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="string">"plugins"</span>: [</div><div class="line">    [</div><div class="line">      <span class="string">"babel-plugin-styled-components"</span>,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"ssr"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"displayName"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"fileName"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"preprocess"</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="stylelint-配置"><a href="#stylelint-配置" class="headerlink" title="stylelint 配置"></a>stylelint 配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="string">"processors"</span>: [</div><div class="line">  <span class="string">"stylelint-processor-styled-components"</span></div><div class="line">],</div><div class="line"><span class="string">"extends"</span>: [</div><div class="line">  <span class="string">"stylelint-config-recommended"</span>,</div><div class="line">  <span class="string">"stylelint-config-styled-components"</span></div><div class="line">],</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></div><div class="line">  background: <span class="subst">$&#123;props =&gt; props.primary ? "blue" : "white"&#125;</span>;</div><div class="line">`;</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></div><div class="line">  color: blue;</div><div class="line">  border-radius: 3px;</div><div class="line">`;</div><div class="line"></div><div class="line"><span class="keyword">const</span> TomatoButton = styled(Button)<span class="string">`</span></div><div class="line">  color: tomato;</div><div class="line">`;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></div><div class="line">  display: inline-block;</div><div class="line">  color: blue;</div><div class="line">  font-size: 1em;</div><div class="line">`;</div><div class="line"><span class="keyword">const</span> TomatoButton = styled(Button)<span class="string">`</span></div><div class="line">  color: tomato;</div><div class="line">`;</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Normal Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">"a"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Link with Button styles<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">&#123;TomatoButton&#125;</span>&gt;</span>Custom Button with Normal Button styles<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Thing = styled.div<span class="string">`</span></div><div class="line">  color: blue;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: red;</div><div class="line">  &#125;</div><div class="line">  &amp; ~ &amp; &#123;</div><div class="line">    background: yellow; // &lt;Thing&gt; as a sibling of &lt;Thing&gt;, but maybe not directly next to it</div><div class="line">  &#125;</div><div class="line">  &amp; + &amp; &#123;</div><div class="line">    background: green; // &lt;Thing&gt; next to &lt;Thing&gt;</div><div class="line">  &#125;</div><div class="line">  &amp;.something &#123;</div><div class="line">    background: orange; // &lt;Thing&gt; tagged with an additional CSS class ".something"</div><div class="line">  &#125;</div><div class="line">  .other-thing &#123;</div><div class="line">    background: blue; // CSS class ".other-thing" inner &lt;Thing&gt;</div><div class="line">  &#125;</div><div class="line">  .something-else &amp; &#123;</div><div class="line">    background: red; // &lt;Thing&gt; inside another element labeled ".something-else"</div><div class="line">  &#125;</div><div class="line">`</div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>green<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Thing</span> <span class="attr">className</span>=<span class="string">"something"</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Thing</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"other-thing"</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Pretty nice day today.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>yellow<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"something-else"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>red<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Input = styled.input.attrs(props =&gt; (&#123;</div><div class="line">  <span class="comment">// we can define static props</span></div><div class="line">  type: <span class="string">"password"</span>,</div><div class="line">  <span class="comment">// or we can define dynamic ones</span></div><div class="line">  size: props.size || <span class="string">"1em"</span>,</div><div class="line">&#125;))<span class="string">`</span></div><div class="line">  font-size: 1em;</div><div class="line">  margin: <span class="subst">$&#123;props =&gt; props.size&#125;</span>;</div><div class="line">  padding: <span class="subst">$&#123;props =&gt; props.size&#125;</span>;</div><div class="line">`;</div><div class="line"></div><div class="line">render(</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;Input placeholder="A small text input" /&gt;</div><div class="line">    &lt;br /&gt;</div><div class="line">    &lt;Input placeholder="A bigger text input" size="2em" /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> rotate = keyframes<span class="string">`</span></div><div class="line">  from &#123;</div><div class="line">    transform: rotate(0deg);</div><div class="line">  &#125;</div><div class="line">  to &#123;</div><div class="line">    transform: rotate(360deg);</div><div class="line">  &#125;</div><div class="line">`;</div><div class="line"><span class="keyword">const</span> Rotate = styled.div<span class="string">`</span></div><div class="line">  display: inline-block;</div><div class="line">  animation: <span class="subst">$&#123;rotate&#125;</span> 2s linear infinite;</div><div class="line">`;</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Rotate</span>&gt;</span>&amp;lt; 💅 &amp;gt;<span class="tag">&lt;/<span class="name">Rotate</span>&gt;</span></span></div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></div><div class="line">  color: <span class="subst">$&#123;props =&gt; props.theme.fg&#125;</span>;</div><div class="line">  border: 2px solid <span class="subst">$&#123;props =&gt; props.theme.fg&#125;</span>;</div><div class="line">  background: <span class="subst">$&#123;props =&gt; props.theme.bg&#125;</span>;</div><div class="line">`;</div><div class="line">Button.defaultProps = &#123;</div><div class="line">  theme: &#123;</div><div class="line">    fg: <span class="string">"mediumseagreen"</span></div><div class="line">    bg: <span class="string">"white"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> theme = &#123;</div><div class="line">  fg: <span class="string">"palevioletred"</span>,</div><div class="line">  bg: <span class="string">"white"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> invertTheme = (&#123; fg, bg &#125;) =&gt; (&#123;</div><div class="line">  fg: bg,</div><div class="line">  bg: fg</div><div class="line">&#125;);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>mediumseagreen<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Default Theme<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;invertTheme&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Inverted Theme<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; withTheme &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Current theme: '</span>, <span class="keyword">this</span>.props.theme);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> withTheme(MyComponent);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> MyComponent = () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> themeContext = useContext(ThemeContext);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Current theme: '</span>, themeContext);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></div><div class="line">  color: <span class="subst">$&#123;props =&gt; props.theme.main&#125;</span>;</div><div class="line">`;</div><div class="line"><span class="keyword">const</span> theme = &#123;</div><div class="line">  main: <span class="string">"mediumseagreen"</span></div><div class="line">&#125;;</div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">theme</span>=<span class="string">&#123;&#123;</span> <span class="attr">main:</span> "<span class="attr">royalblue</span>" &#125;&#125;&gt;</span>royalblue<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>mediumseagreen<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">theme</span>=<span class="string">&#123;&#123;</span> <span class="attr">main:</span> "<span class="attr">darkorange</span>" &#125;&#125;&gt;</span>darkorange<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-练习题]]></title>
      <url>https://zhulichao.github.io/2019/12/10/javascript-practice/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testResult</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">2</span> * a;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">200</span>; <span class="comment">// 这里的 a 会覆盖外面的 a</span></div><div class="line">  <span class="keyword">var</span> c = a / <span class="number">2</span>;</div><div class="line">  <span class="built_in">console</span>.log(b, c); <span class="comment">// NaN 100</span></div><div class="line">&#125;</div><div class="line">testResult();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> j = i;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> j; <span class="comment">// j 存在变量提升，循环结束后 j 为 9</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">createFunctions().forEach(item =&gt; <span class="built_in">console</span>.log(item())) <span class="comment">// 10 个 9</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">  foo: <span class="string">'bar'</span>,</div><div class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer func:this.foo = '</span>, <span class="keyword">this</span>.foo); <span class="comment">// bar</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer func:self.foo = '</span>, self.foo); <span class="comment">// bar</span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 立即执行函数，没有 this</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'inner func:this.foo = '</span>, <span class="keyword">this</span>.foo); <span class="comment">// undefined, this 指向 window</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'inner func:self.foo = '</span>, self.foo); <span class="comment">// bar</span></div><div class="line">    &#125;());</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">myObject.func();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-SSR]]></title>
      <url>https://zhulichao.github.io/2019/12/10/server-side-rendering/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.freecodecamp.org/news/server-side-rendering-your-react-app-in-three-simple-steps-7a82b95db82e/" target="_blank" rel="external">How to implement server-side rendering in your React app in three simple steps</a><br><a href="https://segmentfault.com/a/1190000018672269" target="_blank" rel="external">React 服务端渲染从入门到精通</a></p>
<h2 id="什么是服务端渲染"><a href="#什么是服务端渲染" class="headerlink" title="什么是服务端渲染"></a>什么是服务端渲染</h2><p>当用户或爬虫程序访问页面 URL 时，将组件或页面通过服务器生成 HTML 字符串，再发送到浏览器，最后将静态标记”混合”为客户端上完全交互的应用程序。服务端渲染只发生在首屏，在客户端处理后面的请求。</p>
<h2 id="服务端渲染和客户端渲染的区别"><a href="#服务端渲染和客户端渲染的区别" class="headerlink" title="服务端渲染和客户端渲染的区别"></a>服务端渲染和客户端渲染的区别</h2><ul>
<li>客户端渲染时，浏览器下载一个最小的 HTML 页面，渲染 JavaScript 并填充进去</li>
<li>服务端渲染时，在服务端渲染 React 组件，输出 HTML 内容</li>
</ul>
<p>可以组合使用这 2 种方式创建同构应用</p>
<h2 id="如何在页面中快速判断是否为服务端渲染"><a href="#如何在页面中快速判断是否为服务端渲染" class="headerlink" title="如何在页面中快速判断是否为服务端渲染"></a>如何在页面中快速判断是否为服务端渲染</h2><ul>
<li>鼠标右键查看源代码，在页面中看到的内容在源代码中也可以查看到，则是服务端渲染得到的</li>
<li>鼠标右键查看源代码，页面中看到的内容在源代码中不可以查看到，则是客户端渲染得到的</li>
</ul>
<h2 id="在服务端渲染-React-的后果"><a href="#在服务端渲染-React-的后果" class="headerlink" title="在服务端渲染 React 的后果"></a>在服务端渲染 React 的后果</h2><ul>
<li>如果应用很小，服务端渲染可以改善性能，但是如果应用很大会降低性能</li>
<li>增大了响应时间，如果服务器很忙会更糟糕</li>
<li>增大了响应大小，这意味着需要更长的时间来加载页面</li>
<li>增大了应用的复杂度</li>
<li>在服务端渲染时只会执行到 componentDidMount 之前的生命周期钩子，一些常用的浏览器的 api 可能无法正常使用</li>
</ul>
<h2 id="什么时候应该使用服务端渲染"><a href="#什么时候应该使用服务端渲染" class="headerlink" title="什么时候应该使用服务端渲染"></a>什么时候应该使用服务端渲染</h2><ul>
<li>SEO，目前搜索引擎爬虫还不能解析 JavaScript，这是使用服务端渲染最主要的原因，特别是对于着陆页</li>
<li>改善性能，在服务端渲染时，应用的性能依赖服务器的资源和用户的网速，这使服务端渲染对于内容密集型网站非常有用；另一个改善是首次用户交互时间，减少白屏等待时间</li>
</ul>
<h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><ul>
<li>首次访问页面时创建一个新的 Redux Store</li>
<li>选择性的 dispatch action，服务端渲染时客户端不需要初始化 state 的 action</li>
<li>从 Store 中拿到 state 执行 SSR</li>
<li>将上一步获取到的 state 一起返回，用这个 state 在客户端初始化 state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server rendered home page</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123; preloadedState, content &#125; = ssr(initialState);</div><div class="line">  <span class="keyword">const</span> response = template(<span class="string">'Server Rendered Page'</span>, preloadedState, content);</div><div class="line">  res.setHeader(<span class="string">'Cache-Control'</span>, <span class="string">'assets, max-age=604800'</span>);</div><div class="line">  res.send(response);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ssr</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">  <span class="comment">// Configure the store with the initial state provided</span></div><div class="line">  <span class="keyword">const</span> store = configureStore(initialState);</div><div class="line"></div><div class="line">  <span class="comment">// render the App store static markup ins content variable</span></div><div class="line">  <span class="keyword">let</span> content = renderToString(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="comment">// Get a copy of store data to create the same store on client side</span></div><div class="line">  <span class="keyword">const</span> preloadedState = store.getState();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123; content, preloadedState &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">title, initialState = &#123;&#125;, content = ''</span>) </span>&#123;</div><div class="line">  <span class="comment">// Dynamically ship scripts based on render type</span></div><div class="line">  <span class="keyword">let</span> scripts = <span class="string">''</span>;</div><div class="line">  <span class="keyword">if</span> (content) &#123;</div><div class="line">    <span class="comment">// 服务端渲染</span></div><div class="line">    scripts = <span class="string">` &lt;script&gt;</span></div><div class="line">                   window.__STATE__ = <span class="subst">$&#123;JSON.stringify(initialState)&#125;</span></div><div class="line">                &lt;/script&gt;</div><div class="line">                &lt;script src="assets/client.js"&gt;&lt;/script&gt;</div><div class="line">                `;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 客户端渲染</span></div><div class="line">    scripts = <span class="string">` &lt;script src="assets/bundle.js"&gt; &lt;/script&gt; `</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> page = <span class="string">`&lt;!DOCTYPE html&gt;</span></div><div class="line">              &lt;html lang="en"&gt;</div><div class="line">              &lt;head&gt;</div><div class="line">                &lt;meta charset="utf-8"&gt;</div><div class="line">                &lt;title&gt; <span class="subst">$&#123;title&#125;</span> &lt;/title&gt;</div><div class="line">                &lt;link href="assets/style.css" rel="stylesheet"&gt;</div><div class="line">              &lt;/head&gt;</div><div class="line">              &lt;body&gt;</div><div class="line">                &lt;div class="content"&gt;</div><div class="line">                   &lt;div id="app" class="wrap-inner"&gt;</div><div class="line">                      &lt;!--- magic happens here --&gt;  <span class="subst">$&#123;content&#125;</span></div><div class="line">                   &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line"></div><div class="line">                  <span class="subst">$&#123;scripts&#125;</span></div><div class="line">              &lt;/body&gt;</div><div class="line">              `;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> page;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// client.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./redux/configureStore'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Read the state sent with markup</span></div><div class="line"><span class="keyword">const</span> state = <span class="built_in">window</span>.__STATE__;</div><div class="line"></div><div class="line"><span class="comment">// delete the state from global window object</span></div><div class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.__STATE__;</div><div class="line"></div><div class="line"><span class="comment">// reproduce the store used to render the page on server</span></div><div class="line"><span class="keyword">const</span> store = configureStore(state);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * hydrate the page to make sure both server and client</div><div class="line"> * side pages are identical. This includes markup checking,</div><div class="line"> * react comments to identify elements and more.</div><div class="line"> */</div><div class="line"></div><div class="line">hydrate(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac-终端配置]]></title>
      <url>https://zhulichao.github.io/2019/12/08/mac-terminal/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>安装 <a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
<li>安装 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="external">ZSH</a>，安装成功可查看版本 <code>zsh —version</code></li>
<li>配置终端默认使用 ZSH <code>chsh -s $(which zsh)</code></li>
<li>安装 <a href="https://www.iterm2.com/" target="_blank" rel="external">iTerm2</a> <code>brew cask install iterm2</code></li>
<li>配置 iTerm2 主题<ul>
<li>下载 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="external">iTerm2-Color-Schemes</a>，</li>
<li><code>iTerm → Preferences → Profiles → Colors → Color Presets... → Import → OceanicMaterial</code></li>
<li><code>iTerm → Preferences → Profiles → Keys → Load Preset... → Natural Text Editing</code></li>
</ul>
</li>
<li>使用 Antigen 管理 ZSH 插件，<code>brew install antigen</code></li>
<li><p>编辑 <code>~/.zshrc</code>，添加如下内容，执行 <code>source ~/.zshrc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"># Antigen https://github.com/zsh-users/antigen</div><div class="line">source /usr/local/share/antigen/antigen.zsh</div><div class="line">DEFAULT_USER=`id -un`</div><div class="line"></div><div class="line"># Load the oh-my-zsh&apos;s library.</div><div class="line">antigen use oh-my-zsh</div><div class="line"></div><div class="line"># Bundles from the default repo (robbyrussell&apos;s oh-my-zsh).</div><div class="line">antigen bundle autojump</div><div class="line">antigen bundle aws</div><div class="line">antigen bundle docker</div><div class="line">antigen bundle git</div><div class="line">antigen bundle npm</div><div class="line">antigen bundle nvm</div><div class="line">antigen bundle osx</div><div class="line">antigen bundle react-native</div><div class="line"></div><div class="line"># zsh-nvm https://github.com/lukechilds/zsh-nvm</div><div class="line">NVM_LAZY_LOAD=true</div><div class="line">NVM_AUTO_USE=true</div><div class="line">antigen bundle lukechilds/zsh-nvm</div><div class="line"></div><div class="line"># Npm completion</div><div class="line">antigen bundle lukechilds/zsh-better-npm-completion</div><div class="line">antigen bundle akoenig/npm-run.plugin.zsh</div><div class="line"></div><div class="line"># Zsh completion</div><div class="line">antigen bundle zsh-users/zsh-completions</div><div class="line"></div><div class="line"># Auto suggestions</div><div class="line">ZSH_AUTOSUGGEST_USE_ASYNC=true</div><div class="line">antigen bundle zsh-users/zsh-autosuggestions</div><div class="line"></div><div class="line"># Syntax highlighting bundle.</div><div class="line">antigen bundle zdharma/fast-syntax-highlighting</div><div class="line"></div><div class="line"># Automatic update antigen bundles</div><div class="line">antigen bundle unixorn/autoupdate-antigen.zshplugin</div><div class="line"></div><div class="line"># Load the theme.</div><div class="line"># Powerlevel9k</div><div class="line"># https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions</div><div class="line">POWERLEVEL9K_INSTALLATION_PATH=$ANTIGEN_BUNDLES/bhilburn/powerlevel9k</div><div class="line">POWERLEVEL9K_MODE=&apos;nerdfont-complete&apos;</div><div class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=2</div><div class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs)</div><div class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status nvm node_version)</div><div class="line"></div><div class="line">antigen theme bhilburn/powerlevel9k powerlevel9k</div><div class="line"></div><div class="line"># Tell Antigen that you&apos;re done.</div><div class="line">antigen apply</div></pre></td></tr></table></figure>
</li>
<li><p>配置 Powerlevel9k 主题</p>
<ul>
<li><code>brew tap caskroom/fonts</code></li>
<li><code>brew cask install font-firacode-nerd-font</code></li>
<li><code>iTerm → Preferences → Profiles → Text → Change Font → Fura Code Nerd Font</code>，勾选 <code>Use ligatures</code></li>
</ul>
</li>
<li>配置 VS Code 配置终端，首选项 → 设置 → 用户，在 setting.json 中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;terminal.integrated.shell.osx&quot;: &quot;/bin/zsh&quot;,</div><div class="line">&quot;terminal.integrated.fontFamily&quot;: &quot;&apos;FuraCode Nerd Font&apos;&quot;,</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2019/12/08/mac-terminal/terminal.jpg" title="效果图">
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[讨论用户名]]></title>
      <url>https://zhulichao.github.io/2019/12/06/idea-username/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于用户名的讨论"><a href="#关于用户名的讨论" class="headerlink" title="关于用户名的讨论"></a><a href="https://www.b-list.org/weblog/2018/feb/11/usernames/" target="_blank" rel="external">关于用户名的讨论</a></h2><ul>
<li>用户名用需要从三个方面正确的识别用户，每个标识应该是独立的<ul>
<li>系统级标识，适合作为数据库的外键</li>
<li>登录标识，适合进行证书检查</li>
<li>公众标识，适合展示给其它用户</li>
</ul>
</li>
<li>如何保证唯一性<ul>
<li>不区分大小写，如 john_doe 和 JOHN_DOE</li>
<li>选择一种形式进行标准化</li>
<li>考虑非 ASCII，如 StraßburgJoe 和 StrassburgJoe</li>
<li>使用 Unicode 库</li>
<li>处理可能混淆的情况，如 jane_doe 和 jаne_doe</li>
<li>如果是邮箱地址，忽略点或加号后面的字符</li>
<li>保留一些名字，如 login、www、mail 等</li>
</ul>
</li>
</ul>
<h2 id="用户账户、授权和密码管理的-12-个最佳实践"><a href="#用户账户、授权和密码管理的-12-个最佳实践" class="headerlink" title="用户账户、授权和密码管理的 12 个最佳实践"></a><a href="http://www.360doc.com/content/18/0310/10/31784658_735849146.shtml" target="_blank" rel="external">用户账户、授权和密码管理的 12 个最佳实践</a></h2><ul>
<li>Hash those passwords 对密码进行散列处理</li>
<li>Allow for third-party identity providers if possible 如果可以的话，允许第三方提供身份验证</li>
<li>Separate the concept of user identity and user account 区分用户身份和用户账户的概念</li>
<li>Allow multiple identities to link to a single user account 允许单一用户账户关联多重身份</li>
<li>Don’t block long or complex passwords 不要限制较长或者复杂的密码</li>
<li>Don’t impose unreasonable rules for usernames 不要对用户名强加不合理的规则</li>
<li>Allow users to change their username 允许用户修改用户名</li>
<li>Let your users delete their accounts 让你的用户删掉他们的账户</li>
<li>Make a conscious decision on session length 在对话长度上做出理智的选择</li>
<li>Use 2-Step Verification 使用两步身份验证</li>
<li>Make user IDs case insensitive 用户 ID 不区分大小写</li>
<li>Build a secure auth system 建立一个安全认证系统</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Ideas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ideas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础服务]]></title>
      <url>https://zhulichao.github.io/2019/12/06/basic-services/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务列表"><a href="#服务列表" class="headerlink" title="服务列表"></a>服务列表</h2><p><a href="https://www.twilio.com/" target="_blank" rel="external">https://www.twilio.com/</a><br>👆SMS<br><a href="https://netease.im/" target="_blank" rel="external">https://netease.im/</a><br>👆网易云信 IM<br><a href="https://sendgrid.com/" target="_blank" rel="external">https://sendgrid.com/</a><br>👆Transactional Email<br><a href="https://auth0.com/" target="_blank" rel="external">https://auth0.com/</a><br>👆User Authentication 用户认证<br><a href="https://www.filestack.com/" target="_blank" rel="external">https://www.filestack.com/</a><br>👆文件管理，图片、视频，文档<br><a href="https://mixpanel.com/" target="_blank" rel="external">https://mixpanel.com/</a><br>👆Data analytics<br><a href="https://www.algolia.com/" target="_blank" rel="external">https://www.algolia.com/</a><br>👆搜索<br><a href="https://zeit.co/now" target="_blank" rel="external">https://zeit.co/now</a><br>👆Deployment PaaS<br><a href="https://www.prisma.io/" target="_blank" rel="external">https://www.prisma.io/</a><br>👆Prisma ORM</p>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac-推荐软件]]></title>
      <url>https://zhulichao.github.io/2019/12/05/mac-tools/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://justgetflux.com/" target="_blank" rel="external">f.lux</a> 专业调节屏幕色温</li>
<li><a href="https://www.macbartender.com/" target="_blank" rel="external">Bartender</a> <a href="https://dozermac.com/" target="_blank" rel="external">Dozer</a> 隐藏桌面顶部 icon</li>
<li><a href="http://magnet.crowdcafe.com/" target="_blank" rel="external">Magnet</a> 分屏</li>
<li><a href="https://caffeine.en.softonic.com/mac" target="_blank" rel="external">Caffeine</a> 防止自动休眠</li>
<li><a href="https://muzzleapp.com/" target="_blank" rel="external">Muzzle</a> 屏蔽 Mac 的通知</li>
<li><a href="https://handbrake.fr/" target="_blank" rel="external">HandBrake</a> 视频转码</li>
<li><a href="http://www.jitouch.com/" target="_blank" rel="external">Jitouch</a> 妙控板手势扩展，强烈推荐</li>
<li><a href="https://www.lastpass.com/zh" target="_blank" rel="external">LastPass</a> 密码管理工具</li>
<li><a href="https://github.com/JohnCoates/Aerial" target="_blank" rel="external">Aerial</a> 视频屏保</li>
<li><a href="https://bear.app/cn/" target="_blank" rel="external">Bear</a> 笔记</li>
<li><a href="http://zh.xnipapp.com/" target="_blank" rel="external">Xnip</a> 截图</li>
<li><a href="https://www.tynsoe.org/v2/geektool/" target="_blank" rel="external">GeekTool</a> 自定义桌面</li>
<li><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> 搜索软件和文件</li>
<li><a href="https://contexts.co/" target="_blank" rel="external">Contexts</a> 窗口管理工具</li>
<li><a href="https://github.com/ovity/octotree" target="_blank" rel="external">Octotree</a> github 树形目录插件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端适配]]></title>
      <url>https://zhulichao.github.io/2019/12/04/mobile-adaptive/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.zcool.com.cn/article/ZNjQ0NjQw.html" target="_blank" rel="external">超全面的UI设计规范整理汇总（包含iPhone X适配）</a><br><a href="http://www.wenliku.com/sheji/2790.html" target="_blank" rel="external">APP启动页该如何适配</a><br><a href="http://www.wenliku.com/sheji/26846.html" target="_blank" rel="external">关于APP适配的经验总结</a></p>
<p>适配只跟倍率相关，同一倍率下，界面上的间距、文字大小、icon大小是一样的，不同的只是屏幕显示内容的宽度和高度不同，元素的间距不同。在适配的时候通常会遵循三个适配原则：<strong>等比缩放、弹性控件、文字流自适应。</strong></p>
<img src="/2019/12/04/mobile-adaptive/adaptive.png" title="图片素材来自设计驱动力">
<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>iOS 严格规定了各个栏的高度，这个是必须遵守的</p>
<table>
<thead>
<tr>
<th style="text-align:left">设备</th>
<th style="text-align:left">分辨率</th>
<th style="text-align:left">状态栏</th>
<th style="text-align:left">导航栏</th>
<th style="text-align:left">标签栏</th>
<th style="text-align:left">主页指示器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iPhone SE</td>
<td style="text-align:left">640×1136px</td>
<td style="text-align:left">44px</td>
<td style="text-align:left">88px</td>
<td style="text-align:left">98px</td>
<td style="text-align:left">–</td>
</tr>
<tr>
<td style="text-align:left">iPhone 6s/7/8</td>
<td style="text-align:left">750×1334px</td>
<td style="text-align:left">44px</td>
<td style="text-align:left">88px</td>
<td style="text-align:left">98px</td>
<td style="text-align:left">–</td>
</tr>
<tr>
<td style="text-align:left">iPhone 6s/7/8 Plus</td>
<td style="text-align:left">1242×2208px</td>
<td style="text-align:left">66px</td>
<td style="text-align:left">132px</td>
<td style="text-align:left">147px</td>
<td style="text-align:left">–</td>
</tr>
<tr>
<td style="text-align:left">iPhone X (@3x)</td>
<td style="text-align:left">1125×2436px</td>
<td style="text-align:left">132px</td>
<td style="text-align:left">132px</td>
<td style="text-align:left">147px</td>
<td style="text-align:left">102px</td>
</tr>
<tr>
<td style="text-align:left">iPhone X (@2x)</td>
<td style="text-align:left">750×1624px</td>
<td style="text-align:left">88px</td>
<td style="text-align:left">88px</td>
<td style="text-align:left">98px</td>
<td style="text-align:left">68px</td>
</tr>
</tbody>
</table>
<ul>
<li>垂直方向的间距固定</li>
<li>首焦图等图片需按比例适配</li>
<li>水平方向屏幕两边间距固定，中间元素间距等宽</li>
<li>切片命名的通用规范是，界面<em>功能</em>状态.png</li>
<li>状态栏、导航栏、标签栏是平台的基础控件，需单独处理，不在适配的范围内</li>
</ul>
<h2 id="移动端单屏页面适配"><a href="#移动端单屏页面适配" class="headerlink" title="移动端单屏页面适配"></a>移动端单屏页面适配</h2><h3 id="超出部分裁剪"><a href="#超出部分裁剪" class="headerlink" title="超出部分裁剪"></a>超出部分裁剪</h3><ul>
<li>保持图片比例不变，屏幕高度固定，裁剪左右超出屏幕部分</li>
<li>设置屏幕内图片裁剪比例，裁剪左右超过屏幕部分</li>
<li>底部区域高度固定，图片根据剩余高度适配进行裁剪</li>
<li>屏幕宽度固定，高度根据最大屏幕比来设计，主要信息区域在最小屏幕比里即可，根据不同的屏幕，对图片高度进行裁剪</li>
</ul>
<h3 id="为不同比例配图"><a href="#为不同比例配图" class="headerlink" title="为不同比例配图"></a>为不同比例配图</h3><ul>
<li>App 启动页中有部分启动页通常是一张静态图，例如默认启动页、新手引导图，不常进行更改，为了更好的效果，可以为不同比例的手机屏幕单独配图</li>
</ul>
<h3 id="使用切图弹性适配"><a href="#使用切图弹性适配" class="headerlink" title="使用切图弹性适配"></a>使用切图弹性适配</h3><ul>
<li>将页面内容分为多个图片，进行布局，提供开发四套切图（@2x、@3x、_xh、_xxh），然后根据屏幕倍率进行弹性适配</li>
</ul>
<h3 id="图文分离"><a href="#图文分离" class="headerlink" title="图文分离"></a>图文分离</h3><ul>
<li>图片使用等比例放大裁剪，文字需要根据页面位置定位</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-单位]]></title>
      <url>https://zhulichao.github.io/2019/12/04/css-unit/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/forthealllight/blog/issues/13" target="_blank" rel="external">响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh)</a></p>
<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>物理像素：设备屏幕实际拥有的像素点。比如iPhone 6的屏幕在宽度方向有750个像素点，高度方向有1334个像素点，所以iPhone 6总共有750*1334个物理像素。</p>
<p>逻辑像素：也叫“设备独立像素”（Device Independent Pixel, DIP），可以理解为反映在 CSS/JS 代码里的像素点数。每英寸的像素的数量保持在96左右，因此设置为12px的元素，无论使用什么样的设备查看网页，字体的大小始终为1/8英寸。iPhone 6总共有375*667个逻辑像素。</p>
<p>px 绝对尺寸，逻辑像素<br>pt 全称 point，1/72英寸，用于印刷业，也称“绝对长度”<br>em 相对尺寸，相对于当前对象内文本的 font-size<br>rem 相对尺寸，可理解为 “root em”, 其参考对象为根元 <code>&lt;html&gt;</code> 的 font-size<br>dp = px × (目标设备 dpi 分辨率 / 160)<br>rpx = px × (目标设备宽 px 值 / 750)</p>
<p>dp 是以屏幕分辨率为基准的动态单位，而 rpx 是以长度为基准的动态单位，两者是不能直接进行互换的。</p>
<p>如果将微信小程序放到平板电脑上运行，屏幕的宽度 px 值有可能会变化（横竖屏、分屏模式等等），这时候，再以宽度为基准，就会出现元素显示不正确的问题，从这一点可以看出，微信团队目前并不希望将小程序扩展到手机以外的设备中。</p>
<h2 id="1px-边框"><a href="#1px-边框" class="headerlink" title="1px 边框"></a>1px 边框</h2><p>CSS 中定义的 1px 边框实际有多个物理像素，如果想要一个物理像素显示，使用 <code>transform: scale(0.5)</code> 或 <code>transform: scale(0.33)</code>，只剩一个点了。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome-调试]]></title>
      <url>https://zhulichao.github.io/2019/12/02/chrome-debug/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>性能调试时使用 command + shift + n 快捷键打开无痕模式，来规避 Chrome 插件对页面性能的影响。</p>
<h2 id="Sinppets"><a href="#Sinppets" class="headerlink" title="Sinppets"></a>Sinppets</h2><p>当我们想不起某个方法的具体使用时，会打开控制台随意写一些测试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码。这时可以使用 Sources 下面的左侧的 Sinppets 代码片段，点击创建一个新的片段文件，写完测试代码后把鼠标放在新建的文件上右键 Run，再结合控制台查看相关信息。</p>
<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>确保 Screenshots checkbox 被选中；点击 Capture Settings（⚙️）按钮，DevTools 会展示很多设置，来模拟各种状况，如将 CPU 选为 4x slowdown 模拟4倍低速 CPU，将 Network 选为 Slow 3G 模拟慢速 3G。参考 <a href="https://segmentfault.com/a/1190000011516068" target="_blank" rel="external">全新Chrome Devtools Performance使用指南</a></p>
<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>查看当前网页的 JavaScript 占用的内存情况。参考 <a href="https://www.cnblogs.com/ys-ys/p/11336811.html" target="_blank" rel="external">Chrome 开发工具之 Memory</a></p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>可以告诉你这个网站的安全性，查看有效的证书等。</p>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>会列出所有的资源，包括 Manifest、Service Workers、Local Storage、Session Storage、IndexedDB、Web SQL(已被 IndexedDB 干趴下)、Cookies、Cache Storage、Application Cache(已被 Service Workers 干趴下)、BackGround Services、Frames 等，可以对存储的内容编辑和删除。参考 <a href="https://www.cnblogs.com/ys-ys/p/11444290.html" target="_blank" rel="external">Chrome 开发工具之 Application</a></p>
<h2 id="Audits"><a href="#Audits" class="headerlink" title="Audits"></a>Audits</h2><p>Audits 源于著名的开源自动化分析插件——Lighthouse，Lighthouse 不仅能够分析页面性能，还能够对 PWA、无障碍访问、SEO 等进行测试评分，可选网络环境，运行后给出优化建议。</p>
]]></content>
      
        <categories>
            
            <category> Debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-基础3]]></title>
      <url>https://zhulichao.github.io/2019/11/29/javascript-base3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="includes-VS-indexOf"><a href="#includes-VS-indexOf" class="headerlink" title="includes VS. indexOf"></a>includes VS. indexOf</h2><ul>
<li>返回值类型不同，includes 返回布尔型，indexOf 返回数值，在 if 判断时 includes 更简便</li>
<li>如果数组中有 NaN，要判断数组是否有存在 NaN，indexOf 是无法判断的，必须使用 includes</li>
<li>当数组有空值的时候，includes 会认为空的值是 undefined，而 indexOf 不会</li>
<li>如果要查找某个元素在数组中的位置，该使用 indexOf，如果要判断数组中是否存在某个元素，该使用 includes</li>
</ul>
<h2 id="import-VS-require"><a href="#import-VS-require" class="headerlink" title="import VS. require"></a>import VS. require</h2><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><ul>
<li>require 是 AMD 规范引入方式</li>
<li>require 动态加载，是运行时调用，只能在运行时确定模块的依赖关系及输入/输出，无法进行静态优化，可以出现在任何地方，可以使用通过计算得到的地址</li>
<li>require 是赋值过程，require 的结果就是对象、数字、字符串、函数等，再把结果赋值给某个变量，是普通的值拷贝传递</li>
<li>使用 exports、module.exports 导出</li>
</ul>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul>
<li>import 是 ES6 的一个语法标准，如果要兼容浏览器必须转化成 ES5 的语法，import 语法会被转码为 require</li>
<li>import 静态加载，是编译时调用，必须放在文件开头，支持编译时静态分析，便于 JS 引入宏和类型检验，不能使用通过计算得的到地址</li>
<li>import 是解构过程，使用 import 导入模块的属性或者方法是引用传递，read-only，单向传递</li>
<li>使用 export 导出</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[circleci-base]]></title>
      <url>https://zhulichao.github.io/2019/11/29/circleci-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>CircleCI 持续集成</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[离职交接]]></title>
      <url>https://zhulichao.github.io/2019/11/29/resign-notice/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="离职必须交付的"><a href="#离职必须交付的" class="headerlink" title="离职必须交付的"></a>离职必须交付的</h2><ul>
<li>询问辞职者对以前项目有没有觉得做的不好的、需要重构的，必须重构完测试通过上线，避免别人没办法接手维护</li>
<li>交接人需交接项目如何启动、需哪些环境变量及其值</li>
<li>建议交接人可提供其研发的工具的源码，至少可提供常见问题的处理方式</li>
<li>针对被交接的人，最好给他明确的交接范围，期望达到的接手程度，也需要询问他需要什么、期望交接人做什么吗</li>
<li>根据情况决定是否需要交接文档，如果有需要有人验收交接文档</li>
<li>辞职者需交接其掌握的全部账号，个人相关的无需提供密码，项目相关的需提供密码<ul>
<li>[注销]个人邮箱</li>
<li>[NAS]注销</li>
<li>[清除权限]github 账号</li>
<li>[清除权限]google drive</li>
<li>[清除权限]teambation</li>
<li>[清除权限]bearchat</li>
<li>[清除权限]basecamp</li>
<li>[清除权限]小程序后台</li>
<li>[清除权限]官网</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Project Management </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Management </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好习惯]]></title>
      <url>https://zhulichao.github.io/2019/11/29/good-habit/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul>
<li>记录每天工作步骤或工作内容，方便工作量评估和后期总结</li>
<li>善于评估是否用一个别人提供的东西还是自己写，跟同事讨论</li>
<li>遇到问题感觉很难进行时，停下手头工作思考是否哪里做的不对，及时修正</li>
<li>善于总结，可以写博客、简书等总结工作和心得，方便以后回顾，监督自己的成长</li>
</ul>
<h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><ul>
<li>知道看书的必要性，扩展知识面</li>
<li>个人目标、不要做自己不喜欢的人</li>
<li>发现自己的缺点后逐步改善，定期回顾</li>
<li>善于自我管理，平衡家庭和工作，给自己留出成长的时间</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Ideas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ideas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-零散知识2]]></title>
      <url>https://zhulichao.github.io/2019/11/29/css-scattered2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="last-child-与-last-of-type"><a href="#last-child-与-last-of-type" class="headerlink" title="last-child 与 last-of-type"></a>last-child 与 last-of-type</h2><p>:last-child 表示其父元素的最后一个子元素，且这个元素是 css 指定的元素，才可以生效，否则无法生效，first-child 同理。:last-of-type 表示其父元素下的最后一个指定类型的元素。</p>
<img src="/2019/11/29/css-scattered2/last-child.png" title="last-child 与 last-of-type">
<h2 id="锚点定位偏移"><a href="#锚点定位偏移" class="headerlink" title="锚点定位偏移"></a>锚点定位偏移</h2><p>在 <code>&lt;section&gt;</code> 前面再加一个 <code>&lt;a class=&quot;target-fix&quot;&gt;</code> 作为暗锚，将这个锚点进行偏移：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.target-fix &#123;</div><div class="line">    position: relative;</div><div class="line">    top: <span class="number">-60</span>px; <span class="comment">// 偏移为nav被fixed元素的高度</span></div><div class="line">    display: block;</div><div class="line">    height: <span class="number">0</span>; <span class="comment">// 高度为0</span></div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>!important &gt; 内联样式（1000）&gt; ID选择器（100）&gt; 类选择器（10）= 属性选择器（10）= 伪类选择器（10）&gt; 元素选择器（1）= 伪元素选择器（1) &gt; 通配符选择器（0）= 关系选择器（0）= 否定伪类（0）&gt; 继承</p>
<p>当选择器出于同一种特殊性的时候，位于css文件下部的样式会覆盖上面的样式。</p>
<h2 id="Canvas-、SVG、WebGL"><a href="#Canvas-、SVG、WebGL" class="headerlink" title="Canvas 、SVG、WebGL"></a>Canvas 、SVG、WebGL</h2><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><ul>
<li>Canvas 通过 JavaScript 来绘制 2D 图形</li>
<li>逐像素进行渲染，依赖分辨率</li>
<li>一旦图形被绘制完成就不会继续得到浏览器的关注，如果其位置发生变化，整个场景也需要重新绘制，包括任何可能已被图形覆盖的对象</li>
<li>不支持事件处理器</li>
<li>弱的文本渲染能力</li>
<li>能够以 .png 或 .jpg 格式保存结果图像</li>
<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>
</ul>
<h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><ul>
<li>SVG 是一种使用 XML 描述 2D 图形的语言</li>
<li>矢量图，不依赖分辨率，难以表现色彩丰富的逼真图像效果</li>
<li>每个被绘制的图形均被视为对象，如果对象的属性发生变化，浏览器能够自动重现图形</li>
<li>支持事件处理器</li>
<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>
<li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li>
<li>不适合游戏应用</li>
</ul>
<h3 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h3><ul>
<li>基于 Canvas 的 3D 框架，主要用来做 3D 展示、动画、游戏</li>
</ul>
<h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>CSS 模块化的解决方案有很多，但主要有三类：</p>
<ul>
<li>命名约定，代表 BEM、OOCSS、AMCSS、SMACSS</li>
<li>CSS in JS，代表 styled-components</li>
<li>使用JS 来管理样式模块，代表是 CSS Modules</li>
</ul>
<p>CSS Modules 是所有的 class 的名称和动画的名称默认属于本地作用域的 CSS 文件。所以 CSS Modules 不是一个官方的规范，也不是浏览器的一种机制，它是一种构建步骤中的一个进程，通过构建工具的帮助，可以将 class 的名字或者选择器的名字作用域化。有了 CSS Modules，就可以确保所有的样式能够服务于单个组件：集中在一个地方；只应用于那个组件，其他组件不适用。这样设计的目的在于解决 CSS 中的全局作用域问题。</p>
<p>Webpack 自带的 css-loader 组件，自带了 CSS Modules，通过简单的配置即可使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  rules: [</div><div class="line">    &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      use: [</div><div class="line">        <span class="string">'style-loader'</span>,</div><div class="line">        &#123;</div><div class="line">          loader: <span class="string">'css-loader'</span>,</div><div class="line">          options: &#123;</div><div class="line">            modules: <span class="literal">true</span>,</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">      &#125;</div><div class="line">  ],</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h2><p>BFC(Block Formatting Context) 块级格式化上下文，是 Web 页面中盒模型布局的 CSS 渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。可以用来解决两相邻元素间距发生重叠、清除浮动等问题。</p>
<h3 id="形成-BFC-的条件"><a href="#形成-BFC-的条件" class="headerlink" title="形成 BFC 的条件"></a>形成 BFC 的条件</h3><ul>
<li>浮动元素，float 除 none 以外的值</li>
<li>定位元素，position 为 absolute 或 fixed</li>
<li>非块盒的块容器，display 为 inline-block 或 table-cell 或 table-caption</li>
<li>overflow 除 visible 以外的值（hidden，auto，scroll)</li>
</ul>
<h3 id="BFC-的特性"><a href="#BFC-的特性" class="headerlink" title="BFC 的特性"></a>BFC 的特性</h3><ul>
<li>内部的 Box 会在垂直方向上一个接一个的放置</li>
<li>BFC 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素</li>
<li>垂直方向的距离由 margin 决定，属于同一个 BFC 的相邻 Box 的 margin 会发生重叠</li>
<li>元素的 margin box 的左边与包含块 border box 的左边相接触，存在浮动也是如此</li>
<li>BFC 的区域不会与 float 的元素区域重叠</li>
<li>计算 BFC 的高度时，浮动元素也参与计算</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[收藏连接]]></title>
      <url>https://zhulichao.github.io/2019/11/28/collect-link/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p><a href="http://app.xrespond.com/" target="_blank" rel="external">查看网页适配的效果</a><br><a href="http://fontastic.me/" target="_blank" rel="external">字体图标</a><br><a href="https://huaban.com/" target="_blank" rel="external">花瓣</a><br><a href="https://www.ui8.net/" target="_blank" rel="external">UI 设计资源</a><br><a href="http://www.biaonimeia.com/" target="_blank" rel="external">标你妹啊</a><br><a href="https://www.liantu.com/" target="_blank" rel="external">二维码图片生成器</a><br><a href="https://img.top/" target="_blank" rel="external">智能图像压缩</a><br><a href="https://www.processon.com/" target="_blank" rel="external">在线流程图</a></p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p><a href="https://natapp.cn/" target="_blank" rel="external">内网穿透</a><br><a href="https://fir.im/" target="_blank" rel="external">应用托管平台</a><br><a href="https://placeholder.com/" target="_blank" rel="external">图片占位</a></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><a href="http://xclient.info/" target="_blank" rel="external">MAC 应用</a></p>
]]></content>
      
        <categories>
            
            <category> Collect </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Collect </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[风格指南]]></title>
      <url>https://zhulichao.github.io/2019/11/28/style-guide/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一定要语义化，所有命名使用有意义的英文单词，复数加 s，一定不要拼写错误，尽量不要缩写，可以借助 IDE 插件进行检查，如 Code Spell Checker，使用统一的风格，哪里用 camelCase，哪里用 kebab-case，保持一致，减少写注释。</p>
<p><a href="http://marsgis.cn/w3cschool/codeguide/index.html" target="_blank" rel="external">火星科技Web前端编码规范</a></p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li>使用环境变量加载与部署相关的配置，永远也不要把它们作为常量写入代码，密钥和其它有价值的信息应该与代码库分离</li>
<li>使用 dotenv 配置环境变量</li>
</ul>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul>
<li><a href="https://cn.vuejs.org/v2/style-guide/index.html" target="_blank" rel="external">Vue 风格指南</a></li>
<li><a href="https://pablohpsilva.github.io/vuejs-component-style-guide/#/chinese" target="_blank" rel="external">Vue.js 组件编码规范</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JavaScript Style Guide</a></li>
<li>公用组件使用 PascalCase</li>
<li>页面使用 kebab-case 或者 camelCase</li>
<li>方法名、变量使用 camelCase</li>
<li>数据相关的文件以 _data 结尾</li>
<li>create 表示从无到有, 产生了新的东西</li>
<li>add 通常是把一个东西添加到另一个东西，比如 add to cart, 通常产生的是一个关系，而不是一个具体的东西</li>
<li>new 通常是 ui 用的</li>
<li>update 是修改内容, 产生新的值</li>
<li>change 是替换，一个换另一个</li>
<li>edit 通常用于 ui</li>
<li>remove 是移走, 消失的往往是关系</li>
<li>delete 是删除，真的把东西给消失掉了</li>
<li>方法名称 handleXXX 形式，如 handleClick</li>
<li>如果是不使用的变量，如方法中的参数，可以命名为 _</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- components</div><div class="line">    - AdvSearch</div><div class="line">        - index.js</div><div class="line">        - AdvSearch.vue</div><div class="line">        - AdvSearch.less</div><div class="line">- views</div><div class="line">    - home</div><div class="line">        - home.less</div><div class="line">        - home.vue</div><div class="line">        - components</div><div class="line">            - homeHeader.vue</div><div class="line">            - homeHeader.less</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>前端统一使用一个 IDE，尽量统一配置，文件要经常格式化</li>
<li>确定使用 yarn 还是 npm 装包后只用一个，不要混着用，可以借助代码审核机制 pull request</li>
<li>删除无用的文件、注释代码、未使用的引用</li>
<li>尽量不要自己拼接字符串和格式转换，使用 classsnames、query-string、numerical、lodash、date-fns、moment.js 等第三方工具</li>
<li>验证尽量使用 validator 等第三方工具</li>
<li>页面中使用封装好的组件进行布局，如 Layout、Row、Column、Container，当需要做页面适配的时候，只需修改这些公用组件，其它地方是不需要处理的</li>
<li>即使有默认值也最好写上，万一以后改了默认值就不用修改代码了</li>
<li>标签引用顺序保持一致，template、script、style</li>
<li>引用时绝对路径引用和相对路径引用分开，中间加空行；如果是引用到目录，以斜杠结尾 <code>import AdvSearch from &#39;components/AdvSearch/&#39;</code>；引用文件和正式代码中间加空行</li>
<li>单引号、双引号使用场景</li>
<li>结尾都写分号，分行的对象属性结尾都写逗号</li>
<li>组件的文件夹下，用 index 文件进行默认导出</li>
<li>多个地方引用的常量，通过 config 文件进行配置，统一从 config 文件引用，常量用全大写</li>
<li>引用有使用 @ 的，还有写完整路径的，主要是 api 文件夹下</li>
<li>style 写成内联还是用 class 引用</li>
<li>注释符号后有一个空格，英文单词和汉字中间有空格</li>
<li><code>+</code> 等符号前后都有空格</li>
<li>图片如果比较大使用 <a href="https://img.top/" target="_blank" rel="external">img.top</a> 压缩，也可以使用打包工具压缩</li>
<li>public 中的文件，是不会经过编译的，打包后复制一遍，public 建议放一些外部第三方文件，src/assets 放自己的文件</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>eslint、tslint、stylelint 配合 prettier，配置 js、css 等代码检查工具</li>
<li>husky、lint-staged 在提交 commit 前进行格式化</li>
</ul>
<h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><ul>
<li>动宾短语，如 添加 xx，修正 xx，更新 xx，删除 xx</li>
<li>完成一个完整的功能时尽早提交，不要提这个功能无关的代码</li>
<li>装包或配置相关的代码单独提交，只提交一个功能相关的代码</li>
<li>除非已沟通过，否则不要提交别人的代码</li>
<li>可以使用 rebase 命令修正前面的 commit</li>
<li><code>git commit --fixup commitID</code></li>
<li><code>git rebase -i --autosquash HEAD~3</code></li>
</ul>
<h2 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h2><ul>
<li><a href="http://keepachangelog.com/" target="_blank" rel="external">Keep a Changelog</a></li>
<li><a href="http://semver.org/" target="_blank" rel="external">Semantic Versioning</a></li>
<li>简洁，主要描述功能的修改</li>
<li>markdown 格式，最新发布的版本在上面</li>
<li>标明分类，新增、修改、删除等</li>
</ul>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 1.1.1 - 2018-11-21</span></div><div class="line"></div><div class="line"><span class="section">### 新增</span></div><div class="line"></div><div class="line"><span class="bullet">- </span>新增市场活动功能</div><div class="line"></div><div class="line"><span class="section">### 修改</span></div><div class="line"></div><div class="line"><span class="bullet">- </span>修改导航栏样式</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git-基础3]]></title>
      <url>https://zhulichao.github.io/2019/11/18/git-base3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="配置的三个级别"><a href="#配置的三个级别" class="headerlink" title="配置的三个级别"></a>配置的三个级别</h2><p>local 针对当前仓库，优先级最高<br>global 针对当前用户，优先级其次<br>system 针对系统，优先级最低</p>
<h2 id="四种对象"><a href="#四种对象" class="headerlink" title="四种对象"></a>四种对象</h2><p>git 使用40个16进制字符的 SHA-1 Hash 来唯一标识对象，git 有4种对象：</p>
<ul>
<li>blob 文本文件，二进制文件，链接文件，<strong>是在代码提交到 Stage 区时根据内容生成的二进制文件</strong></li>
<li>tree 目录结构，包括 tree 和 blob，在进行提交时把 Stage 区中的 blob 对象封装在 tree 中</li>
<li>commit 存储一次提交的信息，指向一个 tree</li>
<li>tag 指向固定的历史提交，可以当做是 commit 的别名</li>
</ul>
<p>git 只关心文件的内容，如果2个文件有同样的内容，它们会指向同一个 blob 对象，文件名等其它信息会存储在 tree 对象中。</p>
<p><code>git hash-object [file-name]</code> 查看文件的 hash 码<br><code>git cat-file -p [id]</code> 显示仓库中对象的类型、大小和内容信息</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>working directory 工作区，日常编辑代码的地方，维护着一个树形结构<br>git repository 本地仓库，commit 指向的一个树形结构<br>staging area 暂存区，.git/index 文件，工作区与本地仓库中间的缓存，维护的是虚拟的树形结构，代表的是需要提交的工作的状态</p>
<p>工作区是我们能看到的区域，我们在工作区修改增加代码，完成编辑后，用 <code>git add</code> 将工作区文件添加到暂存区，然后利用 <code>git commit</code> 提交文件到本地仓库。分支就是 commit 的引用，在这些分支上工作会产生各自的历史，分支切换就是 HEAD 引用的移动以及暂存区和工作区的还原，tag 指向一个固定的 commit。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><code>git add</code> 工作区到暂存区<br><code>git commit</code> 暂存区到和本地仓库<br><code>git rm [file-name]</code> 删除暂存区和工作区的文件<br><code>git rm --cached [file-name]</code> 删除暂存区的文件<br><code>git mv [old-name] [new-name]</code> 重命名或移动暂存区和工作区的文件<br><code>git status</code> 查看工作区和暂存区的区别<br><code>git stash save &quot;name&quot;</code> 将工作区放入 stash 栈中<br><code>git stash save -a &quot;name&quot;</code> 将工作区和暂存区放入 stash 栈中<br><code>git stash pop --index stash@{0}</code> 还原工作区和暂存区<br><code>git stash apply --index stash@{0}</code> 还原工作区和暂存区，不删除 stash 中的索引<br><code>git stash drop stash@{0}</code> 删除 stash 栈中的索引<br><code>git stash clear</code> 清除 stash 栈中的全部索引<br><code>git merge --abort</code> 放弃当前合并操作</p>
<h2 id="查看与对比历史记录"><a href="#查看与对比历史记录" class="headerlink" title="查看与对比历史记录"></a>查看与对比历史记录</h2><p><code>git show</code> 显示 git 对象<br><code>git log [--oneline] [--decorate] [--graph] [--all]</code> 查看历史记录<br><code>git diff [--color-worlds] [--word-diff]</code> 查看工作区与暂存区的区别<br><code>git diff [file-name]</code> 查看工作区与暂存区指定文件的区别<br><code>git diff --cached</code> 查看暂存区与本地仓库的区别<br><code>git diff [提交hash码或者HEAD]</code> 查看工作区与本地仓库的区别<br><code>git diff 提交区hash码A  提交区hash码B</code> 查看两个不同提交的区别<br><code>git diff 分支A的某个hash码  分支B的某个hash码</code> 两个不同分支间比较</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p><code>git checkout [file-name]</code> 从暂存区或本地仓库恢复文件，回到最近一次 git commit 或 git add 的状态<br><code>git checkout .</code> 从暂存区或本地仓库恢复所有文件，<strong>撤销工作区修改，不改变暂存区</strong><br><code>git checkout [commit 引用] [file-name]</code> 还原工作区和暂存区<br><code>git reset [file-name]</code> 撤销暂存区文件<br><code>git reset .</code> 撤销所有暂存区文件，<strong>清空暂存区文件，不改变工作区</strong><br><code>git reset [commit 引用] [file-name]</code> 还原暂存区<br><code>git clean -n [-X|x]</code> 查看执行 git clean 会清除的文件<br><code>git clean -f</code> 清除未跟踪的文件，不包括 gitignore 中指定的文件<br><code>git clean -x -f</code> 清除所有未跟踪文件，包括 gitignore 中指定的文件<br><code>git clean -X -f</code> 保留 gitignore 之外的文件，清除 gitignore 中指定的文件<br><code>git revert [commit 引用]</code> 产生一个新的提交来撤销以前的提交</p>
<p>commit 引用可能是 commitID、branch、HEAD、tag。</p>
<h2 id="重写历史记录"><a href="#重写历史记录" class="headerlink" title="重写历史记录"></a>重写历史记录</h2><p>git commit 和 git rebase 参考<a href="/2018/05/04/git-base2/">Git-基础2</a><br><code>git reflog</code> 查看 HEAD 引用的历史<br><code>git reset --hard HEAD@{n}</code> 回到指定的历史提交，还原暂存区和工作区<br><code>git reset --mixed HEAD@{n}</code> 回到指定的历史提交，只还原暂存区，为默认参数<br><code>git reset --soft HEAD@{n}</code> 回到指定的历史提交，不原暂存区和工作区</p>
<h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title="gitignore 文件"></a>gitignore 文件</h2><ul>
<li>以’#’开始的行，被视为注释</li>
<li>以斜杠“/”开头表示目录</li>
<li>以星号“*”通配多个字符</li>
<li>以问号“?”通配单个字符</li>
<li>以方括号“[]”包含单个字符的匹配列表</li>
<li>以叹号“!”表示不忽略(也就是跟踪)匹配到的文件或目录</li>
<li><code>git check-ignore -v [file|folder]</code> 查找 gitignore 文件中匹配该文件的规则</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-规范]]></title>
      <url>https://zhulichao.github.io/2019/11/14/css-guide/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BEM-–-Blocks-ELements-and-Modifiers"><a href="#BEM-–-Blocks-ELements-and-Modifiers" class="headerlink" title="BEM – Blocks, ELements and Modifiers"></a>BEM – Blocks, ELements and Modifiers</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Block</div><div class="line">.container &#123;&#125;</div><div class="line">// Element, depends upon the block</div><div class="line">.container__btn &#123;&#125;</div><div class="line">// Modifier, changes the style of the block</div><div class="line">.container--rounded &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="rscss"><a href="#rscss" class="headerlink" title="rscss"></a><a href="https://rscss.io/" target="_blank" rel="external">rscss</a></h2><h2 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a><a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="external">OOCSS</a></h2>]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 git 开发流程]]></title>
      <url>https://zhulichao.github.io/2019/11/12/git-workflow/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们的项目中，master、develop 为受保护分支，master 对应生产环境，develop 对应测试环境，不能直接在该分支上提交代码。开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。当特性开发完毕后，提交 pull request 到 develop 分支，所有前端进行 code review，如果有问题进行 Request changes，如果没问题点击 Approve，审核没问题后才合并到 develop 分支，并自动部署到测试环境。测试过程中如果发现 bug，从 develop 拉出新的分支修改发现的 bug。当测试没问题需要发布新版本时，需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，更新 CHANGELOG.md 文件和 package.json、package-lock.json 的 version，提交 pull request 到 master 和 develop 分支，进行合并，并自动发布到生产环境和测试环境。release 的 pull request，到 develop 和 master 上都用 “Create a merge commit” ，其它提交到 develop 的 pull request，都用 “Squash and merge” 合并。<strong>Squash and merge 方式可能会产生一些问题。</strong></p>
<p>当生产环境发现紧急 bug 时，直接从对应的 master 拉出一条 hotfix 分支（例如 hotfix-1.0.1），在该分支上做 bug 修复，并提交 pull request 到 develop 和 master 分支，进行合并。</p>
<p>如果 develop 分支发生变化时，有正在开发的 feature 分支，需要执行 rebase 操作以保证是基于最新的 develop 分支。</p>
<p>对于版本号我们也有要求，使用 Semver（Semantic Version）版本命名规范，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发流程]]></title>
      <url>https://zhulichao.github.io/2019/10/29/develop-flow/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><img src="/2019/10/29/develop-flow/work-flow.jpg" title="项目开发流程">
<p>如图所示，项目的运行一共涉及6个环节。PM 在与业务方进行需求确认后产出文档，评审通过后通过 <a href="https://www.atlassian.com/software/confluence" target="_blank" rel="external">Confluence</a> 交付；UX 根据需求文档进行交互涉及，产出交互稿，评审通过后通过 <a href="https://www.abstract.com/" target="_blank" rel="external">Abstract</a> 交付，查看文件时使用 <a href="https://www.sketch.com/" target="_blank" rel="external">Sketch</a> 查看；后面 BE 和 UI 并行工作，BE 根据 UX 交互稿开发接口，没有评审，通过 Docker 镜像的形式交付，或者线上的开发环境，或者 FE 自己拉取项目启动，查看 graphql 文档；UI 根据交互稿设计页面，评审通过后通过<a href="https://lanhuapp.com/web/#/item" target="_blank" rel="external">蓝湖</a>交付，同时也会上传文件到 Abstract；BE 和 UI 都交付后，FE 进行开发，完成开发后部署到测试环境；最后由 QA 进行功能测试，使用 <a href="https://fir.im/" target="_blank" rel="external">fir.im</a> 发布移动端安装包，使用 <a href="https://www.atlassian.com/software/jira" target="_blank" rel="external">Jira</a> 进行 bug 管理 。</p>
<p>BE 和 FE 都使用 VSCode 进行开发，项目托管在 GitHub，使用 GitHub Desktop 维护代码，具体的开发流程参考<a href="/2019/11/12/git-workflow/">使用 git 开发流程</a>。</p>
<p>tip：最好从 PM 环节开始，功能模块的名称及对应的英文就已确定，后面的环节都使用统一的名称。最好所有人都参与评审，在每个环节评审前都给参与评审的人留出一些时间，提前仔细看一遍评审的内容，尽量在评审时发现并提出问题。</p>
<h2 id="评审注意点"><a href="#评审注意点" class="headerlink" title="评审注意点"></a>评审注意点</h2><h3 id="PM-—-gt-UX"><a href="#PM-—-gt-UX" class="headerlink" title="PM —&gt; UX"></a>PM —&gt; UX</h3><ul>
<li>成本：人力、时间、紧急程度</li>
<li>项目复杂度</li>
<li>能不能基于现有程序解决</li>
<li>可行的解决方案（从工程师角度出发）</li>
<li>和现有的业务是什么关系</li>
<li>对公司意味着什么</li>
</ul>
<h2 id="UX-—-gt-UI、BE"><a href="#UX-—-gt-UI、BE" class="headerlink" title="UX —&gt; UI、BE"></a>UX —&gt; UI、BE</h2><ul>
<li>功能和跳转逻辑</li>
<li>后端数据关联、数据结构、穷尽所有的状态和类型</li>
<li>状态的更新</li>
<li>各个环节提示、报错信息、placeholder</li>
<li>与以后的后台是否有冲突、更改、新增</li>
</ul>
<h2 id="BE-gt-FE"><a href="#BE-gt-FE" class="headerlink" title="BE -&gt; FE"></a>BE -&gt; FE</h2><ul>
<li>接口齐全</li>
<li>参数、返回有清晰描述</li>
<li>接口可使用</li>
<li>有测试数据</li>
</ul>
<h2 id="UI-—-gt-FE"><a href="#UI-—-gt-FE" class="headerlink" title="UI —&gt; FE"></a>UI —&gt; FE</h2><ul>
<li>文案 、素材、图片格式是否齐全</li>
<li>是否遵守规范</li>
<li>是否极端情况考虑（字最多/少）</li>
<li>适配</li>
<li>动画的开发成本</li>
<li>是否与 UX 保持一致</li>
</ul>
<h2 id="开发-—-gt-QA"><a href="#开发-—-gt-QA" class="headerlink" title="开发 —&gt; QA"></a>开发 —&gt; QA</h2><ul>
<li>准备好基础数据，如果需要准备 mock 数据</li>
<li>完成冒烟测试</li>
<li>之前测试的bug和功能是否覆盖</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node-基础]]></title>
      <url>https://zhulichao.github.io/2019/10/25/node-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>__dirname 指向被执行 js 文件的绝对路径<br>./ 指向执行 node 命令的路径，一个特殊情况是在 require() 中使用 ./ 时，这时的路径就会是含有 require() 的脚本文件的相对路径<br>path.join 使用特定的分隔符将路径片段连接起来生成规范路径<br>path.resolve 把一个路径解析为绝对路径，相当于执行 cd，/ 被解析为根目录</p>
<ul>
<li><strong>Loopback — 企业级别的 node 框架</strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM-发布包]]></title>
      <url>https://zhulichao.github.io/2019/10/16/npm-module/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>注册 <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> 账号</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><code>npm adduser</code> 如果报了 401 Unauthorized 错误，查看是否设置过镜像，删除 .npmrc 中的 registry 行即可</p>
<p><code>npm publish .</code></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>修改 package.json 中的 version</p>
<p><code>npm publish .</code></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>npm unpublish [name] --force</code> 只有发布72小时之内的包可以删除</p>
<h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><p>安装包后如果想要在终端中使用命令，package.json 中需要添加 bin 字段定义命令及对应的执行文件，且该文件的第一行添加 <code>#!/usr/bin/env node</code>。</p>
<p><code>#!</code> 指明这个脚本文件的解释程序，<code>/usr/bin/env</code> 就是告诉系统可以在 PATH 目录中查找，<code>node</code> 指明用 node 执行脚本文件，所以配置 <code>#!/usr/bin/env node</code>，就是解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。</p>
<h2 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h2><p><code>npm install –global verdaccio</code> 全局安装 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="external">verdaccio</a><br><code>verdaccio</code> 启动 verdaccio<br><code>npm adduser --registry http://localhost:4873</code> 登录用户<br><code>npm set ca null</code> 如果不使用 https，设置为 null 即可<br><code>npm publish --registry http://localhost:4873</code> 发布包，不能与线上包同名<br><code>npm unpublish --registry http://localhost:4873 --force</code> 删除包</p>
]]></content>
      
        <categories>
            
            <category> NPM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不同类型的图片]]></title>
      <url>https://zhulichao.github.io/2019/09/30/different-images/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>GIF（图形交换格式）1987：是位图的一种，但与JPEG或PNG不同，GIF文件最多使用来自256种颜色的色板中的颜色，虽然256种可能听起来像很多蜡笔，但复杂的照片通常有数千种色调。此颜色范围在GIF转换过程中丢失，而这也是彩色照片不使用GIF格式的关键原因。但是256色的限制可以帮助保持较小的文件大小，这对于即使是最慢的互联网速度也是理想的。无损，提供了网络透明度选项，适用于简单的动画、小图标、低像素间变化的图形（即大量的平面颜色，如标志和旗帜）。</p>
<ul>
<li>优点：动态图，可透明，体积小，可用于后台统计日志统计前端性能</li>
<li>缺点：处理256中颜色，不能半透，处理锯齿效果不好</li>
</ul>
<h2 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h2><p>JPEG（联合图像专家组）1992：可以将此格式称为“JPEG”或“JPG”，是一种16位格式，可以通过混合红色、蓝色和绿色光来显示数百万的颜色。这使得JPG非常“相片友好”。这就是为什么当涉及到市场上大多数的数码相机时，它会是一个标准格式的部分原因。JPEG格式还允许您灵活选择压缩图像的程度——从0％（重压缩）到100％（无压缩）。60％-75％的压缩程度会大幅缩减文件大小，同时能使您的图像在大多数屏幕看起来无差别。有损，不能保留透明度，适用于静止图像、摄影、图像具有复杂的颜色和动态。</p>
<ul>
<li>优点：色彩多</li>
<li>缺点：有损压缩</li>
</ul>
<h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>PNG（便携式网络图形）1996：就像GIF和JPEG格式之间的结合，PNG-8格式与GIF相似，使用256色板，PNG-24与JPEG相似，允许用数百万种颜色来渲染图像。无损，提供了保留透明度选项，适用于需要透明度的Web图形、颜色重和复杂的照片和图形、需要重新编辑和重新导出的图片。</p>
<ul>
<li>优点：透明、无损压缩、渐进显示和流式读写、保留图像名称、作者、版权、创作时间，可以把代码压缩到图片里去，参见开源项目 <a href="https://github.com/claus/PNGDrive" target="_blank" rel="external">PNGDrive</a></li>
<li>缺点：色彩支持少 PNG8，PNG24，PNG32，IE6 不支持</li>
</ul>
<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>SVG（可缩放向量图形）：不是纯位图格式，是一个矢量格式。基于XML的标记，可以在任何文本编辑器中编辑，并通过JavaScript或CSS修改。因为矢量可以缩放到任何大小，同时保持清晰的图像质量，它们是响应设计的理想选择。SVG文件中嵌入位图图形是有可能的，正如在HTML中嵌入JPEG图片，这给了SVG无可挑剔的灵活性和力量。矢量/无损，适合显示在矢量图形应用程序（如Illustrator，Sketch和Inkscape）中制作的徽标，图标，地图，标记，图表和其他图形，视网膜屏幕显示。</p>
<ul>
<li>优点：矢量图，无损压缩，绘制路径 xml 语言</li>
<li>缺点：浏览器支持的不是很好，主要用于移动端 font-face</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大小写敏感问题]]></title>
      <url>https://zhulichao.github.io/2018/11/06/case-sensitive-problem/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在项目开发中，如果改变了文件或文件夹名称的大小写，默认情况下 git 是无法检测到的，因为 git 是不区分大小写的，windows 和 mac 系统默认也是不区分大小写的。</p>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ul>
<li><code>git config core.ignorecase false</code> 关闭 git 忽略大小写</li>
<li>修改文件名称 README.md 为 readme.md</li>
<li><code>git mv README.md readme.md</code> 在 git 中对文件重命名，如图1</li>
<li>修改文件夹名称 Folder 为 folder</li>
<li><code>git mv Folder temp &amp;&amp; git mv temp folder</code> 在 git 中对文件夹重命名，注意需使用临时名称，否则无法重命名，如图2、3</li>
<li>后面正常提交就可以了</li>
</ul>
<img src="/2018/11/06/case-sensitive-problem/mv_file.png" width="400" title="图1">
<img src="/2018/11/06/case-sensitive-problem/err.png" width="400" title="图2">
<img src="/2018/11/06/case-sensitive-problem/mv_folder.png" width="400" title="图3">
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>可以将电脑磁盘单独分出一个大小写敏感的分区作为开发空间，再关闭 git 忽略大小写即可。注意在大小写敏感的分区开发时，如果存在同名大小写不同的文件，有些编辑器如 vscode 可能只会加载一个文件。</p>
<p>最后，可以使用 <a href="https://github.com/Urthen/case-sensitive-paths-webpack-plugin" target="_blank" rel="external">case-sensitive-paths-webpack-plugin</a> 强制所有模块的整个路径匹配磁盘上的实际路径的。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[URL 设计规范]]></title>
      <url>https://zhulichao.github.io/2018/09/01/url-design/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>字母全部用小写，尽量短</li>
<li>使用 kebab-case（短横线分割），谷歌官方建议，有利于 SEO</li>
<li>使用 / 标识资源层级</li>
<li>在查询字符串或资源字段中使用 camelCase</li>
<li>不应包含任何用户相关的信息，避免复制 url 时绑定错误的个人信息</li>
<li>避免太多参数，目录层次尽量少</li>
<li>总是使用复数名词来命名指向一个集合的 url：/users</li>
<li>在源代码中，将复数转换为具有列表后缀名描述的变量和属性</li>
<li>坚持这样一个概念：始终以集合名起始并以标识符结束，如 /students/123</li>
<li>URLs 里面请尽量少用动词</li>
<li>为非资源型请求使用动词，这种情况下，API 并不需要返回任何资源，而是去执行一个操作并返回执行结果，这些不是 CRUD 操作</li>
<li>请求体或响应类型如果是 JSON，那么请遵循 camelCase 规范为 JSON 属性命名来保持一致性</li>
<li>即使资源类似于对象实例或数据库记录的单一概念，也不应该将 table_name 用作资源名称或将 column_name 作为资源属性</li>
<li>只有在您的 URL 上面命名资源时才使用名词，不要尝试解释其功能</li>
<li>对于嵌套资源，请在 URL 中把他们的关系表现出来，如 /schools/2/students/31，表示得到 2 学校的 31 学生的信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> URL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> URL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信服务号开发基础]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-service-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>微信服务号开发其实就是普通的网站开发，只不过其中可调用微信的 js-sdk 使用基于微信的 api，我们的项目中只是使用了支付、隐藏/显示菜单、自定义分享内容的功能，主要是为了支持小程序不能进行 iOS 支付的问题。由于一部分功能是在小程序中的，就需要小程序与服务号的互相跳转。服务号可通过菜单的定义、长按图片识别二维码跳转到小程序，由于小程序内部只能识别小程序码，不能直接跳转到服务号，只能使用图片+文字引导的方式让用户自己进入服务号。</p>
<h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">公众平台测试账号</a><br><a href="https://mp.weixin.qq.com/debug" target="_blank" rel="external">微信公众平台接口调试工具</a><br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="external">微信 JS 接口签名校验工具</a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>扫码登录<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">公众平台测试账号</a>。</li>
<li>接口配置信息，URL 为后端地址，如“<a href="http://lichao-server.example/api/weixin”" target="_blank" rel="external">http://lichao-server.example/api/weixin”</a></li>
<li>JS接口安全域名，前端域名，如“lichao.example”</li>
<li>体验接口权限表中，网页服务/网页账号，修改网页授权获取用户基本信息为后端域名，如“lichao-server.example”</li>
<li>后端需要 appID、appsecret、Token 进行微信授权、微信支付等操作</li>
<li>如果是前后端分离的，后端需要设置跨域</li>
<li><p>如果是前后端分离的，后端需要设置 cookie 在指定域名下的共享</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cors <span class="keyword">from</span> <span class="string">'cors'</span>;</div><div class="line">...</div><div class="line"><span class="comment">// 跨域设置，origin 为前端地址</span></div><div class="line">app.use(</div><div class="line">  cors(&#123;</div><div class="line">    origin(origin, cb) &#123;</div><div class="line">      cb(<span class="literal">undefined</span>, server.whitelist.includes(origin));</div><div class="line">    &#125;,</div><div class="line">    credentials: <span class="literal">true</span>,</div><div class="line">  &#125;),</div><div class="line">);</div><div class="line"><span class="comment">// 共享 cookie 设置，server.domain 为前后端都可使用的域名</span></div><div class="line">app.use(</div><div class="line">  session(&#123;</div><div class="line">    store: <span class="keyword">new</span> (connectRedis(session))(&#123; client: redis &#125;),</div><div class="line">    name: <span class="string">'sid'</span>,</div><div class="line">    resave: <span class="literal">true</span>,</div><div class="line">    saveUninitialized: <span class="literal">true</span>,</div><div class="line">    secret: server.sessionSecret,</div><div class="line">    cookie: &#123; maxAge: <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>, domain: server.domain &#125;,</div><div class="line">  &#125;),</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>前端需要 appID 执行 wx.config 进行 js-sdk 签名</p>
</li>
</ul>
<h2 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h2><p>使用手机微信打开网页就是线上运行的效果，但这样不能使用 localhost 或 127.0.0.1 的地址，需要内网穿透工具进行本地端口映射，然后通过穿透的地址访问，可以使用 <a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a>，但是有些慢，还是建议团队搭建完善的开发环境。</p>
<p>可使用<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="external">微信开发者工具</a>或<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140" target="_blank" rel="external">微信web开发者工具</a>进行调试。打开微信web开发者工具可能会报错，一直点确定就打开了。微信web开发者工具可进行移动调试，但需要注意，它在 Network 中显示的请求可能不准确，个人认为是过滤掉了微信内部的请求。以下为授权操作的请求对比。</p>
<img src="/2018/08/25/wechat-service-base/error.png" width="400" title="微信web开发者工具报错">
<img src="/2018/08/25/wechat-service-base/tool.png" title="微信开发者工具">
<img src="/2018/08/25/wechat-service-base/web_tool.png" title="微信web开发者工具">
<h2 id="登录授权"><a href="#登录授权" class="headerlink" title="登录授权"></a>登录授权</h2><p>参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="external">微信网页授权</a>文档，工作主要是在后端，提供一个地址供前端访问，其余工作都由后端完成。后端确保 appID、appsecret、Token 值正确，服务号设置确保接口配置信息、JS接口安全域名、授权回调页面域名正确，即可完成登录授权。前后端都需要注意哪些设置的值是带协议的，哪些是不带协议的，如果服务号设置和后端设置的 appID 等值是正确的，可能是由于多带或少带协议名返回 redirect_uri 错误。我们项目中的 API_SERVER_URL 环境变量如果带了协议名，就会返回这个错误。在微信开发者工具中，授权是跳转到一个登录的页面，在真机上是弹框授权。</p>
<p>因为微信网页授权其实是进行的页面跳转，在项目中如果授权后仍然停留在当前页面，但要发生一些行为，如弹框，只能通过授权后的回调地址带参数的形式。<strong>建议授权后的回调地址如果需要传参数，使用 hash 的形式传参</strong>，这是因为这个页面如果需要使用 js-sdk，在 iOS 上页面路径发生变化可能会导致 <code>wx.config()</code> 执行失败，但 hash 的形式不会有影响。进入页面时在 componentDidMount 中判断 url 是否带有指定的 hash 参数，有则表示是授权后进入的当前页面，执行指定的行为，然后将页面 hash 参数置空。正常情况下授权后进入页面会重新加载整个页面，也就是会执行完整的生命周期方法进入 componentDidMount 中，<strong>但实际中发现有些情况并没有进入 componentDidMount 方法</strong>，因此在 componentDidMount 方法中添加了 hashchange 的监听，在 componentWillUnmount 中取消监听，如果在 componentDidMount 方法中需要网络请求的，也需要注意在授权返回后是否真正发起了该请求以及请求是走的网络还是缓存，可能需要进行特殊处理，就完整的解决了微信网页授权问题。</p>
<p>微信开发者工具中可通过，清缓存 -&gt; 清除开发者工具cookie 取消授权；iOS 真机可通过微信中，我 -&gt; 设置 -&gt; 通用 -&gt; 存储空间 -&gt; 清理微信缓存，取消授权；anroid 真机可通过在微信中，打开网页 debugx5.qq.com，勾上最下面的四项 Cookie、文件缓存、广告过滤缓存、DNS缓存，点击清除取消授权。</p>
<p>示例代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queryString <span class="keyword">from</span> <span class="string">'query-string'</span>;</div><div class="line">...</div><div class="line">class Page extends React.Component &#123;</div><div class="line">  public <span class="keyword">async</span> componentDidMount() &#123;</div><div class="line">    <span class="comment">// 判断是否是后端登录返回的</span></div><div class="line">    <span class="keyword">this</span>.replaceUrl();</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.replaceUrl);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public componentWillUnmount() &#123;</div><div class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.replaceUrl);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public replaceUrl = () =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>) &#123;</div><div class="line">      <span class="keyword">const</span> parsedHash = queryString.parse(<span class="built_in">window</span>.location.hash);</div><div class="line">      <span class="keyword">if</span> (parsedHash.show === <span class="string">'true'</span>) &#123;</div><div class="line">        <span class="built_in">window</span>.location.hash = <span class="string">''</span>;</div><div class="line">        <span class="comment">// 显示 actionSheet</span></div><div class="line">        <span class="keyword">this</span>.actionSheet.handleShow();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  public showActionSheet = <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> callbackUri = <span class="string">`<span class="subst">$&#123;config.clientUrl&#125;</span>/sharePlan#show=true`</span>;</div><div class="line">    Router.push(</div><div class="line">      <span class="string">`<span class="subst">$&#123;config.serverUrl&#125;</span>/api/weixin/auth?callbackUri=<span class="subst">$&#123;callbackUri&#125;</span>`</span>,</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  public render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="js-sdk-使用"><a href="#js-sdk-使用" class="headerlink" title="js-sdk 使用"></a>js-sdk 使用</h2><p>参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="external">微信JS-SDK说明文档</a>文档，前端所有需要使用 JS-SDK 的页面必须先执行 <code>wx.config()</code> 注入配置信息，前端传入页面 url 给后端，后端返回 timestamp、nonceStr、signature，建议 appId 也一起由后端返回，前端就不需要自己配置 appID 了。</p>
<p>从文档中看注入配置信息没有什么难点，在微信开发者工具、android 真机也非常顺利，但 iOS 真机处了问题，一直提示“invalid signature签名错误”，各种排查问题，后来通过复制页面连接，<strong>发现在 iOS 真机单页应用在路由切换时页面 url 一直保持不变，都是第一个打开页面的 url，这是单页应用的问题</strong>。因此使用了，在项目入口文件，定义一个变量保存页面 url，该变量只被赋值一次，来确保该变量保存的是初次进入页面的 url，然后通过 context 的形式传入到其它页面，在获取 wx.config 的签名参数时，判断如果是 iOS 平台，则传入 context 中的第一个打开页面的 url，否则传入当前页面 url，就解决了签名错误的问题。</p>
<p>还有一个可能遇到的问题，通过服务号进入页面时报签名错误，复制当前网页链接直接进入则签名正确，请检查服务号菜单配置中路径是否正确，可能是路径末尾缺少一个 <code>/</code>。程序猿已在风中凌乱。。。</p>
<p>示例代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _app.tsx</span></div><div class="line"><span class="keyword">const</span> ContextType = &#123;</div><div class="line">  initialUrl: PropTypes.string,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> initialUrl;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  public <span class="keyword">static</span> childContextTypes = ContextType;</div><div class="line"></div><div class="line">  public <span class="keyword">static</span> <span class="keyword">async</span> getInitialProps(&#123; Component, ctx &#125;) &#123;</div><div class="line">    <span class="keyword">let</span> pageProps = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Component.getInitialProps) &#123;</div><div class="line">      pageProps = <span class="keyword">await</span> Component.getInitialProps(ctx);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123; pageProps, query: ctx.query, asPath: ctx.asPath &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public getChildContext() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      initialUrl,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用组件</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// 1.获取签名需要的页面 url</span></div><div class="line">  <span class="keyword">let</span> signUrl = <span class="string">`<span class="subst">$&#123;config.clientUrl&#125;</span><span class="subst">$&#123;Router.asPath&#125;</span>`</span>;</div><div class="line">  <span class="comment">// 1.1判断 ios 终端</span></div><div class="line">  <span class="keyword">const</span> userAgent = navigator.userAgent;</div><div class="line">  <span class="keyword">const</span> isiOS = !!userAgent.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</div><div class="line">  <span class="keyword">if</span> (isiOS) &#123;</div><div class="line">    signUrl = <span class="string">`<span class="subst">$&#123;config.clientUrl&#125;</span><span class="subst">$&#123;this.context.initialUrl&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 2.调用后台接口获取签名需要的参数</span></div><div class="line">  <span class="keyword">const</span> signSdkData: SignSdkData = <span class="keyword">await</span> <span class="keyword">this</span>.context.client.query(&#123;</div><div class="line">    fetchPolicy: <span class="string">'network-only'</span>,</div><div class="line">    query: signSdkQuery,</div><div class="line">    variables: &#123;</div><div class="line">      uri: signUrl,</div><div class="line">    &#125;,</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 3.进行 js-sdk 签名</span></div><div class="line">  <span class="keyword">if</span> (signSdkData &amp;&amp; signSdkData.data &amp;&amp; signSdkData.data.signSdk) &#123;</div><div class="line">    <span class="keyword">const</span> &#123; appId, nonceStr, signature, timestamp &#125; = signSdkData.data.signSdk;</div><div class="line">    wx.config(&#123;</div><div class="line">      appId,</div><div class="line">      debug: <span class="literal">true</span>,</div><div class="line">      jsApiList: [</div><div class="line">        <span class="string">'onMenuShareAppMessage'</span>,</div><div class="line">        <span class="string">'onMenuShareTimeline'</span>,</div><div class="line">        <span class="string">'hideMenuItems'</span>,</div><div class="line">        <span class="string">'showMenuItems'</span>,</div><div class="line">      ],</div><div class="line">      nonceStr,</div><div class="line">      signature,</div><div class="line">      timestamp,</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 4.签名成功执行回调</span></div><div class="line">    wx.ready(() =&gt; &#123;</div><div class="line">      <span class="keyword">this</span>.props.callback();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">  <span class="built_in">console</span>.log(error);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><ul>
<li>注册服务号，进行微信认证</li>
<li>开发者工具 -&gt; web开发者工具， 添加开发者账号，才可开发该 appID 的服务号</li>
<li>设置 -&gt; 人员设置，添加运行人员，可登录后台和群发消息</li>
<li>功能 -&gt; 自定义菜单，配置菜单</li>
<li>小程序 -&gt; 小程序管理，添加关联的小程序</li>
<li>小程序 -&gt; 展示场景，在公众号资料中展示小程序</li>
<li>设置 -&gt; 公众号设置 -&gt; 功能设置，JS接口安全域名为前端域名，网页授权域名为后端域名，业务域名暂时没用</li>
<li>开发 -&gt; 基本配置，IP白名单中添加后端 IP，服务器配置未启用</li>
<li>微信商户平台 -&gt; 产品中心 -&gt; 开发配置，设置H5支付的授权目录，注意是目录，以<code>/</code>结尾，如 <code>http://example.com/pages/</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序数据分析]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-data-analytics/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于微信自己的机制，无论是用微信公众平台，还是用第三方的数据分析平台，都有可能存在数据不准确的情况。我们的小程序由于能够统计每天的收入情况，对比发现过微信公众平台和诸葛io都存在购买数据的偏差。</p>
<h2 id="基于微信公众平台"><a href="#基于微信公众平台" class="headerlink" title="基于微信公众平台"></a>基于<a href="https://mp.weixin.qq.com" target="_blank" rel="external">微信公众平台</a></h2><p>微信公众平台中，也就是小程序管理后台，本身提供了基础的数据分析的功能，无需上报数据也能分析一部分数据。也可通过小程序开发文档中提供的自定义数据上报接口 <code>wx.reportAnalytics</code> 在代码中上报需要的数据，使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。使用小程序管理后台很简单，不用做用户标识，因为微信自己是能通过 openId 区分用户的，无需自己处理，也不用上报场景值和用户画像等基本信息。缺点是，小程序管理后台：</p>
<ul>
<li>不能自定义面板</li>
<li>对自定义分析的查询日期跨度不能超过31天</li>
<li>不能添加自定义的用户属性，不能创建用户分群</li>
<li>不能查看原始数据，更不能下载了</li>
<li>没有渠道分析，当然这个可以自己做</li>
</ul>
<h2 id="基于诸葛io"><a href="#基于诸葛io" class="headerlink" title="基于诸葛io"></a>基于<a href="https://zhugeio.com/" target="_blank" rel="external">诸葛io</a></h2><p>为了解决小程序管理后台数据分析存在的问题，我们对比了很多支持小程序的数据分析产品，列表如下，最后选择了诸葛io。</p>
<ul>
<li><a href="http://mta.qq.com/mta/ctr_index/opd" target="_blank" rel="external">腾讯移动分析</a></li>
<li><a href="https://www.aldwx.com/" target="_blank" rel="external">阿拉丁小程序统计平台</a></li>
<li><a href="https://www.sensorsdata.cn/manual/mp_sdk.html" target="_blank" rel="external">神策数据</a></li>
<li><a href="https://www.talkingdata.com/" target="_blank" rel="external">TalkingData</a></li>
<li><a href="https://jice.io/" target="_blank" rel="external">及策</a></li>
<li><a href="https://ark.analysys.cn/" target="_blank" rel="external">易观方舟</a></li>
<li><a href="https://www.growingio.com/" target="_blank" rel="external">GrowingIO</a></li>
<li><a href="https://zhugeio.com/" target="_blank" rel="external">诸葛io</a></li>
</ul>
<p>总体来说，诸葛io解决了上述小程序后台存在的所有问题，而且提供了下载原始数据的方式，集成简单，调试也快，后台也可以添加多个用户并授予不同权限。后台创建用户分群、创建面板方式比较简单，不需要工程师去创建，业务人员可以自己创建。缺点就是付费😂，上面也说过了，数据会有些偏差，但是很有可能没办法避免。</p>
<h2 id="基于Google-Analytics"><a href="#基于Google-Analytics" class="headerlink" title="基于Google Analytics"></a>基于<a href="https://analytics.google.com/" target="_blank" rel="external">Google Analytics</a></h2><p>小程序中集成 <a href="https://github.com/rchunping/wxapp-google-analytics" target="_blank" rel="external">wxapp-google-analytics</a> 后，<strong>按照文档进行操作</strong>，可上报数据到 Google Analytics，经试验以下功能都可正常使用：</p>
<ul>
<li>可上报页面访问，支持自定义维度和指标</li>
<li>可上报事件，若要上报自定义维度和指标，需修改 ga.js 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">EventBuilder.prototype.build = function() &#123;</div><div class="line">  // 去除无效字段字段</div><div class="line">  hit_delete_if(this, &apos;ev&apos;, 0);</div><div class="line">  hit_delete_if(this, &apos;el&apos;, &apos;&apos;);</div><div class="line"></div><div class="line">  // 添加--处理自定义维度和指标</div><div class="line">  var cd_arr = this.custom_dimensions;</div><div class="line">  var cm_arr = this.custom_metrics;</div><div class="line">  var i;</div><div class="line"></div><div class="line">  for (i = 0; i &lt; cd_arr.length; i++) &#123;</div><div class="line">    var cd = cd_arr[i];</div><div class="line">    this.hit[&apos;cd&apos; + cd[0]] = cd[1];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  for (i = 0; i &lt; cm_arr.length; i++) &#123;</div><div class="line">    var cm = cm_arr[i];</div><div class="line">    this.hit[&apos;cm&apos; + cm[0]] = cm[1];</div><div class="line">  &#125;</div><div class="line">  // 添加--结束</div><div class="line"></div><div class="line">  return HitBuilder.prototype.build.apply(this, arguments);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>渠道分析</li>
<li>跟踪场景值</li>
<li>跟踪二维码参数</li>
<li>可标识用户，清除 storage/_ga_cid 后，将产生一个新用户，这也意味着用户删除小程序后再次进入将作为一个新用户</li>
</ul>
<p>Google Analytics 中受众群体下的报告反映都很慢，想看到用户数据上报情况很可能第二天才能看到，有时第二天也没看到数据，还需要重新测，很担心线上环境也会出现这种情况。</p>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序审核相关]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-review/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="小程序如何提审"><a href="#小程序如何提审" class="headerlink" title="小程序如何提审"></a>小程序如何提审</h2><p>小程序中只要修改了代码，上线就需要审核，如果通过修改 url 的形式来决定是访问测试服务器还是线上服务器，就需要进行2次审核，而且需要后端先上线。解决这个问题，可以前端和后端都维护一个版本号，前端可以使用动态拼接 url 的方式访问后端接口，如 /api1/xxx，/api2/xxx，或者在请求参数里带上版本号，后端收到请求时拿到的版本号，与自己保存的版本号做对比决定是访问测试服务器还是线上服务器。</p>
<h2 id="小程序审核被拒情形"><a href="#小程序审核被拒情形" class="headerlink" title="小程序审核被拒情形"></a>小程序审核被拒情形</h2><ul>
<li>购买在线课程会被指定为虚拟支付</li>
<li>打卡返现会被指定为赌博活动</li>
<li>电子课程含“未解锁”课程，并引导至公众号解锁课程会被指定为内容不符合规则</li>
<li>没有课程的用户如果直接显示暂无课程，会被指定为可用性和完整性不符合规则</li>
<li>微信测试人员账号可能会出现奇怪的问题，可能会没有 unionId，导致使用小程序里面的功能出现问题</li>
</ul>
<p>注意：提交审核如果被拒了，经过排查发现是微信自己的问题，可在社区中发帖子描述问题，可能会过审。在小程序后台提交审核没有填写描述的地方，但是使用微信开发者工具上传代码时可以添加项目备注，到小程序后台会出现在描述字段，这里的信息审核人员是会看的。</p>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序开发遇到问题]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-problem/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下记录的为开发过程中遇到的零散问题及解决方案。</p>
<h2 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h2><img src="/2018/08/25/wechat-problem/flow.png" title="小程序登录流程">
<h2 id="部分用户没有-unionId"><a href="#部分用户没有-unionId" class="headerlink" title="部分用户没有 unionId"></a>部分用户没有 unionId</h2><p>如上面登录逻辑梳理所述，进入小程序时，如果判断当前进行了用户授权，会使用 wx.getUserInfo 获取用户加密信息 encryptedData 和 iv 以及 wx.login 返回的 code 调用后台接口，后台处理会调用微信接口，通常微信接口会返回用户的 unionId，但发现有的用户就没有返回 unionId。在社区搜了一下这个问题，发现可能会存在微信接口没有返回 unionId 的情况，但通过解密 encryptedData 一定能拿到 unionId，因此改变了获取 unionId 的方式就解决了这个问题。</p>
<h2 id="登录加载慢"><a href="#登录加载慢" class="headerlink" title="登录加载慢"></a>登录加载慢</h2><p>小程序线上环境，有部分用户会登录加载很慢，但是我自己没有复现过这个现象，也没办法排查问题。后来发现本地使用<strong> ngrok 进行内网穿透</strong> 调试时，有时就会出现这个登录加载慢的问题，经过排查发现，前端在进入小程序时，先使用 wx.login 获取 code，然后调用后台 getInfo 接口拿到用户 openId 进行数据上报，同时也调用后台 login 接口进行用户登录，这两个后台接口都调用了 <a href="https://api.weixin.qq.com/sns/jscode2session" target="_blank" rel="external">https://api.weixin.qq.com/sns/jscode2session</a> 接口获取 session_key。后台本身是做了通过将 code 值存入数据库来防止重复使用 code 的兼容的，但是可能会存在同时进入后台的这两个请求，还没有完成存入数据库的操作，后台报了 code 被重复使用的错误没有继续向下执行，因此前端一直处于等待状态，导致登录加载卡死在等待中。</p>
<h2 id="iOS-上头像不显示"><a href="#iOS-上头像不显示" class="headerlink" title="iOS 上头像不显示"></a>iOS 上头像不显示</h2><p>问题：在【我的】页面，进入时查询用户信息，如果没有用户信息，显示默认头像图片，如果有用户信息，显示指定 url 的用户头像，但在 iOS 上返回用户信息后仍然显示默认图像，image 组件的 src 属性是正确的头像链接。</p>
<p>解决：在 iOS 上 image 组件在 src 变化后不一定能显示更新后的图片，使用两个 image 组件，根据有没有 url 值决定显示默认头像还是用户头像，就没有问题了。</p>
<h2 id="重复进入页面"><a href="#重复进入页面" class="headerlink" title="重复进入页面"></a>重复进入页面</h2><p>问题：在网络条件不好时可能存在点击按钮跳转页面，可能会多次跳转同一个页面，也要点击多次返回才能返回到正确的页面。</p>
<p>解决：在跳转前判断要进入的页面是否在路由栈已经存在。示例代码如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    ...</div><div class="line">    navigateToPage() &#123;</div><div class="line">        <span class="keyword">const</span> pages = getCurrentPages();</div><div class="line">        <span class="keyword">if</span> (pages[pages.length - <span class="number">1</span>].route === <span class="string">'pages/xxx/xxx'</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        wx.navigateTo(&#123;</div><div class="line">            url: <span class="string">'/pages/xxx/xxx'</span>,</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="网络图片存在缓存"><a href="#网络图片存在缓存" class="headerlink" title="网络图片存在缓存"></a>网络图片存在缓存</h2><p>小程序中使用的网络图片，如果 url 没有发生变化，但后台更新了图片，使用小程序时可能会存在图片没有更新过来，把小程序从记录中删除了再打开，就可以了。也可以在使用图片的 url 后面添加查询参数 <code>url + &#39;?&#39; + Dare.parse(new Date())</code> 的方式不让小程序缓存图片。web-view 中打卡的网页链接也可以这么处理。</p>
<h2 id="一个值得思考的-bug"><a href="#一个值得思考的-bug" class="headerlink" title="一个值得思考的 bug"></a>一个值得思考的 bug</h2><p>问题描述：A 页面 -&gt; B 页面 -&gt; C 页面，在 C 页面中，进行背景音频播放，并添加了背景音频播放的监听，onPlay、onPause、onTimeUpdate、onEnded、onStop，这些监听中主要是更新当前页面的 data 值，来控制页面中的显示，如显示播放/暂停按钮，显示当前播放进度等，<strong>并更新全局的当前播放音频的信息</strong>，在从 C 页面返回到 B 页面及 A 页面时，会显示一个悬浮播放的控件，显示正在播放的背景音频的信息及播放进度。问题是在从 C 页面返回后，如果是从背景音频点击的暂停，悬浮播放控件中显示的当前播放进度会显示从 C 页面返回时的进度，而不是当前播放进度。</p>
<p>分析原因：经过大概1小时的 bug 追踪，发现问题的原因是背景音频播放的监听是在 C 页面内的，在 onPause 监听中，更新全局播放音频信息的代码是如下代码中的第一段，但从 C 页面返回后，C 页面已经销毁了，这时再获取 this.data.tipRecord 是销毁页面前的数据（刚开始这么写的时候我以为会报错），也就是从 C 返回时的数据。将代码修改为第二段，主要是更新全局提示记录的处理是基于全局 store 中的数据，而不是当前页面的 data，该问题就解决了。</p>
<p>在 C 页面中的音频播放监听方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 第一段，有问题的</div><div class="line">this.backgroundAudioManager.onPause(() =&gt; &#123;</div><div class="line">    // 全局提示记录处理，更新 store 中的全局信息</div><div class="line">    this.setTipRecord(&#123;</div><div class="line">        ...this.data.tipRecord,</div><div class="line">        show: true,</div><div class="line">        paused: true,</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 第二段，修正后的</div><div class="line">this.backgroundAudioManager.onPause(() =&gt; &#123;</div><div class="line">    // 获取全局 store 中的音频播放信息</div><div class="line">    const storeData = this.store.getState();</div><div class="line">    // 全局提示记录处理，更新 store 中的全局信息</div><div class="line">    this.setTipRecord(&#123;</div><div class="line">        ...storeData.tipRecord,</div><div class="line">        show: true,</div><div class="line">        paused: true,</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="微信用户可能没有头像"><a href="#微信用户可能没有头像" class="headerlink" title="微信用户可能没有头像"></a>微信用户可能没有头像</h2><p>在开发打卡生成图片的功能时，很多都需要使用用户的头像，注意会存在没有头像的微信用户，需要处理该种情况。</p>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序 canvas 使用]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-canvas/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们的小程序中有一个功能，会根据用户信息生成图片，并可以保存到相册。第一次是使用前端发起请求，后端生成图片上传到阿里云后给前端返回图片地址，但是上线后发现图片出来的很慢，平均要6~7秒。第二次是使用小程序的 canvas api 在前端绘制图片，可达到平局在3秒左右，但这个过程也遇到了一些问题，描述如下。</p>
<h3 id="多屏幕适配问题"><a href="#多屏幕适配问题" class="headerlink" title="多屏幕适配问题"></a>多屏幕适配问题</h3><p>设计稿是基于 375 * 667 尺寸的，如果是用 image 显示图片，我们可以通过计算或使用适配的单位来进行多屏适配。但是 canvas 中不能使用适配的单位，但是可以获取到屏幕的宽度，自己计算每一个尺寸应该有多大，比较麻烦。更好的做法是在绘制前使用 canvasContext.scale api 进行缩放，后面直接使用设计稿中固定的尺寸绘制即可。</p>
<h3 id="绘制圆形用户微信头像"><a href="#绘制圆形用户微信头像" class="headerlink" title="绘制圆形用户微信头像"></a>绘制圆形用户微信头像</h3><p>canvas 中绘制图片时，需要先使用 wx.downloadFile api 下载文件到本地，再使用返回的临时路径绘制图片。注意下载的图片的域名需要添加在 downloadFile 合法域名中，否则 iOS 不显示图片。之后使用 canvasContext.clip api 将图片切成圆形。</p>
<h3 id="居中显示不同样式的文字"><a href="#居中显示不同样式的文字" class="headerlink" title="居中显示不同样式的文字"></a>居中显示不同样式的文字</h3><p>图片的中间需要显示“第 xxx 天”，整行文字需要居中显示，但数字的字体比较大，因此无法直接使用 canvasContext.setTextAlign api 进行文字居中设置。可使用 canvasContext.measureText<br> api 先计算出数字显示需要的宽度，然后将 “第 ” 和 “ 天” 放在计算后的位置居右和距左对齐。</p>
<h3 id="Modal-形式的图片被-canvas-覆盖"><a href="#Modal-形式的图片被-canvas-覆盖" class="headerlink" title="Modal 形式的图片被 canvas 覆盖"></a>Modal 形式的图片被 canvas 覆盖</h3><p>canvas 属于原生组件，层级是最高的，页面中如果有需要弹出 Modal 的地方，是无法显示在 canvas 上面的。经试验，如果使用两个 canvas，是可以达到一个 canvas 在另一个 canvas 上面的，但是因为我们的项目中弹出的 Modal 有一个按钮，因此无法使用这种方式。我们采用了在屏幕的外面绘制图片，绝对定位，top 为负值，然后下载到本地，用 image 标签引用本地路径来显示图片。</p>
<h3 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图片宽度为 330，该值为图片水平居中的位置</span></div><div class="line"><span class="keyword">const</span> midpoint = <span class="number">330</span> / <span class="number">2</span>;</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  ...</div><div class="line">  onLoad(<span class="keyword">this</span>: PageData, options: Options) &#123;</div><div class="line">    <span class="keyword">const</span> canvasContext = wx.createCanvasContext(<span class="string">'clockImage'</span>);</div><div class="line">    <span class="keyword">this</span>.canvasContext = canvasContext;</div><div class="line">    <span class="comment">// 多屏幕适配问题</span></div><div class="line">    canvasContext.scale(</div><div class="line">      app.globalData.windowWidth / <span class="number">375</span>,</div><div class="line">      app.globalData.windowWidth / <span class="number">375</span>,</div><div class="line">    );</div><div class="line"></div><div class="line">    canvasContext.drawImage(<span class="string">`../../images/clock_bg.png`</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">330</span>, <span class="number">400</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'center'</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'white'</span>);</div><div class="line">    canvasContext.setFontSize(<span class="number">16</span>);</div><div class="line">    canvasContext.fillText(<span class="string">`我在这里学习`</span>, midpoint, <span class="number">124</span>);</div><div class="line">    canvasContext.fillText(<span class="string">`坚持学习《占位占位占位占位》`</span>, midpoint, <span class="number">150</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'rgba(255, 255, 255, 0.15)'</span>);</div><div class="line">    canvasContext.fillRect(<span class="number">15</span>, <span class="number">258</span>, <span class="number">300</span>, <span class="number">50</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'#8FADFF'</span>);</div><div class="line">    canvasContext.setFontSize(<span class="number">14</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'left'</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'#fff'</span>);</div><div class="line">    canvasContext.fillText(<span class="string">'The truth is that there is the pinnacle of'</span>, <span class="number">22</span>, <span class="number">278</span>);</div><div class="line">    canvasContext.fillText(<span class="string">'justice in practice is to use the truth.'</span>, <span class="number">22</span>, <span class="number">298</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'center'</span>);</div><div class="line"></div><div class="line">    canvasContext.draw();</div><div class="line">    <span class="comment">// 用户头像</span></div><div class="line">    <span class="keyword">this</span>.drawAvatar(wxInfo);</div><div class="line">    <span class="comment">// 二维码</span></div><div class="line">    <span class="keyword">this</span>.drawQrcode();</div><div class="line">    <span class="comment">// 天数</span></div><div class="line">    <span class="keyword">this</span>.drawDays();</div><div class="line">  &#125;,</div><div class="line">  drawAvatar(<span class="keyword">this</span>: PageData, wxInfo: WxInfo) &#123;</div><div class="line">    <span class="keyword">const</span> canvasContext = <span class="keyword">this</span>.canvasContext;</div><div class="line">    wx.downloadFile(&#123;</div><div class="line">      url: <span class="string">'path to avatar'</span>,</div><div class="line">      success: res =&gt; &#123;</div><div class="line">        <span class="comment">// 绘制圆形用户微信头像</span></div><div class="line">        canvasContext.beginPath();</div><div class="line">        canvasContext.arc(midpoint, <span class="number">40</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</div><div class="line">        canvasContext.clip();</div><div class="line">        canvasContext.drawImage(res.tempFilePath, midpoint - <span class="number">24</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">48</span>);</div><div class="line">        canvasContext.setFontSize(<span class="number">12</span>);</div><div class="line">        canvasContext.draw(<span class="literal">true</span>, () =&gt; &#123;</div><div class="line">          <span class="keyword">this</span>.setData(</div><div class="line">            &#123;</div><div class="line">              showAvatar: <span class="literal">true</span>,</div><div class="line">              canSave: <span class="keyword">this</span>.data.showDays &amp;&amp; <span class="keyword">this</span>.data.showQrcode,</div><div class="line">            &#125;,</div><div class="line">            () =&gt; &#123;</div><div class="line">              <span class="keyword">this</span>.saveTempImage();</div><div class="line">            &#125;,</div><div class="line">          );</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      fail: () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.drawAvatar();</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  drawQrcode(<span class="keyword">this</span>: PageData) &#123;</div><div class="line">    <span class="keyword">const</span> canvasContext = <span class="keyword">this</span>.canvasContext;</div><div class="line">    wx.downloadFile(&#123;</div><div class="line">      url: <span class="string">'https://res.wx.qq.com/mpres/htmledition/images/mp_qrcode3a7b38.gif'</span>,</div><div class="line">      success: res =&gt; &#123;</div><div class="line">        canvasContext.drawImage(res.tempFilePath, <span class="number">68</span>, <span class="number">328</span>, <span class="number">56</span>, <span class="number">56</span>);</div><div class="line">        canvasContext.draw(<span class="literal">true</span>, () =&gt; &#123;</div><div class="line">          <span class="keyword">this</span>.setData(</div><div class="line">            &#123;</div><div class="line">              showQrcode: <span class="literal">true</span>,</div><div class="line">              canSave: <span class="keyword">this</span>.data.showAvatar &amp;&amp; <span class="keyword">this</span>.data.showDays,</div><div class="line">            &#125;,</div><div class="line">            () =&gt; &#123;</div><div class="line">              <span class="keyword">this</span>.saveTempImage();</div><div class="line">            &#125;,</div><div class="line">          );</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      fail: () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.drawQrcode();</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  drawDays(<span class="keyword">this</span>: PageData) &#123;</div><div class="line">    <span class="keyword">const</span> canvasContext = <span class="keyword">this</span>.canvasContext;</div><div class="line">    <span class="comment">// 居中显示不同样式的文字</span></div><div class="line">    canvasContext.setFontSize(<span class="number">48</span>);</div><div class="line">    <span class="keyword">const</span> days = <span class="string">'99'</span>;</div><div class="line">    <span class="keyword">const</span> dayWidth = canvasContext.measureText(days).width / <span class="number">2</span>;</div><div class="line"></div><div class="line">    canvasContext.setFillStyle(<span class="string">'#8FADFF'</span>);</div><div class="line">    canvasContext.setFontSize(<span class="number">16</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'right'</span>);</div><div class="line">    canvasContext.fillText(<span class="string">'第 '</span>, midpoint - dayWidth, <span class="number">210</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'#FF9F65'</span>);</div><div class="line">    canvasContext.setFontSize(<span class="number">48</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'center'</span>);</div><div class="line">    canvasContext.fillText(days, midpoint, <span class="number">210</span>);</div><div class="line">    canvasContext.setFillStyle(<span class="string">'#8FADFF'</span>);</div><div class="line">    canvasContext.setFontSize(<span class="number">16</span>);</div><div class="line">    canvasContext.setTextAlign(<span class="string">'left'</span>);</div><div class="line">    canvasContext.fillText(<span class="string">' 天'</span>, midpoint + dayWidth, <span class="number">210</span>);</div><div class="line">    canvasContext.draw(<span class="literal">true</span>, () =&gt; &#123;</div><div class="line">      <span class="keyword">this</span>.setData(</div><div class="line">        &#123;</div><div class="line">          showDays: <span class="literal">true</span>,</div><div class="line">          canSave: <span class="keyword">this</span>.data.showAvatar &amp;&amp; <span class="keyword">this</span>.data.showQrcode,</div><div class="line">        &#125;,</div><div class="line">        () =&gt; &#123;</div><div class="line">          <span class="keyword">this</span>.saveTempImage();</div><div class="line">        &#125;,</div><div class="line">      );</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  saveTempImage(<span class="keyword">this</span>: PageData) &#123;</div><div class="line">    <span class="comment">// 下载图片</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.canSave &amp;&amp; !<span class="keyword">this</span>.data.saving) &#123;</div><div class="line">      <span class="keyword">this</span>.setData(&#123;</div><div class="line">        saving: <span class="literal">true</span>,</div><div class="line">      &#125;);</div><div class="line">      wx.canvasToTempFilePath(&#123;</div><div class="line">        canvasId: <span class="string">'clockImage'</span>,</div><div class="line">        success: res =&gt; &#123;</div><div class="line">          <span class="comment">// image 组件的 src 值为 clockImagePath</span></div><div class="line">          <span class="keyword">this</span>.setData(&#123;</div><div class="line">            clockImagePath: res.tempFilePath,</div><div class="line">          &#125;);</div><div class="line">          <span class="keyword">this</span>.setData(&#123;</div><div class="line">            saving: <span class="literal">false</span>,</div><div class="line">          &#125;);</div><div class="line">        &#125;,</div><div class="line">        fail: () =&gt; &#123;</div><div class="line">          <span class="keyword">this</span>.setData(&#123;</div><div class="line">            saving: <span class="literal">false</span>,</div><div class="line">          &#125;);</div><div class="line">        &#125;,</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<img src="/2018/08/25/wechat-canvas/1.jpg" width="300" title="canvas 绘制的图片">
<img src="/2018/08/25/wechat-canvas/2.jpg" width="300" title="点击 Modal 效果">]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序下载文件]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-download/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>需求为点击文件列表，可预览文件，可下载文件或以其它方式能在桌面端看文件。首先需要在小程序后台配置业务域名。经探索，需要使用 wx.downloadFile 先下载文件，再使用 wx.saveFile 将下载的临时文件保存到本地，再使用 wx.openDocument 打开保存后的文件。</p>
<p>在 android 手机（华为荣耀8）上，文件下载或保存后，是保存在 <code>本地/内部存储/Tecent/MicroMsg/wxafiles/此处为appId</code> 目录中，下载的文件为临时文件，文件以 temp 开头，保存的文件以 store 开头。很奇怪，使用远程调试时输出的路径都是带有后缀的路径，但在文件系统中打开文件查看详情都是没有后缀的，如图1、图2所示。</p>
<p>在小程序中使用 wx.openDocument 打开文件后，在 android 上点击右上角三个点发送到微信传输助手在桌面端打开时都显示为 exec 文件，没办法直接打开，如图3、图4所示，重命名添加后缀后是可以的。</p>
<img src="/2018/08/25/wechat-download/directory.png" width="300" title="文件目录">
<img src="/2018/08/25/wechat-download/log.png" width="300" title="输出">
<img src="/2018/08/25/wechat-download/send.jpg" width="300" title="发送">
<img src="/2018/08/25/wechat-download/desktop.png" width="300" title="发送">
<p>示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  downloadFile() &#123;</div><div class="line">    <span class="comment">// 下载文件</span></div><div class="line">    wx.downloadFile(&#123;</div><div class="line">      url: <span class="string">'http://example.com/somefile.pdf'</span>,</div><div class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> tempFilePath = res.tempFilePath;</div><div class="line">        <span class="comment">// 保存文件</span></div><div class="line">        wx.saveFile(&#123;</div><div class="line">          tempFilePath,</div><div class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">            <span class="keyword">const</span> savedFilePath = res.savedFilePath;</div><div class="line">            <span class="comment">// 打开文件</span></div><div class="line">            wx.openDocument(&#123;</div><div class="line">              filePath: savedFilePath,</div><div class="line">              success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'打开文档成功'</span>)</div><div class="line">              &#125;,</div><div class="line">            &#125;);</div><div class="line">          &#125;,</div><div class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'保存失败：'</span>, err)</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'下载失败：'</span>, err);</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序多媒体相关]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-media/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="音频（待优化）"><a href="#音频（待优化）" class="headerlink" title="音频（待优化）"></a>音频（待优化）</h2><p>音频播放是自己封装了 Component，传入参数进行展示，如是否播放中、当前播放进度、总时长，主要是样式的封装，在播放音频的地方调用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/getBackgroundAudioManager.html" target="_blank" rel="external">背景音频播放管理 api</a> 进行播放，在各种回调的方法中更新参数。需要注意的是 title 参数必须设置，否则 ios 会报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    onLoad() &#123;</div><div class="line">        this.backgroundAudioManager = wx.getBackgroundAudioManager();</div><div class="line">        this.backgroundAudioManager.onPlay(() =&gt; &#123;...&#125;);</div><div class="line">        this.backgroundAudioManager.onPause(() =&gt; &#123;...&#125;);</div><div class="line">        this.backgroundAudioManager.onEnded(() =&gt; &#123;...&#125;);</div><div class="line">        this.backgroundAudioManager.onStop(() =&gt; &#123;...&#125;);</div><div class="line">        this.backgroundAudioManager.onTimeUpdate(() =&gt; &#123;...&#125;);</div><div class="line">    &#125;,</div><div class="line">    handleVoicePlay(this: PageData, e: PageCustomEvent) &#123;</div><div class="line">        // title 必须设置，否则 ios 会报错</div><div class="line">        this.backgroundAudioManager.title = &apos;标题&apos;;</div><div class="line">        this.backgroundAudioManager.coverImgUrl = &apos;图片 url&apos;;</div><div class="line">        this.backgroundAudioManager.src = e.target.dataset.src;</div><div class="line">        this.backgroundAudioManager.startTime = 0;</div><div class="line">    &#125;,</div><div class="line">    handleVoicePause(this: PageData) &#123;</div><div class="line">        this.backgroundAudioManager.stop();</div><div class="line">    &#125;,</div><div class="line">    handleVoiceSeek(this: PageData, e: PageCustomEvent) &#123;</div><div class="line">        this.backgroundAudioManager.seek(e.detail.value);</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>视频播放如无特殊要求，使用官方提供的 video 组件即可。但是注意“请勿在 scroll-view、swiper、picker-view、movable-view 中使用 video 组件”，这些情况下样式会有较严重的问题。也可以在这些情况下使用一张预览图占位显示视频，点击后跳转到一个新页面使用 video 播放视频。</p>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序 Swiper 使用]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-component/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h2><p>使用小程序的 swiper 组件，是能达到常规的 swiper 功能的，但是原生提供的样式有限，通常为图1、图2的样式。</p>
<img src="/2018/08/25/wechat-component/swiper-1.gif" width="300" title="图1">
<img src="/2018/08/25/wechat-component/swiper-2.gif" width="300" title="图2">
<p>通过样式的处理可达到图3的效果。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">// wxml</div><div class="line">&lt;swiper indicator-dots=&quot;&#123;&#123;true&#125;&#125;&quot; previous-margin=&quot;8px&quot; next-margin=&quot;8px&quot; bindchange=&quot;bindSwiperChange&quot;&gt;</div><div class="line">  &lt;swiper-item wx:for=&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot; wx:key=&quot;&#123;&#123;index&#125;&#125;&quot; class=&quot;swiperItem&quot;&gt;</div><div class="line">    &lt;view class=&quot;ruleCard &#123;&#123;currentSwiperItem &lt; index &amp;&amp; &apos;hiddenLeft&apos;&#125;&#125; &#123;&#123;currentSwiperItem &gt; index &amp;&amp; &apos;hiddenRight&apos;&#125;&#125;&quot;&gt;</div><div class="line">      &#123;&#123;item&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/swiper-item&gt;</div><div class="line">&lt;/swiper&gt;</div><div class="line"></div><div class="line">// js</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    currentSwiperItem: 0,</div><div class="line">  &#125;,</div><div class="line">  bindSwiperChange(e) &#123;</div><div class="line">    this.setData(&#123;</div><div class="line">      currentSwiperItem: e.detail.current,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// wxss</div><div class="line">swiper &#123;</div><div class="line">  width: 100vw;</div><div class="line">  height: 363rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.swiperItem &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  width: calc(100vw - 16px) !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.ruleCard &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  justify-content: center;</div><div class="line">  width: calc(100vw - 40px);</div><div class="line">  height: 363rpx;</div><div class="line">  background: skyblue;</div><div class="line">  background-size: cover;</div><div class="line">  border-radius: 6px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hiddenLeft &#123;</div><div class="line">  position: relative;</div><div class="line">  left: -10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hiddenRight &#123;</div><div class="line">  position: relative;</div><div class="line">  right: -10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<img src="/2018/08/25/wechat-component/swiper-3.gif" width="300" title="图3">]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序基础 api]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-api/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="登录、授权"><a href="#登录、授权" class="headerlink" title="登录、授权"></a>登录、授权</h2><p>因为调用后台的请求都需要带着 cookie，所以一定是先执行登录逻辑。在 app.ts 的 onLaunch 方法中，执行 wx.login 拿到 code 再调用后台的登录方法，登录成功后保存 cookie，查询用户信息 viewer，再进行获取用户信息授权的操作，获取用户信息后调用后台方法记录到数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">import &#123; setCookie &#125; from &apos;./actions/cookie&apos;;</div><div class="line">import &#123; LocationParam, updateLocation &#125; from &apos;./actions/router&apos;;</div><div class="line">import &#123; setUserInfo &#125; from &apos;./actions/userInfo&apos;;</div><div class="line">import config from &apos;./config&apos;;</div><div class="line">import configureStore from &apos;./configureStore&apos;;</div><div class="line">import &#123; query &#125; from &apos;./createApolloClient&apos;;</div><div class="line">import updateOwnerInfo from &apos;./graphql/updateOwnerInfo&apos;;</div><div class="line">import viewer from &apos;./graphql/viewer&apos;;</div><div class="line">import Provider from &apos;./utils/Provider&apos;;</div><div class="line"></div><div class="line">const configuredStore = configureStore();</div><div class="line"></div><div class="line">const appConfig: wx.AppParam = &#123;</div><div class="line">  getUserInfo() &#123;</div><div class="line">    wx.getUserInfo(&#123;</div><div class="line">      fail: () =&gt; &#123;</div><div class="line">        this.globalData.authorized = false;</div><div class="line">        wx.redirectTo(&#123;</div><div class="line">          url: &apos;/pages/authorize/authorize&apos;,</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      success: res =&gt; &#123;</div><div class="line">        this.saveUserInfo(res.userInfo);</div><div class="line">        // 后台保存用户信息</div><div class="line">        query(&#123;</div><div class="line">          query: updateOwnerInfo,</div><div class="line">          variables: &#123;</div><div class="line">            input: &#123;</div><div class="line">              wxInfo: res.userInfo,</div><div class="line">            &#125;,</div><div class="line">          &#125;,</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      withCredentials: true,</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  saveUserInfo(userInfo: wx.UserInfo) &#123;</div><div class="line">    this.globalData.authorized = true;</div><div class="line">    configuredStore.store.dispatch(setUserInfo(userInfo));</div><div class="line">  &#125;,</div><div class="line">  onLaunch() &#123;</div><div class="line">    wx.showLoading(&#123;</div><div class="line">      title: &apos;加载中&apos;,</div><div class="line">      mask: true,</div><div class="line">    &#125;);</div><div class="line">    // 登录</div><div class="line">    wx.login(&#123;</div><div class="line">      success: res =&gt; &#123;</div><div class="line">        if (res.code) &#123;</div><div class="line">          wx.request(&#123;</div><div class="line">            url: `$&#123;config.requestUrl&#125;/api/login`,</div><div class="line">            data: &#123;</div><div class="line">              code: res.code,</div><div class="line">            &#125;,</div><div class="line">            method: &apos;POST&apos;,</div><div class="line">            success: (requestRes: any) =&gt; &#123;</div><div class="line">              console.log(&apos;登录成功===&apos;, requestRes);</div><div class="line">              const cookie = requestRes.data.cookie || &apos;&apos;;</div><div class="line">              this.globalData.cookie = cookie;</div><div class="line">              configuredStore.apolloClient.query(&#123;</div><div class="line">                query: viewer,</div><div class="line">              &#125;);</div><div class="line">              configuredStore.store.dispatch(setCookie(cookie));</div><div class="line">              wx.hideLoading();</div><div class="line">              // 授权，放着这里是因为获取用户信息后需要同步到后端，需要 cookie</div><div class="line">              this.getUserInfo();</div><div class="line">            &#125;,</div><div class="line">          &#125;);</div><div class="line">        &#125; else &#123;</div><div class="line">          console.log(&apos;登录失败===&apos;, res);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">    // 记录屏幕宽度</div><div class="line">    this.globalData.windowWidth = wx.getSystemInfoSync().windowWidth;</div><div class="line">  &#125;,</div><div class="line">  onHide() &#123;</div><div class="line">    // 小程序退到后台时触发</div><div class="line">    // configuredStore.persistStore();</div><div class="line">  &#125;,</div><div class="line">  onLocationChange(param: LocationParam) &#123;</div><div class="line">    configuredStore.store.dispatch(updateLocation(param));</div><div class="line">  &#125;,</div><div class="line">  globalData: &#123;</div><div class="line">    authorized: false,</div><div class="line">    cookie: &apos;&apos;,</div><div class="line">    apolloClient: configuredStore.apolloClient,</div><div class="line">    query,</div><div class="line">    persistStore: configuredStore.persistStore,</div><div class="line">    store: configuredStore.store,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">App(Provider(configuredStore.store)(appConfig));</div></pre></td></tr></table></figure>
<p>但是这里存在一个问题，常见的出现时机是在分享出去的页面，虽然也会先进入 app.ts 文件，但是这里的 login 还没有返回就执行了其它 Page 页面的网络请求，这些网络请求就会报没有权限，而在 login 成功后有了 cookie，也没有办法触发重新发起网络请求。正常的思路应该是等待 app.ts 中初始化的一系列操作完成后再进入其它 Page 页面，但是目前无法达到这个效果，小程序社区中也有人提出相同的疑惑。目前只能在分享出去的页面中发起网络请求的地方进行统一的 cookie 验证，如果没有登录则先进行登录，但是可能存在进行两次 login 请求的问题。</p>
<h2 id="操作相册权限"><a href="#操作相册权限" class="headerlink" title="操作相册权限"></a>操作相册权限</h2><p>点击按钮保存图片到系统相册，默认情况下系统会弹框要求用户允许保存图片或视频到相册，当用户点击允许就是进行了“保存的相册”的授权，但是当用户点击不允许后，再点击按钮保存图片就静默失败了，没有任何反应，因此需要进行该种情况的处理。</p>
<p>微信社区里给出的方案是点击按钮时获取用户授权信息，如果其中有保存到相册的权限，则进行保存；否则，给出提示框引导用户进入权限设置页面。在设置页面如果授权了“保存的相册”，则关闭提示框，否则不关闭提示框，这样用户从设置页面返回后还是能看到提示框，表示并未授权。</p>
<p>示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    ...</div><div class="line">    saveClockImage(<span class="keyword">this</span>: PageData) &#123;</div><div class="line">        wx.getSetting(&#123;</div><div class="line">            success: settingRes =&gt; &#123;</div><div class="line">                <span class="comment">// 注意此处判断条件，如果从没有过授权或者授权为 true 则进入，如果从没授权过 getSetting 返回是没有 writePhotosAlbum 的，直接进行下载系会弹出系统授权框，此后就都能拿到 writePhotosAlbum 的值了</span></div><div class="line">                <span class="keyword">if</span> (settingRes.authSetting[<span class="string">'scope.writePhotosAlbum'</span>] !== <span class="literal">false</span>) &#123;</div><div class="line">                    <span class="comment">// 下载图片</span></div><div class="line">                    wx.downloadFile(&#123;</div><div class="line">                        url: <span class="keyword">this</span>.data.clockImageUri,</div><div class="line">                        success: res =&gt; &#123;</div><div class="line">                            <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</div><div class="line">                                <span class="comment">// 保存到相册</span></div><div class="line">                                wx.saveImageToPhotosAlbum(&#123;</div><div class="line">                                    filePath: res.tempFilePath,</div><div class="line">                                    success: () =&gt; &#123;</div><div class="line">                                        wx.showToast(&#123;</div><div class="line">                                            title: <span class="string">'保存成功'</span>,</div><div class="line">                                            icon: <span class="string">'success'</span>,</div><div class="line">                                            duration: <span class="number">3000</span>,</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;,</div><div class="line">                                &#125;);</div><div class="line">                            &#125;</div><div class="line">                        &#125;,</div><div class="line">                    &#125;);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 显示自定义的弹出框</span></div><div class="line">                    <span class="keyword">this</span>.setData(&#123;</div><div class="line">                        showDialog: <span class="literal">true</span>,</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;show&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"mask &#123;&#123;show ? 'showMask' : 'hideMask'&#125;&#125;"</span> <span class="attr">catchtap</span>=<span class="string">"_handleHidden"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog &#123;&#123;show ? 'showDialog' : 'hideDialog'&#125;&#125;"</span> <span class="attr">catchtap</span>=<span class="string">"_stopPropagation"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>尚未授权<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span>尚未授权使用访问你的相册，现在去设置<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"buttonContainer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"cancelBtn"</span> <span class="attr">bindtap</span>=<span class="string">"_handleHidden"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"columnDivider"</span> /&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 注意 open-type 取值 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"confirmBtn"</span> <span class="attr">open-type</span>=<span class="string">"openSetting"</span> <span class="attr">bindopensetting</span>=<span class="string">"_handleConfirm"</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure>
<img src="/2018/08/25/wechat-api/system.jpg" width="300" title="系统弹框">
<img src="/2018/08/25/wechat-api/custom.jpg" width="300" title="自定义弹框">
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>关于分享的逻辑参考<a href="https://developers.weixin.qq.com/miniprogram/dev/api/share.html#onshareappmessageoptions" target="_blank" rel="external">官方文档</a>就可以，经过试验结论如下：withShareTicket 参数，只有在分享到一个群时（非个人、非多个群），在 success 回调中才可以获取到 shareTickets 值，经过 wx.getShareInfo 及解密的处理可以拿到群对当前小程序的唯一 ID，wxml 中使用 <code>&lt;open-data type=&quot;groupName&quot; open-gid=&quot;xxxxxx&quot; /&gt;</code> 可展示群名称。如果想进行任意的分享及打开分享时能进行关联关系的绑定，还是需要使用 path 中传入参数的形式，自己制定参数规则进行处理。</p>
<p>目前小程序无法直接分享到朋友圈，社区中有提供方案在后端生成小程序码，返回图片给前端，用户自己将图片保存到相册，然后自己在朋友圈转发。但是，社区中也有描述因诱导分享朋友圈审核不通过的。</p>
<h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><p>先请求后台创建订单，拿着订单 ID 获取支付参数，然后再执行 <code>wx.requestPayment</code> 发起支付。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">// 创建订单</div><div class="line">app.globalData.query(&#123;</div><div class="line">    query: createOrderMutation,</div><div class="line">    variables,</div><div class="line">&#125;).then((createOrderRes: any) =&gt; &#123;</div><div class="line">    if (createOrderRes.errors) &#123;</div><div class="line">        wx.showToast(&#123;</div><div class="line">            title: &apos;创建订单失败&apos;,</div><div class="line">            icon: &apos;none&apos;,</div><div class="line">        &#125;);</div><div class="line">    &#125; else &#123;</div><div class="line">        // 获取支付参数</div><div class="line">        wx.request(&#123;</div><div class="line">            url: `$&#123;config.requestUrl&#125;/api/beecloud/forward`,</div><div class="line">            data: &#123;</div><div class="line">              bill_no: createOrderRes.data.createOrder.id,</div><div class="line">            &#125;,</div><div class="line">            header: &#123;</div><div class="line">              cookie: app.globalData.cookie,</div><div class="line">            &#125;,</div><div class="line">            method: &apos;POST&apos;,</div><div class="line">            success: (requestRes: any) =&gt; &#123;</div><div class="line">                // 发起支付</div><div class="line">                wx.hideLoading();</div><div class="line">                wx.requestPayment(&#123;</div><div class="line">                    timeStamp: requestRes.data.timestamp,</div><div class="line">                    nonceStr: requestRes.data.nonce_str,</div><div class="line">                    package: requestRes.data.package,</div><div class="line">                    signType: requestRes.data.sign_type,</div><div class="line">                    paySign: requestRes.data.pay_sign,</div><div class="line">                    success: () =&gt; &#123;</div><div class="line">                        // 支付成功后的操作</div><div class="line">                        ...</div><div class="line">                    &#125;,</div><div class="line">                &#125;);</div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;).catch((createOrderError: any) =&gt; &#123;</div><div class="line">    throw createOrderError;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序开发基础2]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-base2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开发过程中的发现"><a href="#开发过程中的发现" class="headerlink" title="开发过程中的发现"></a>开发过程中的发现</h2><ul>
<li>wx:for 可以变量对象，wx:for-index 为对象的 key，wx:for-item 为对象的值</li>
<li><p>wx.getBackgroundAudioManager() 获取到的值，是可能随时发生变化的，如下情况的代码，在两次输出时可能会返回不同的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const backgroundAudioManager = wx.getBackgroundAudioManager();</div><div class="line">console.log(backgroundAudioManager.src);</div><div class="line">...</div><div class="line">console.log(backgroundAudioManager.src);</div></pre></td></tr></table></figure>
</li>
<li><p>WXML 中参数命名为 data-live-id，在 js 中调用的事件处理函数中通过参数 e.target.dataset.liveId 获取；命名为 data-liveId，通过参数 e.target.dataset.liveid 获取</p>
</li>
<li>scroll-view 设置 scroll-into-view 有时候没有效果，目前已知在先设置了 scroll-into-view 值，但是页面由于数据的处理还没有完成进行的是初始空列表的渲染，此时无法滚动到指定位置</li>
<li>在点击页面返回按钮时如果想指定返回层级数，可以在 onUnload() 生命周期方法中，调用 getCurrentPages() 获取整个路由栈中的所有信息，来决定返回返回几级页面 <code>wx.navigateBack({ delta: 1 });</code>，但是可能存在中间页面显示一下就消失的效果</li>
<li>图片的名称不要用汉字，在真机上（华为荣耀8）可能找不到资源</li>
<li>对于图片高度未知的情况，可能存在图片被压缩了然后又正常显示的情况，可以设置图片的 <code>height: auto;</code> 或者添加 image 组件的 bindload 回调，控制图片在加载完成后再显示出来</li>
<li>如果有富文本的内容需要后端返回，因为 web-view 有一些限制，为了降低开发成本可以使用长图的形式</li>
<li>onUnload 是页面元素已经卸载后的回调，目前小程序没有提供页面元素卸载前的回调，如果在 onUnload 中进行获取页面元素的操作可能会报错</li>
<li>官方文档中描述，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好</li>
<li>100vh 指的是去掉顶部 Header 和底部 TabBar (如果存在) 后的高度，wx.getSystemInfo() 返回的理论上也是去掉顶部 Header 和底部 TabBar (如果存在) 后的高度，但存在适配问题，在 android 机上不同页面调用可能返回不同的值</li>
</ul>
<h2 id="参考组件"><a href="#参考组件" class="headerlink" title="参考组件"></a>参考组件</h2><p><a href="https://gitee.com/SolitaryAngel/doomm" target="_blank" rel="external">弹幕 doomm</a><br><a href="https://github.com/GeoffZhu/wepy-swipe-delete" target="_blank" rel="external">滑动删除 wepy-swipe-delete（考虑封装）</a><br><a href="https://github.com/jingle1267/demo" target="_blank" rel="external">小程序官方示例</a><br><a href="https://github.com/charleyw/wechat-weapp-redux" target="_blank" rel="external">小程序 Redux 绑定库</a><br><a href="https://github.com/icindy/wxParse" target="_blank" rel="external">富文本解析 wxParse（考虑改为 ts）</a><br><a href="https://www.jianshu.com/p/c681007a6287" target="_blank" rel="external">可滑动 tabs（考虑封装）</a><br><a href="https://github.com/youzan/zanui-weapp" target="_blank" rel="external">赞组件库 zanui-weapp</a><br><a href="https://github.com/meili/minui" target="_blank" rel="external">MinUI 组件库</a><br><a href="https://github.com/wenshan/iwebchat" target="_blank" rel="external">wepy基础 UI 组件</a></p>
<h2 id="声明周期方法"><a href="#声明周期方法" class="headerlink" title="声明周期方法"></a>声明周期方法</h2><p>// 初始化，显示 Page1 页面<br>App === onLaunch<br>App === onShow<br>Page1 === onLoad<br>Page1 === onShow<br>Page1 === onReady</p>
<p>// 跳转到 Page2 页面<br>Page1 === onHide<br>Page2 === onLoad<br>Page2 === onShow<br>Page2 === onReady</p>
<p>// 从 Page2 返回 Page1 页面<br>Page2 === onUnload<br>Page1 === onShow</p>
<p>// 切后台<br>Page1 === onHide<br>App === onHide</p>
<h2 id="自定义-Component"><a href="#自定义-Component" class="headerlink" title="自定义 Component"></a>自定义 Component</h2><p>自定义 Component 需要注意的主要是 Component 中调用调用处 Page 的方法的方式，以及自定义子组件的传入方式。</p>
<h3 id="Page-的代码"><a href="#Page-的代码" class="headerlink" title="Page 的代码"></a>Page 的代码</h3><p>page.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;usingComponents&quot;: &#123;</div><div class="line">    &quot;voice&quot;: &quot;/components/voice/voice&quot;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>page.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    ...</div><div class="line">    handleVoiceSeek(e) &#123;</div><div class="line">        // e.detail 内是 Component 传入的参数，还可通过 e.target.dataset.src 获取调用组件时传入的 data-src 参数</div><div class="line">        this.backgroundAudioManager.seek(e.detail.value);</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>page.wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;view&gt;</div><div class="line">    &lt;voice</div><div class="line">        data-src=&quot;&#123;&#123;particle.audio.uri&#125;&#125;&quot;</div><div class="line">        bind:_handleVoiceSeek=&quot;handleVoiceSeek&quot;</div><div class="line">        src=&quot;&#123;&#123;particle.audio.uri&#125;&#125;&quot;</div><div class="line">        playing=&quot;&#123;&#123;true&#125;&#125;&quot;</div><div class="line">        currentTime=&quot;&#123;&#123;particle.audio.currentTime&#125;&#125;&quot;</div><div class="line">        duration=&quot;&#123;&#123;particle.audio.duration&#125;&#125;&quot;</div><div class="line">        formatedCurrentTime=&quot;&#123;&#123;particle.audio.formatedCurrentTime&#125;&#125;&quot;</div><div class="line">        formatedEndedTime=&quot;&#123;&#123;particle.audio.formatedEndedTime&#125;&#125;&quot;</div><div class="line">    &gt;</div><div class="line">        &lt;view slot=&quot;content&quot;&gt;这里是插入到组件slot中的内容&lt;/view&gt;</div><div class="line">    &lt;/voice&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Component-的代码"><a href="#Component-的代码" class="headerlink" title="Component 的代码"></a>Component 的代码</h3><p>component.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;component&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">  options: &#123;</div><div class="line">    multipleSlots: true, // 在组件定义时的选项中启用多slot支持</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    _handleSeek(e) &#123;</div><div class="line">        // 此处的参数 e 是 slider 传入的，触发调用处的 bind:_handleVoiceSeek 对应的 js 中定义的方法并传入参数，也就是调用 handleVoiceSeek 方法</div><div class="line">        this.triggerEvent(&apos;_handleVoiceSeek&apos;, &#123; value: e.detail.value &#125;);</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  properties: &#123;</div><div class="line">    src: &#123;</div><div class="line">      type: String,</div><div class="line">    &#125;,</div><div class="line">    playing: &#123;</div><div class="line">      type: Boolean,</div><div class="line">    &#125;,</div><div class="line">    currentTime: &#123;</div><div class="line">      type: Number,</div><div class="line">    &#125;,</div><div class="line">    duration: &#123;</div><div class="line">      type: Number,</div><div class="line">    &#125;,</div><div class="line">    formatedCurrentTime: &#123;</div><div class="line">      type: String,</div><div class="line">    &#125;,</div><div class="line">    formatedEndedTime: &#123;</div><div class="line">      type: String,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>component.wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;container&quot;&gt;</div><div class="line">    &lt;image wx:if=&quot;&#123;&#123;playing&#125;&#125;&quot; class=&quot;icon&quot; src=&quot;/images/pause.png&quot; /&gt;</div><div class="line">    &lt;image wx:else class=&quot;icon&quot; src=&quot;/images/play.png&quot; /&gt;</div><div class="line">    &lt;view class=&quot;sliderContainer&quot;&gt;</div><div class="line">        &lt;slider min=&quot;0&quot; max=&quot;&#123;&#123;duration&#125;&#125;&quot; value=&quot;&#123;&#123;currentTime&#125;&#125;&quot; bindchange=&quot;_handleSeek&quot; /&gt;</div><div class="line">        &lt;view class=&quot;time&quot;&gt;</div><div class="line">            &lt;text&gt;&#123;&#123;formatedCurrentTime&#125;&#125;&lt;/text&gt;</div><div class="line">            &lt;text&gt;&#123;&#123;formatedEndedTime&#125;&#125;&lt;/text&gt;</div><div class="line">        &lt;/view&gt;</div><div class="line">    &lt;/view&gt;</div><div class="line">    &lt;slot name=&quot;content&quot; /&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<h2 id="探索页面卸载前的监听、页面返回监听、退出小程序监听"><a href="#探索页面卸载前的监听、页面返回监听、退出小程序监听" class="headerlink" title="探索页面卸载前的监听、页面返回监听、退出小程序监听"></a>探索页面卸载前的监听、页面返回监听、退出小程序监听</h2><p>目前小程序未提供这些功能！</p>
<h2 id="探索是否自定义-Header-和-TabBar"><a href="#探索是否自定义-Header-和-TabBar" class="headerlink" title="探索是否自定义 Header 和 TabBar"></a>探索是否自定义 Header 和 TabBar</h2><p>在有些场景使用官方提供的 Header 和 TabBar 可能无法满足需求，官方会说可以使用自定的形式，但我查了下社区自定义可能存在不好处理的兼容性问题、android 原生事件无法监听的问题。如果没有真的特别需要、必须自定义，暂时还是不要自定义了。</p>
<h2 id="探索小程序运行原理"><a href="#探索小程序运行原理" class="headerlink" title="探索小程序运行原理"></a>探索小程序运行原理</h2><p>微信小程序运行在三端：iOS、Android 和 开发者工具。在 iOS 上，小程序的 javascript 代码是运行在 JavaScriptCore 中（苹果开源的浏览器内核）；在 Android 上，小程序的 javascript 代码是通过 X5 内核来解析（QQ浏览器内核），X5 对 ES6 的支持不好，要兼容的话，可以使用 ES5 或者引入 babel-polyfill 兼容库；在开发工具上，小程序的 javascript 代码是运行在 nwjs（chrome内核）。</p>
<p>微信开发者工具编辑器的实现原理和方式：它本身也是基于WEB技术体系实现的，nwjs + react，nwjs 简单说就是node + webkit，node提供给本地api能力，webkit提供web能力，两者结合就能使用JS+HTML实现本地应用程序，wxml 转化为 html用的是 reactjs，包括里面整套的逻辑都是建构在 reactjs 之上的。既然有nodejs，打包时ES6转ES5可引入babel-core的node包，CSS补全可引入postcss和autoprefixer的node包（postcss和autoprefixer的原理看这里），代码压缩可引入uglifyjs的node包。</p>
<p>微信小程序的 JavaScript 运行环境即不是 Browser 也不是 Node.js。它运行在微信 App 的上下文中，不能操作 Browser context 下的 DOM，也不能通过 Node.js 相关接口访问操作系统 API。所以，严格意义来讲，微信小程序并不是 Html5，尽管开发过程和用到的技术栈和 Html5 是相通的。开发者写的所有代码最终将会打包成一份 JavaScript，并在小程序启动的时候运行，直到小程序销毁。</p>
<p>小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的 evaluateJavascript 所实现。即用户传输的数据，需要将其转换为字符串形式传递，同时把转换后的数据内容拼接成一份 JS 脚本，再通过执行 JS 脚本的形式传递到两边独立环境。但是 evaluateJavascript 的执行会受很多方面的影响，数据到达视图层并不是实时的。</p>
<p>小程序代码包经过编译后，会放在微信的 CDN 上供用户下载，CDN 开启了 GZIP 压缩，所以用户下载的是压缩后的 GZIP 包，其大小比代码包原体积会更小。目前小程序打包是会将工程下所有文件都打入代码包内，也就是说，这些没有被实际使用到的库文件和资源也会被打入到代码包里，从而影响到整体代码包的大小。小程序启动时会从CDN下载小程序的完整包，一般是数字命名的，如：_-2082693788_4.wxapkg。</p>
<p>小程序正式部署使用 webpack 打的包，而在打包的过程中，把以下变量给屏蔽了：<code>window,document,frames,self,location,navigator,localStorage,history,Caches,screen,alert,confirm,prompt,XMLHttpRequest,WebSocket</code>。主要是为了管理和监控，如果这些对象你能访问，就可以像操作通常的网页一样操作小程序，这是绝对不被允许的。</p>
<img src="/2018/08/25/wechat-base2/folder.png" title="小程序打包后的结构">
<p>所有的小程序最后基本都被打成上面的结构，其中：</p>
<ul>
<li>WAService.js 框架JS库，提供逻辑层基础的API能力</li>
<li>WAWebview.js 框架JS库，提供视图层基础的API能力</li>
<li>WAConsole.js 框架JS库，控制台</li>
<li>app-config.js 小程序完整的配置，包含我们通过app.json里的所有配置，综合了默认配置型</li>
<li>app-service.js 我们自己的JS代码，全部打包到这个文件</li>
<li>page-frame.html 小程序视图的模板文件，所有的页面都使用此加载渲染，且所有的WXML都拆解为JS实现打包到这里</li>
<li>pages 所有的页面，这个不是我们之前的wxml文件了，主要是处理WXSS转换，使用js插入到header区域</li>
</ul>
<p>微信小程序的框架包含两部分：AppView视图层，AppService逻辑层。AppView层用来渲染页面结构，所有的视图（wxml和wxss）都是单独的 WebView来承载。AppService层用来逻辑处理、数据请求、接口调用，整个小程序只有一个，并且整个生命周期常驻内存。它们在两个进程（两个 WebView）里运行，所以小程序打开至少就会有2个 WebView进程，由于每个视图都是一个独立的 WebView进程，考虑到性能消耗，小程序不允许打开超过5个层级的页面，当然同是也是为了体验更好。使用消息 publish 和 subscribe 机制实现两个 WebView之间的通信，实现方式就是统一封装一个 WeixinJSBridge 对象，而不同的环境封装的接口不一样。</p>
<p>对逻辑和UI进行了完全隔离，这个跟当前流行的react，agular，vue有本质的区别，小程序逻辑和UI完全运行在2个独立的WebView里面，而后面这几个框架还是运行在一个 WebView 里面的，如果你想还是可以直接操作 dom 对象进行 ui 渲染的。</p>
<p>微信自己写了2个工具：wcc 把 WXML 转换为 VirtualDOM；wcsc 把 WXSS 转换为一个 JS 字符串的形式通过 style 标签append 到 header 里。</p>
<h2 id="探索图片适配问题"><a href="#探索图片适配问题" class="headerlink" title="探索图片适配问题"></a>探索图片适配问题</h2><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@media  (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)&#123;</div><div class="line">  .imgTest&#123;</div><div class="line">    background: url(https://images/2x.png) no-repeat;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@media  (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3)&#123;</div><div class="line">  .imgTest&#123;</div><div class="line">    background: url(https://images/3x.png) no-repeat;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 获取设备像素比，在 wxml 中根据不同像素比显示不同图片</div><div class="line">const getPixelRatio = () =&gt; &#123;</div><div class="line">  let pixelRatio = 0</div><div class="line">  wx.getSystemInfo(&#123;</div><div class="line">    success: function (res) &#123;</div><div class="line">      pixelRatio = res.pixelRatio</div><div class="line">    &#125;,</div><div class="line">    fail: function () &#123;</div><div class="line">      pixelRatio = 0</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  return pixelRatio</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方式三：<br>只使用三倍图，或者说最大尺寸的图片，在样式中指定宽高。我个人和团队的 UI 设计师都倾向于使用这种方式，因为小程序限制上传代码的大小为 2M，尽量不使用多套图片，使用 UI 切好的大尺寸的图片在小尺寸手机上效果也不会有太大影响。</p>
<h2 id="探索样式中不同单位的区别-px、rpx、rem、pt-等（待完成）"><a href="#探索样式中不同单位的区别-px、rpx、rem、pt-等（待完成）" class="headerlink" title="探索样式中不同单位的区别 px、rpx、rem、pt 等（待完成）"></a>探索样式中不同单位的区别 px、rpx、rem、pt 等（待完成）</h2><p>在显示屏上，每一个画面都是由无数的点阵形成的，这个点阵中，每一个点叫做像素，就是 pixel（缩写为 px），1px 所能代表的尺寸并非是一成不变的，同样 px 尺寸的元素，在高分屏上显示会明显要比在低分屏显得更小。css 中的 px 单位，是多个设备像素，1个css像素所对应的物理像素个数是不一致的，每英寸的像素的数量保持在96左右，因此设置为12px的元素，无论使用什么样的设备查看网页，字体的大小始终为1/8英寸。</p>
<p>px 像素，是一个点，点的大小是会变的，也称“相对长度”<br>pt 全称 point，1/72英寸，用于印刷业，也称“绝对长度”<br>dp = px <em> (目标设备 dpi 分辨率 / 160)<br>rpx = px </em> (目标设备宽 px 值 / 750)<br>rem: 规定屏幕宽度为20rem；1rem = (750/20)rpx</p>
<p>dp 是以屏幕分辨率为基准的动态单位，而 rpx 是以长度为基准的动态单位，两者是不能直接进行互换的。</p>
<p>如果将微信小程序放到平板电脑上运行，屏幕的宽度 px 值有可能会变化（横竖屏、分屏模式等等），这时候，再以宽度为基准，就会出现元素显示不正确的问题，从这一点可以看出，微信团队目前并不希望将小程序扩展到手机以外的设备中。</p>
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序开发基础1]]></title>
      <url>https://zhulichao.github.io/2018/08/25/wechat-base1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们的项目中是使用 TypeScript 写代码，通过 rollup 编译成 javascript，在微信开发者工具打开 build 后的目录，即可运行，开发模式下在每次保存完代码后都会进行编译。仍使用 yarn add xxx 集成第三方 package，在使用 import 引入第三方依赖的时候，会将第三方文件打包进去，因此不用特殊处理。当然如果没有必要引用或者没有必要全部引用的，尽量不引用或引用局部文件，防止将所有文件都打包进去最终超过 2M 的限制。</p>
<p>请注意因为使用了 ts，再引入第三方 package 时，有时 ts 校验会报错，可以关闭一次编辑器重新打开确认一下是否真的有校验错误，我在引入 moment 时就遇到了这个问题，第一次引入时有校验报错，第二天再试时就好了。</p>
<h2 id="编译后-process-env-NODE-ENV-的报错"><a href="#编译后-process-env-NODE-ENV-的报错" class="headerlink" title="编译后 process.env.NODE_ENV 的报错"></a>编译后 process.env.NODE_ENV 的报错</h2><p>使用 rollup 编译后的文件，在微信开发者工具中运行时，会由于没有 process 变量但引用了 process.env.NODE_ENV 而报错。解决办法是使用 rollup-plugin-replace 插件，在 rollup.config.js 配置文件中添加如下代码即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">'rollup-plugin-replace'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...</div><div class="line">  plugins: [</div><div class="line">    ...</div><div class="line">    replace(&#123;</div><div class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(</div><div class="line">        process.env.NODE_ENV || <span class="string">'development'</span>,</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="编译后-whatwg-fetch-中-this-为-undefined-的问题"><a href="#编译后-whatwg-fetch-中-this-为-undefined-的问题" class="headerlink" title="编译后 whatwg-fetch 中 this 为 undefined 的问题"></a>编译后 whatwg-fetch 中 this 为 undefined 的问题</h2><p>项目中有安装包依赖了 whatwg-fetch，由于小程序既不是浏览器环境也不是 node 环境，其中使用的 this 编译后变成了 undefined。解决办法是在 rollup.config.js 配置中间中指定 whatwg-fetch 上下文即可，但这个上下文要是小程序中无需定义而存在的上下文，经过试验可使用 global 变量。代码如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  moduleContext: &#123;</div><div class="line">    [<span class="built_in">require</span>.resolve(<span class="string">'whatwg-fetch'</span>)]: <span class="string">'global'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="集成-Redux、Redux-Persist、Graphql、Apollo-Client"><a href="#集成-Redux、Redux-Persist、Graphql、Apollo-Client" class="headerlink" title="集成 Redux、Redux-Persist、Graphql、Apollo-Client"></a>集成 Redux、Redux-Persist、Graphql、Apollo-Client</h2><p><code>yarn add redux redux-persist</code><br><code>yarn add apollo-client graphql-tag</code></p>
<p><a href="https://github.com/reactjs/redux" target="_blank" rel="external">Redux</a>的使用参考官方文档即可。小程序中不能使用 react-redux，为了能够像以前 react 使用 redux 一样在小程序中使用 redux，我参考了 <a href="https://github.com/charleyw/wechat-weapp-redux" target="_blank" rel="external">小程序 Redux 绑定库</a>，将其中的 warning.js、shallowEqual.js、wrapActionCreators.js、connect.js、Provider.js 简单修改为 ts 文件集成到项目中，就可以用使用 react-redux 的方式使用 redux 了。</p>
<p>在使用的过程中，connect 在 Page 上使用没有问题，但小程序中 Component 使用 connect 没有效果，这是因为 Component 的声明周期中没有 onLoad、onUnload，有的是 attached、detached 方法，因此修改 connect.ts 文件，通过传入固定参数 type 为 Component 来决定使用哪两个生命周期方法，这样支持了 Component 也能通过 connect 使用 redux。</p>
<p>使用 <a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="external">redux-persist</a> 可以将 store 的整个数据保存到指定的 storage 中，如浏览器的 LocalStorage、react-native 的 AsyncStorage 等。将微信 storage 的 api 进行封装，也可直接使用<a href="https://github.com/cuijiemmx/redux-casa/tree/master/packages/redux-persist-weapp-storage" target="_blank" rel="external">redux-persist-weapp-storage</a>，可指定使用微信的 storage。参考 redux-persist 的文档，将 store 存储到 storage 可使用 persistStore 方法，或将 active 置为 true 在每次 store 变化时都保存到 storage 中。但在程序初始化时将 storage 中保存的数据放入 store 的操作在文档中没找到，官方提供的方式是针对 react 组件的，我自己找了两种可以达到该效果的方式，一种是直接从 storage 中读出数据，另一种是使用 getStoredState 读出数据，具体代码参考下面。</p>
<p>Apollo-Client 默认是使用 fetch 进行网络请求的，但是小程序中没有 fetch，只能使用 wx.request 进行网络请求，在官方文档也没有找到可以自定义或传入 fetch 的方式。后来查了源码，在 new ApolloClient 的 networkInterface 参数中可以传入 query 参数，这样将 wx.request 进行封装通过 query 参数传入，就可以使用 Apollo-Client 进行网络请求了。在我们的项目中有使用轮询的需求，使用的是 Apollo-Client 的 watchQuery 方法，因为每次需要指定 pollInterval 参数，感觉不太方便管理，因此对 watchQuery 的使用进行了封装，具体代码参考下面。</p>
<p>现在虽然能使用 Apollo-Client 进行网络请求了，但还没有办法直接拿到请求返回的结果，在 Web 端是使用 react-apollo 的 compose 将请求结果通过 props 传入组件，但是小程序无法使用。目前我使用了两种不是很好的方式临时解决的这个问题，如果是 mutation，直接使用 then 来拿到返回结果，如果是 query，是在 mapPropsToState 中，使用 Apollo-Client 的 readQuery 拿到请求的返回结果，进行处理后传入 Page 的 data。</p>
<p><strong>主要代码如下：</strong></p>
<p>configureStore.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">import ApolloClient from &apos;apollo-client&apos;;</div><div class="line">import &#123; applyMiddleware, combineReducers, createStore, Store &#125; from &apos;redux&apos;;</div><div class="line">import &#123; getStoredState, persistReducer, persistStore &#125; from &apos;redux-persist&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line"></div><div class="line">import createApolloClient from &apos;./createApolloClient&apos;;</div><div class="line">import reducer from &apos;./reducers/index&apos;;</div><div class="line">import WxStorage from &apos;./storage&apos;;</div><div class="line"></div><div class="line">interface CreateRootReducer &#123;</div><div class="line">  apolloClient: ApolloClient;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createRootReducer(&#123; apolloClient &#125;: CreateRootReducer) &#123;</div><div class="line">  return combineReducers(&#123;</div><div class="line">    apollo: apolloClient.reducer(),</div><div class="line">    ...reducer,</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let store: Store&lt;&#123;&#125;&gt;;</div><div class="line"></div><div class="line">export default function configureStore() &#123;</div><div class="line">  const apolloClient = createApolloClient();</div><div class="line">  const middleware = [thunk, apolloClient.middleware()];</div><div class="line">  const enhancer = applyMiddleware(...middleware);</div><div class="line">  const rootReducer = createRootReducer(&#123; apolloClient &#125;);</div><div class="line"></div><div class="line">  const persistConfig = &#123;</div><div class="line">    // active: true, // store 在每次变化后都会同步保存到 storage 中</div><div class="line">    key: &apos;root&apos;,</div><div class="line">    storage: WxStorage,</div><div class="line">    version: 2,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  const persistedReducer = persistReducer(persistConfig, rootReducer);</div><div class="line">  // 将 storage 中保存的数据初始化给 store</div><div class="line">  // 方式一</div><div class="line">  const storedState = wx.getStorageSync(&apos;persist:root&apos;);</div><div class="line">  const state: any = &#123;&#125;;</div><div class="line">  if (typeof storedState === &apos;string&apos; &amp;&amp; storedState) &#123;</div><div class="line">    const rawState = JSON.parse(storedState);</div><div class="line">    Object.keys(rawState).forEach(key =&gt; &#123;</div><div class="line">      state[key] = JSON.parse(rawState[key]);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  // 方式二</div><div class="line">  getStoredState(persistConfig)</div><div class="line">    .then(res =&gt; &#123;</div><div class="line">      store.dispatch(&#123;</div><div class="line">        key: &apos;root&apos;,</div><div class="line">        payload: res,</div><div class="line">        type: &apos;persist/REHYDRATE&apos;,</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      throw error;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  store = createStore(persistedReducer, &#123;&#125;, enhancer);</div><div class="line">  return &#123;</div><div class="line">    apolloClient,</div><div class="line">    persistStore: () =&gt; persistStore(store), // 将 store 数据保存到 storage 中</div><div class="line">    store,</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>storage.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">interface Storage &#123;</div><div class="line">  getItem(key: string, ...args: any[]): any;</div><div class="line">  setItem(key: string, value: any, ...args: any[]): any;</div><div class="line">  removeItem(key: string, ...args: any[]): any;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const WxStorage: Storage = &#123;</div><div class="line">  getItem: key =&gt;</div><div class="line">    new Promise((resolve, reject) =&gt; &#123;</div><div class="line">      wx.getStorage(&#123;</div><div class="line">        fail: res =&gt; &#123;</div><div class="line">          reject(res);</div><div class="line">        &#125;,</div><div class="line">        key,</div><div class="line">        success: res =&gt; &#123;</div><div class="line">          resolve(res.data);</div><div class="line">        &#125;,</div><div class="line">      &#125;);</div><div class="line">    &#125;),</div><div class="line">  removeItem: key =&gt;</div><div class="line">    new Promise((resolve, reject) =&gt; &#123;</div><div class="line">      wx.removeStorage(&#123;</div><div class="line">        fail: res =&gt; &#123;</div><div class="line">          reject(res);</div><div class="line">        &#125;,</div><div class="line">        key,</div><div class="line">        success: res =&gt; &#123;</div><div class="line">          resolve(res);</div><div class="line">        &#125;,</div><div class="line">      &#125;);</div><div class="line">    &#125;),</div><div class="line">  setItem: (key, data) =&gt;</div><div class="line">    new Promise((resolve, reject) =&gt; &#123;</div><div class="line">      wx.setStorage(&#123;</div><div class="line">        data,</div><div class="line">        fail: res =&gt; &#123;</div><div class="line">          reject(res);</div><div class="line">        &#125;,</div><div class="line">        key,</div><div class="line">        success: res =&gt; &#123;</div><div class="line">          resolve(res);</div><div class="line">        &#125;,</div><div class="line">      &#125;);</div><div class="line">    &#125;),</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default WxStorage;</div></pre></td></tr></table></figure></p>
<p>warning.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">export default function warning(message: string) &#123;</div><div class="line">  if (typeof console !== &apos;undefined&apos; &amp;&amp; typeof console.error === &apos;function&apos;) &#123;</div><div class="line">    console.error(message);</div><div class="line">  &#125;</div><div class="line">  try &#123;</div><div class="line">    // This error was thrown as a convenience so that if you enable</div><div class="line">    // &quot;break on all exceptions&quot; in your console,</div><div class="line">    // it would pause the execution at this line.</div><div class="line">    throw new Error(message);</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    console.log(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>shallowEqual.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">export default function shallowEqual(objA: any, objB: any) &#123;</div><div class="line">  if (objA === objB) &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  const keysA = Object.keys(objA);</div><div class="line">  const keysB = Object.keys(objB);</div><div class="line"></div><div class="line">  if (keysA.length !== keysB.length) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  let result = true;</div><div class="line">  // Test for A&apos;s keys different from B.</div><div class="line">  const hasOwn = Object.prototype.hasOwnProperty;</div><div class="line">  keysA.forEach(keyA =&gt; &#123;</div><div class="line">    if (!hasOwn.call(objB, keysA) || objA[keyA] !== objB[keyA]) &#123;</div><div class="line">      result = false;</div><div class="line">      return false;</div><div class="line">    &#125;</div><div class="line">    return;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>wrapActionCreators.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function bindActionCreator(actionCreator: any, dispatch: any) &#123;</div><div class="line">  return () =&gt; dispatch(actionCreator.apply(undefined, arguments));</div><div class="line">&#125;</div><div class="line"></div><div class="line">function bindActionCreators(actionCreators: any, dispatch: any) &#123;</div><div class="line">  if (typeof actionCreators === &apos;function&apos;) &#123;</div><div class="line">    return bindActionCreator(actionCreators, dispatch);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (typeof actionCreators !== &apos;object&apos; || actionCreators === null) &#123;</div><div class="line">    throw new Error(</div><div class="line">      &apos;bindActionCreators expected an object or a function, instead received &apos; +</div><div class="line">        (actionCreators === null ? &apos;null&apos; : typeof actionCreators) +</div><div class="line">        &apos;. &apos; +</div><div class="line">        &apos;Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?&apos;,</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  const keys = Object.keys(actionCreators);</div><div class="line">  const boundActionCreators: any = &#123;&#125;;</div><div class="line">  keys.forEach(actionKey =&gt; &#123;</div><div class="line">    const tempActionCreator = actionCreators[actionKey];</div><div class="line">    if (typeof tempActionCreator === &apos;function&apos;) &#123;</div><div class="line">      boundActionCreators[actionKey] = bindActionCreator(</div><div class="line">        tempActionCreator,</div><div class="line">        dispatch,</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return boundActionCreators;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default function wrapActionCreators(actionCreators: any) &#123;</div><div class="line">  return (dispatch: any) =&gt; bindActionCreators(actionCreators, dispatch);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>connect.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">import shallowEqual from &apos;./shallowEqual&apos;;</div><div class="line">import warning from &apos;./warning&apos;;</div><div class="line">import wrapActionCreators from &apos;./wrapActionCreators&apos;;</div><div class="line"></div><div class="line">const defaultMapStateToProps = (state: object) =&gt; &#123;</div><div class="line">  console.log(state);</div><div class="line">  return &#123;&#125;;</div><div class="line">&#125;;</div><div class="line">const defaultMapDispatchToProps = (dispatch: any) =&gt; (&#123; dispatch &#125;);</div><div class="line"></div><div class="line">export default function connect(mapStateToProps: any, mapDispatchToProps: any) &#123;</div><div class="line">  const shouldSubscribe = Boolean(mapStateToProps);</div><div class="line">  const mapState = mapStateToProps || defaultMapStateToProps;</div><div class="line">  const app = getApp();</div><div class="line"></div><div class="line">  let mapDispatch: any;</div><div class="line">  if (typeof mapDispatchToProps === &apos;function&apos;) &#123;</div><div class="line">    mapDispatch = mapDispatchToProps;</div><div class="line">  &#125; else if (!mapDispatchToProps) &#123;</div><div class="line">    mapDispatch = defaultMapDispatchToProps;</div><div class="line">  &#125; else &#123;</div><div class="line">    mapDispatch = wrapActionCreators(mapDispatchToProps);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return function wrapWithConnect(pageConfig: any) &#123;</div><div class="line">    function handleChange(this: any, options: any) &#123;</div><div class="line">      if (!this.unsubscribe) &#123;</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      const state = this.store.getState();</div><div class="line">      const mappedState = mapState(state, options);</div><div class="line">      if (!this.data || shallowEqual(this.data, mappedState)) &#123;</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line">      this.setData(mappedState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    let &#123; onLoad: pageConfigOnLoad, onUnload: pageConfigOnUnload &#125; = pageConfig;</div><div class="line"></div><div class="line">    // 支持 Component 使用</div><div class="line">    if (pageConfig.type === &apos;Component&apos;) &#123;</div><div class="line">      pageConfigOnLoad = pageConfig.attached;</div><div class="line">      pageConfigOnUnload = pageConfig.detached;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function onLoad(this: any, options: any) &#123;</div><div class="line">      this.store = app.store;</div><div class="line">      if (!this.store) &#123;</div><div class="line">        warning(&apos;Store对象不存在!&apos;);</div><div class="line">      &#125;</div><div class="line">      if (shouldSubscribe) &#123;</div><div class="line">        this.unsubscribe = this.store.subscribe(</div><div class="line">          handleChange.bind(this, options),</div><div class="line">        );</div><div class="line">        handleChange.call(this, options);</div><div class="line">      &#125;</div><div class="line">      if (typeof pageConfigOnLoad === &apos;function&apos;) &#123;</div><div class="line">        pageConfigOnLoad.call(this, options);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function onUnload(this: any) &#123;</div><div class="line">      if (typeof pageConfigOnUnload === &apos;function&apos;) &#123;</div><div class="line">        pageConfigOnUnload.call(this);</div><div class="line">      &#125;</div><div class="line">      if (typeof this.unsubscribe === &apos;function&apos;) &#123;</div><div class="line">        this.unsubscribe();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 支持 Component 使用</div><div class="line">    if (pageConfig.type === &apos;Component&apos;) &#123;</div><div class="line">      return Object.assign(</div><div class="line">        &#123;&#125;,</div><div class="line">        pageConfig,</div><div class="line">        &#123;</div><div class="line">          methods: &#123;</div><div class="line">            ...pageConfig.methods,</div><div class="line">            ...mapDispatch(app.store.dispatch),</div><div class="line">          &#125;,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          attached: onLoad,</div><div class="line">          detached: onUnload,</div><div class="line">        &#125;,</div><div class="line">      );</div><div class="line">    &#125; else &#123;</div><div class="line">      return Object.assign(&#123;&#125;, pageConfig, mapDispatch(app.store.dispatch), &#123;</div><div class="line">        onLoad,</div><div class="line">        onUnload,</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Provider.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import warning from &apos;./warning&apos;;</div><div class="line"></div><div class="line">function checkStoreShape(store: object) &#123;</div><div class="line">  const missingMethods = [&apos;subscribe&apos;, &apos;dispatch&apos;, &apos;getState&apos;].filter(</div><div class="line">    m =&gt; !store.hasOwnProperty(m),</div><div class="line">  );</div><div class="line"></div><div class="line">  if (missingMethods.length &gt; 0) &#123;</div><div class="line">    warning(</div><div class="line">      &apos;Store 似乎不是一个合法的 Redux Store对象: &apos; +</div><div class="line">        &apos;缺少这些方法: &apos; +</div><div class="line">        missingMethods.join(&apos;, &apos;) +</div><div class="line">        &apos;。&apos;,</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default function Provider(store: object) &#123;</div><div class="line">  checkStoreShape(store);</div><div class="line">  return (appConfig: object) =&gt; Object.assign(&#123;&#125;, appConfig, &#123; store &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>config.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  requestUrl: &apos;http://127.0.0.1:8888&apos;,</div><div class="line">  pollInterval: 3000,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>createApolloClient.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">import ApolloClient, &#123;</div><div class="line">  createNetworkInterface,</div><div class="line">  ObservableQuery,</div><div class="line">  WatchQueryOptions,</div><div class="line">&#125; from &apos;apollo-client&apos;;</div><div class="line">import config from &apos;./config&apos;;</div><div class="line"></div><div class="line">interface CustomClient extends ApolloClient &#123;</div><div class="line">  allQueryWatchers?: Set&lt;ObservableQuery&lt;&#123;&#125;&gt;&gt;;</div><div class="line">  watchQueryStart?: (options: WatchQueryOptions) =&gt; ObservableQuery&lt;&#123;&#125;&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 封装通用 fetch，gql 返回类型就是 any</div><div class="line">export const query = (input: any) =&gt; &#123;</div><div class="line">  return new Promise(resolve =&gt; &#123;</div><div class="line">    wx.request(&#123;</div><div class="line">      ...input,</div><div class="line">      data: &#123;</div><div class="line">        query: input.query.loc.source.body, // 获取查询语句字符串</div><div class="line">        variables: input.variables || &#123;&#125;,</div><div class="line">      &#125;,</div><div class="line">      method: &apos;POST&apos;,</div><div class="line">      header: &#123;</div><div class="line">        cookie: getApp().globalData.cookie,</div><div class="line">      &#125;,</div><div class="line">      fail: res =&gt; &#123;</div><div class="line">        throw res;</div><div class="line">      &#125;,</div><div class="line">      success: res =&gt; &#123;</div><div class="line">        resolve(res.data);</div><div class="line">      &#125;,</div><div class="line">      url: `$&#123;config.requestUrl&#125;/graphql`,</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const client: CustomClient = new ApolloClient(&#123;</div><div class="line">  networkInterface: &#123;</div><div class="line">    ...createNetworkInterface(&#123;</div><div class="line">      opts: &#123;</div><div class="line">        credentials: &apos;include&apos;,</div><div class="line">      &#125;,</div><div class="line">      uri: `$&#123;config.requestUrl&#125;/graphql`,</div><div class="line">    &#125;),</div><div class="line">    query,</div><div class="line">  &#125;,</div><div class="line">  queryDeduplication: true,</div><div class="line">  addTypename: false,</div><div class="line">  reduxRootSelector: state =&gt; state.apollo,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default function createApolloClient() &#123;</div><div class="line">  client.allQueryWatchers = new Set();</div><div class="line">  // 封装通用 watchQuery，具有统一的轮询间隔</div><div class="line">  client.watchQueryStart = function(options: WatchQueryOptions) &#123;</div><div class="line">    const queryWatcher = client.watchQuery(options);</div><div class="line">    queryWatcher.startPolling(config.pollInterval);</div><div class="line">    if (this.allQueryWatchers) &#123;</div><div class="line">      this.allQueryWatchers.add(queryWatcher);</div><div class="line">    &#125;</div><div class="line">    return queryWatcher;</div><div class="line">  &#125;;</div><div class="line">  return client;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发起 query 的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import gql from &apos;graphql-tag&apos;;</div><div class="line"></div><div class="line">const products = gql`</div><div class="line">  query Products &#123;</div><div class="line">    products &#123;</div><div class="line">      id</div><div class="line">      name</div><div class="line">      description</div><div class="line">      amount</div><div class="line">      code</div><div class="line">      lectures &#123;</div><div class="line">        type</div><div class="line">        lecture &#123;</div><div class="line">          ... on Live &#123;</div><div class="line">            __typename</div><div class="line">            id</div><div class="line">            name</div><div class="line">            startDate</div><div class="line">            endDate</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">`;</div><div class="line">export default products;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import productsQuery from &apos;../../graphql/products&apos;;</div><div class="line"></div><div class="line">const pageConfig: wx.PageParam = &#123;</div><div class="line">    onLoad() &#123;</div><div class="line">        app.globalData.apolloClient.query(&#123;</div><div class="line">            query: productsQuery,</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const mapStateToData = (state: any) =&gt; &#123;</div><div class="line">  const pagesInstance = getCurrentPages();</div><div class="line">  let products: ProductType[] = [];</div><div class="line"></div><div class="line">  pagesInstance.forEach(page =&gt; &#123;</div><div class="line">    // 通过路由判断找到当前 Page 实例，这样可以获取到当前页面的 data、options 等信息</div><div class="line">    if (page.route === &apos;pages/home/home&apos;) &#123;</div><div class="line">      const data: ProductsType =</div><div class="line">        state.apollo.data.ROOT_QUERY &amp;&amp; state.apollo.data.ROOT_QUERY[`products`]</div><div class="line">          ? app.globalData.apolloClient.readQuery(&#123;</div><div class="line">              query: productsQuery,</div><div class="line">            &#125;)</div><div class="line">          : [];</div><div class="line"></div><div class="line">      if (data.products) &#123;</div><div class="line">        products = data.products.map(product =&gt; &#123;...&#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return &#123;</div><div class="line">    products,</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const nextPageConfig = connect(mapStateToData, undefined)(pageConfig);</div><div class="line">Page(nextPageConfig);</div></pre></td></tr></table></figure>
<p>发起 mutation 的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import gql from &apos;graphql-tag&apos;;</div><div class="line"></div><div class="line">const createActivityRecord = gql`</div><div class="line">  mutation CreateActivityRecord(</div><div class="line">    $input: ActivityRecordInput!</div><div class="line">    $byOrder: Boolean</div><div class="line">  ) &#123;</div><div class="line">    createActivityRecord(input: $input, byOrder: $byOrder) &#123;</div><div class="line">      id</div><div class="line">      product &#123;</div><div class="line">        id</div><div class="line">        name</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">`;</div><div class="line"></div><div class="line">export default createActivityRecord;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">app.globalData.query(&#123;</div><div class="line">    query: createActivityRecord,</div><div class="line">    variables: &#123;</div><div class="line">        input: &#123;</div><div class="line">            activityId: this.data.activityId,</div><div class="line">            productId: this.data.productId,</div><div class="line">            ownerId: this.data.ownerId,</div><div class="line">        &#125;,</div><div class="line">        byOrder: false,</div><div class="line">    &#125;,</div><div class="line">&#125;).then((res: any) =&gt; &#123;</div><div class="line">    if (res.data.errors) &#123;</div><div class="line">        wx.showToast(&#123;</div><div class="line">        title: &apos;操作失败&apos;,</div><div class="line">        icon: &apos;none&apos;,</div><div class="line">        &#125;);</div><div class="line">    &#125; else &#123;</div><div class="line">        this.sendFlowerSuccess();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="集成-Lodash"><a href="#集成-Lodash" class="headerlink" title="集成 Lodash"></a>集成 Lodash</h2><p><code>yarn add lodash-es</code><br><code>yarn add -D @types/lodash-es</code></p>
<p>import debounce from ‘lodash-es/debounce’;<br>…</p>
<p>在使用的地方局部引用即可。在使用 debounce 方法时，会报下图所示的错误。原因是小程序没有全局的 window 对象，但查看源码只要有全局 self、global 之一即可，通过 console 输出看到小程序有 global 对象，因此在 app.ts 中添加如下代码，之后就可以正常使用 lodash 了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 全局 global 处理，lodash 中使用了 global</div><div class="line">Object.assign(global, &#123;</div><div class="line">    Array,</div><div class="line">    Date,</div><div class="line">    Error,</div><div class="line">    Function,</div><div class="line">    Math,</div><div class="line">    Object,</div><div class="line">    RegExp,</div><div class="line">    String,</div><div class="line">    TypeError,</div><div class="line">    setTimeout,</div><div class="line">    clearTimeout,</div><div class="line">    setInterval,</div><div class="line">    clearInterval,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">App(&#123;...&#125;);</div></pre></td></tr></table></figure>
<img src="/2018/08/25/wechat-base1/lodash.png" title="使用 lodash 报错">
]]></content>
      
        <categories>
            
            <category> WeChat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WeChat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[沟通问题]]></title>
      <url>https://zhulichao.github.io/2018/08/23/communication-problem/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2021-04-20-优先级协商"><a href="#2021-04-20-优先级协商" class="headerlink" title="2021-04-20 优先级协商"></a>2021-04-20 优先级协商</h2><p>在一次使用看板的迭代中，任务没有安排优先级，都是自己根据情况开发，这种情况下，第一件要做的事，就是跟需要对接、合作的人确认自己所有任务的优先级，能够让自己流畅、无阻碍的开发，避免开发过程中可能产生等待的情况。</p>
<h2 id="2021-04-20-方案确认"><a href="#2021-04-20-方案确认" class="headerlink" title="2021-04-20 方案确认"></a>2021-04-20 方案确认</h2><p>在做一个自己不熟悉的、不了解的事时，尤其是还需要重复多遍做这个事时，最好做之前与负责人（熟悉这个事的人）沟通解决方案，可能自己认为很简单、很理所当然的方式，在项目上由于一些特殊原因，这个方案都会有问题，提前确认避免返工。</p>
<p>做这种需要重复多遍的事时，还建议自己列一个工作步骤列表，每次做这个事都严格按照步骤来，防止中间忘了某一步导致项目错误。</p>
<h2 id="2018-08-23-记"><a href="#2018-08-23-记" class="headerlink" title="2018-08-23 记"></a>2018-08-23 记</h2><p>昨天发现了自己一个非常反常的行为，我还在尝试解决问题的过程中就问了我们老大当前的方案是不是可接受，虽然后来问题解决了，但我还是仔细思考了自己为什么会出现这种反常行为。通常我会把各种方法都尝试过、网上查了几遍后，如果还没解决问题才会向上汇报，而且我也非常明确的知道我们老大非常讨厌别人还没有上网查查有没有解决方案就去问他。跟着我的心去思考了一下，我发现是因为之前有人问了我什么时候能提审，我觉得他在催我，所以着急了。但实际上人家可能不是催我的意思，只是问问，《关键对话》中强调过不要对别人说的话主观臆断，导致自己产生情绪或产生其它不好的影响。所以第二天我就跟这位同事简单聊了聊，表示以后他可以把期望的时间直接说出来，我也会把当前的情况跟他描述一下，双方对当前的进度及项目要求的时间达成一致，而不是互相去猜对方想要的是什么、会怎么做，逐步建立互相的信任。</p>
]]></content>
      
        <categories>
            
            <category> 沟通 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 沟通 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决问题的思路]]></title>
      <url>https://zhulichao.github.io/2018/08/20/problem-thought/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目重构后-Modal-组件样式不正确"><a href="#项目重构后-Modal-组件样式不正确" class="headerlink" title="项目重构后 Modal 组件样式不正确"></a>项目重构后 Modal 组件样式不正确</h2><p>我们的项目基于 create-react-app 重构后，运行一段时间突然发现 Modal 组件样式有问题了。现象是：通常的 Modal 样式是正确的，在一个固定地方点击的 Modal 样式不正确，而且一旦出现不对的样式后其它的 Modal 样式也不正确了。经过与正确的 Modal 对比样式，发现样式没有问题。无意中点击了编译后的 css 文件，发现 keyframes 不是 modules 命名的，而是命名为 a、b、c 等，被其它文件中同名的 keyframes 覆盖了。这也解释了为什么其它地方的 Modal 是正确的，而某个地方的 Modal 出现不正确样式后其它 Modal 都被影响了的问题。我的第一反应就是代码里面命名重复了，但查看代码发现没有问题。再仔细一看发现其它样式都是 modules 形式的，如类名为 .Modal_content__14s1u，只有 keyframes 不是，都是 a、b、c 这种形式的。</p>
<p>之后就开始查 webpack 相关编译的问题，没有解决方案。后来想起来，项目基于 create-react-app 后，webpack 配置相关的都是在 react-scripts 中配置的，也就是 create-react-app，去查了 issuse 列表，找到有人问相同的问题了，解决方式如下。</p>
<p>事后回想一下，我已经定位到时编译问题后，首先想到的就应该是 create-react-app 的问题，不应该盲目的乱查 webpack 配置相关的东西。<strong>切记遇到问题还需仔细思考，理清思路，准确定位，不应乱查。</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create-react-app/packages/react-scripts/config/webpack.config.prod.js</span></div><div class="line">...</div><div class="line">module.exports = &#123;</div><div class="line">  ...</div><div class="line">  optimization: &#123;</div><div class="line">    minimizer: [</div><div class="line">      ...,</div><div class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123; cssProcessorOptions: &#123; safe: <span class="literal">true</span> &#125; &#125;),</div><div class="line">    ],</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="奇怪问题"><a href="#奇怪问题" class="headerlink" title="奇怪问题"></a>奇怪问题</h2><p>如果自己确认代码没有问题，但效果有奇怪的问题，尤其是移植过来的代码，跟原代码运行时效果不一样，首先考虑是否有包的版本有问题，将相关包的版本处理成一样的，再试试是否还存在问题。</p>
]]></content>
      
        <categories>
            
            <category> Ideas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ideas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用思路]]></title>
      <url>https://zhulichao.github.io/2018/08/17/common-ideas/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>遇到如下一些问题时可参考的思路：</p>
<ul>
<li>缓存问题，可使用在 url 后面拼接当前时间参数的方式，<code>url + &#39;?&#39; + Dare.parse(new Date())</code></li>
<li>如果在一些 api 中报了页面路径不正确，确认后面是否多了或少了 <code>/</code></li>
<li>对于开发过程中还没定下来的页面，后期也可能会经常变化，尤其对于小程序这种上线需要审核的，可以考虑使用网络图片或 web-view 的方式，减少开发成本</li>
<li>需要下载文件的需求，可考虑能否通过提供下载链接、在服务号中发送指定内容通过自动回复下载链接等方式满足需求</li>
<li>如果需要在一个时候加入权限，这个权限相对固定，可以复制出一个新的项目，再在此基础上进行权限的设置</li>
<li>render 中可以循环遍历 props 进行显示，在render中定义局部变量，只要显示的位置在遍历之后，就可正常显示，必要时可使用 flex 布局调整页面显示顺序，但代码是先遍历后展示的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Ideas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ideas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《JavaScript语言精粹》笔记（未完成）]]></title>
      <url>https://zhulichao.github.io/2018/07/17/javascript-good-parts/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集成谷歌分析]]></title>
      <url>https://zhulichao.github.io/2018/07/08/google-analytics/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网站跟踪"><a href="#网站跟踪" class="headerlink" title="网站跟踪"></a>网站跟踪</h2><p>登录 <a href="https://analytics.google.com/" target="_blank" rel="external">Google Analytics</a> 后，根据项目情况创建媒体资源并集成到项目中，通常包括以下步骤：</p>
<ul>
<li>初始化跟踪实例</li>
<li>上报页面访问事件，集成 Google Analytics 后会自动上报页面访问事件，但现在的应用通常是单页应用，需要特殊处理一下，在路由发生变化时上报页面信息</li>
<li>标识用户<ul>
<li>Google 后台，管理 -&gt; 媒体资源/.js 跟踪信息 -&gt; User-ID，启用 User-ID 功能，可查看示例代码</li>
<li>代码中再获取到用户信息时进行上报，如 <code>gtag(&#39;set&#39;, {&#39;user_id&#39;: &#39;USER_ID&#39;});</code></li>
<li>清除 cookie 后，将产生一个新用户，即使设置了相同的 user_id</li>
<li>在报告 -&gt; 受众群体 -&gt; 行为 -&gt; User ID 覆盖率中，可查看被标识用户的比例</li>
</ul>
</li>
<li>跟踪流量来源<ul>
<li>在页面 url 中带有的 <code>utm_</code> 系列参数会自动上报，utm_source 是必须的，否则无法收集其它数据</li>
<li>也可通过代码手动上报</li>
<li>utm_source，广告系列来源，用于确定具体的搜索引擎、简报或其他来源，如 google 或 weixin</li>
<li>utm_medium，广告系列媒介，用于确定电子邮件或采用每次点击费用的广告等媒介，如 cpc 或 appmessage 或 timeline</li>
<li>utm_campaign，广告系列名称，用于关键字分析，以标识具体的产品推广活动或战略广告系列，如 spring_sale 或 sharePlan</li>
<li>utm_term，广告系列字词，用于付费搜索，为广告提供关键字，如 running + shoes</li>
<li>utm_content，广告系列内容，用于 A/B 测试和内容定位广告，以区分指向相同网址的不同广告或链接，如 logolink 或 textlink</li>
</ul>
</li>
<li><p>上报事件，可上报自定义指标和维度</p>
<ul>
<li>事件类别，如购买</li>
<li>事件操作，如购买成功、购买失败</li>
<li>事件标签，如单品1、单品2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gtag(&apos;config&apos;, config.gaTrackingId, &#123;</div><div class="line">  custom_map: &#123;</div><div class="line">    dimension1: &apos;viewerId&apos;,</div><div class="line">    dimension2: &apos;activityName&apos;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gtag(&apos;event&apos;, &apos;事件操作&apos;, &#123;</div><div class="line">  event_category: &apos;事件类别&apos;,</div><div class="line">  event_label: &apos;事件标签&apos;,</div><div class="line">  viewerId: &apos;维度1&apos;,</div><div class="line">  activityName: &apos;维度2&apos;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《用户体验要素》笔记]]></title>
      <url>https://zhulichao.github.io/2018/07/07/ux-design/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>“如何提出正确的问题”。</p>
<p>用户体验并不是指一见产品本身是如何工作的，用户体验是指“产品如何与外界发生联系并发挥作用”，也就是人们如何“接触”和“使用”它。</p>
<p>拥有更多的“产品特性”，被证明只能保持短时间的竞争优势。随着功能的不断膨胀，网站变得越来越复杂、越来越笨重、越来越难以使用，最后就失去了对初次访问者应有的吸引力。</p>
<p>转化率是一种常用的方式，来衡量用户体验的效果。</p>
<p>任何在用户体验上所做的努力，目的都是为了提高效率。“帮助人们工作得更快”和“减少他们犯错的几率”。</p>
<p>创建吸引人的、高效的用户体验的方法称为“以用户为中心的设计（user-centered design）”。以用户为中心的设计思想非常简单：在开发产品的每一个步骤中，都要把用户列入考虑范围。</p>
<p>用户体验的整个开发流程，都是为了确保用户在你的产品上的所有体验不会发生在你“明确的、有意识的意图”之外。这就是说，要考虑到用户有可能采取的每一个行动的每一种可能性，并且去理解在这个过程的每一个步骤中用户的期望值。</p>
<img src="/2018/07/07/ux-design/ux.png" title="五个层面">
<p>每一个层面都是根据它下面的那个层面来决定的。当我们做出的决定没有和上下层面保持一致的时候，项目常常会偏离正常轨道，完成日期延迟，而在开发团队试图把各个不匹配的要素勉强拼凑在一起的同时，费用也开始飞速上涨。</p>
<h2 id="战略层"><a href="#战略层" class="headerlink" title="战略层"></a>战略层</h2><p>成功的用户体验，其基础是一个被明确表达的“战略”。经营者想从网站得到什么，是产品目标；用户想从网站得到什么，是用户需求，结合内外两者就组成了战略层。</p>
<p>对于任何一个网站，它需要明确描述的基础目标之一就是品牌识别（brand identity）。</p>
<p>理解你的目标，有一个重要的部分，就是理解你要怎样才能知道“什么时候到达了终点”，一些可追踪的指标，在产品上线以后用来显示它是否满足了我们自己的目标和用户的需求，这就是成功标准（success metrics）。</p>
<p>对驱动用户体验决策而言有意义的成功标准，一定是可以明确地与用户行为绑定的标准，而这些用户行为也一定是可以通过设计来影响的行为。</p>
<p>理想化用户就是“某些与我们完全一样的人”。</p>
<p>要对用户需求寻根究底，必须要定义谁是我们的用户。可以通过用户细分（user segmentation）把大量的用户需求划分成几个可管理的部分。</p>
<p>可根据人口统计学（demographic）、消费心态档案（psychographic profile）、对技术和网页本身的想法、对网站相关内容的知识多少等标准来划分用户。</p>
<p>创建细分用户群只是一种用于“揭示用户最终需求的手段”，你真正只需要得到的是和你发现的“用户需求数目”一样多的细分用户群。</p>
<p>创建细分用户群还有其他重要的原因，不仅仅是因为不同的用户群有不同的需求，还因为有时候这些需求是彼此矛盾的。我们无法提供一种方案可以同时满足这两种用户的需求，要么选择针对单一用户群设计而排除其他用户群，要么为执行相同任务的不同用户群提供不同的方式。</p>
<p>用户研究（User Research）的领域致力于收集必要的信息来达成共识，问卷调查、用户访谈、焦点小组最适合用于收集用户的普遍观点与感知，用户测试、现场调查则更适用于理解具体的用户行为以及用户在和产品交互时的表现。</p>
<h2 id="范围层"><a href="#范围层" class="headerlink" title="范围层"></a>范围层</h2><p>定义项目范围则同时在做两件事：这是一个有价值的过程，同时能产生有价值的产品。过程（process）的价值在于，当整个事情还处在假设阶段的时候，它能迫使你去考虑潜在的冲突和产品中一些粗糙的点。我们能确定现在能解决哪些事情，而哪些必须要再迟一点才能解决。产品（product）的价值在于，被定义的这个产品给了整个团队一个参考点，明确了这个项目中要完成的全部工作，它也提供了一门用于讨论这件事情的共同的语言。</p>
<p>用文档定义产品需求，很麻烦但必须要做。原因是：这样你才知道你正在建设什么，这样你才知道你不需要建什么。</p>
<p>功能型产品考虑的是功能规格，哪些方面应该被当成软件产品的功能以及相应的组合。在信息型产品方面，考虑的是内容，这属于编辑和营销推广的传统领域。我使用一个词“特性（feature）”来同时表示软件的功能和所提供的内容。真正的内容常常是通过一个内容管理系统（Content Management System,CMS）来进行管理。</p>
<p>撰写功能规格说明的几条原则：乐观、具体、避免主观语气，功能规格必须可验证。</p>
<h2 id="结构层"><a href="#结构层" class="headerlink" title="结构层"></a>结构层</h2><p>确定网站各种特性和功能最合适的组合方式。用来设计用户如何到达某个页面，并且在他们做完事情之后能去什么地方。</p>
<p>在传统的软件开发行业，涉及“为用户涉及结构化体验”的方法被称为交互设计（interaction design）。在内容建设方面，主要是通过信息架构（information architecture）来构建用户体验。交互设计和信息架构都强调一个重点：确定各个将要呈献给用户的元素的“模式”和“顺序”。交互设计关注于将影响用户执行和完成任务的元素。信息架构则关注如何将信息表达给用户的元素。</p>
<p>交互设计关注于描述“可能的用户行为”，同时定义“系统如何配合与相应”这些用户行为。</p>
<p>用户对于“交互组件将怎样工作”的观点称为概念模型（conceptual model）。规划好概念模型能帮助你做出一致的设计决定。</p>
<p>第一个同时也是最好的防止错误的方法，是将系统设计成不可能犯错的那种。第二个避免错误的方法就是使错误难以发生。一些最令人反感的行为，往往出现在软件试图善意地修正用户错误的时候。系统应该为用户提供从错误中恢复的方式。</p>
<p>信息架构研究的是人们如何认知信息的过程，对于产品而言，信息架构关注的就是呈现给用户的信息是否合理并具有意义。在以内容为主的网站上，信息架构主要的工作是设计组织分类和导航的结构，让用户可以高效率、有效地浏览网站的内容。</p>
<p>从上到下的信息架构方法将从战略层所考虑的内容，即根据产品目标与用户需求直接进行结构设计。从下到上的信息架构方法也包括了主要分类与次级分类，但它是根据对“内容和功能需求的分析”而来的。</p>
<p>架构图最重要的是记录概念关系：哪些类别需要放在一起，而哪些需要保持独立？在交互过程中那些步骤要怎样相互配合？</p>
<h2 id="框架层"><a href="#框架层" class="headerlink" title="框架层"></a>框架层</h2><p>框架是结构的具体表现方式，用于确定用什么样的功能和形式来实现，关注点几乎全部在独立的组件以及它们之间的相互关系上。通过界面设计来确定框架，通过导航设计呈现信息的一种界面形式，信息设计呈现有效的信息沟通。如果涉及提供给用户做某些事的能力，则属于界面设计；如果提供给用户去某个地方的能力，则属于导航设计；如果是传达想法给用户，则是信息设计。</p>
<p>界面设计要做的全部事情就是选择正确的界面元素，还要通过适当的方式让它们容易被理解和使用。成功的界面设计是那些能让用户一眼就看到“最重要的东西”的界面设计。</p>
<p>任何一个网站的导航设计都必须同时完成三个目标：必须提供给用户一种在网站间跳转的方法，必须传达出这些元素和它们所包含内容之间的关系，必须传达出它的内容和用户当前浏览页面之间的关系。</p>
<p>信息设计常常充当一种把各种设计元素聚合到一起的粘合剂的角色，最后，信息设计变成决定如何呈现这些信息，使人们能很容易使用或理解它们。</p>
<h2 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h2><p>解决并弥补“产品框架层的逻辑排布”的感知呈现问题。如果你对设计是成功的，用户眼睛的移动轨迹的模式应该遵循的是一条流畅的路径，在不需要用户太多细节来吓倒用户的前提下，它为用户提供有效选择的、某种可能的“引导”。</p>
<p>在视觉设计中，我们用于吸引用户注意的一个主要工具就是对比。一致性能使你的设计有效地传达信息，而不会导致用户迷惑或焦略。</p>
<p>内部一致性的问题，是说在产品的两个不同的地方反应了不同的设计方法。解决内部一致性问题比较好的方法，是在进行设计之前，从这些不同的环境中反复出现的设计元素独立出来，然后将这个设计方案应用到整个产品中去，在需要的时候进行调整。</p>
<p>色彩可能是向外界传递品牌识别的一个最有效的方法。</p>
]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Next.js 学习]]></title>
      <url>https://zhulichao.github.io/2018/06/24/next-js-learn/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://nextjs.org/" target="_blank" rel="external">Next.js</a> 是一个轻量级的 React 服务端渲染应用框架，是 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="external">Create-React-App</a> 的升级版。当使用 React 开发时，常常需要配置很多繁琐的参数，如 Webpack 配置、Router 配置和服务器配置等。如果需要做 SEO，要考虑的事情就更多了，怎么让服务端渲染和客户端渲染保持一致是一件很麻烦的事情，需要引入很多第三方库。针对这些问题，Next.js 提供了一个很好的解决方案，使开发人员可以将精力放在业务上，从繁琐的配置中解放出来。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><strong>服务端渲染（SSR）</strong></li>
<li>基于文件系统的页面路由</li>
<li>自动按页面拆分代码</li>
<li>静态页面导出</li>
<li>使用 styled-jsx</li>
<li>零配置，基于 Webpack 的开发环境，支持热模块替换</li>
<li>支持 Babel 和 Webpack 的配置项定制，可定制服务端、路由 和 next 插件</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>注意 window、document 等只能在浏览器端使用的变量</li>
<li>区分服务端还是客户端</li>
<li>图片等静态文件只能放在 static 目录下，不能通过 require 来引入，也就是没办法通过 webpack 来进行模块化管理，如果各个组件有自身依赖的图片，也只能一股脑放 static 里，也很难实现版本管理控制浏览器缓存</li>
</ul>
<p>简单地说，很适合快速搭建简单站点，但自由度不高，且带样式或图片的 React 组件无法直接使用，个人看法是一个用自由度和通用性来换取易用性的框架</p>
<h2 id="Next-js-vs-create-react-app"><a href="#Next-js-vs-create-react-app" class="headerlink" title="Next.js vs create-react-app"></a>Next.js vs create-react-app</h2><p>Next.js：优化首屏加载速度，有SEO，如着陆页项目<br>create-react-app：适用于 SPA，不需SEO、SSR的项目，如后台项目</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>next dev  开发模式，编译完后只是搭建基础模块，访问到哪些页面再进行编译，提升开发效率<br>next build 构建打包生产环境代码<br>next start 发布模式编译后本地运行 server<br>next export 导出静态页面，使用 next.config.js</p>
<h3 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h3><p>Next.js 项目有两个特殊目录，pages 和 public。public 目录存放静态文件和 robots.txt 文件。pages 目录下的文件可以是页面路由或 api 路由，可通过文件名直接访问，pages/api 目录下的文件都是 api 路由，可通过 /api/* 访问，其它为页面路由。pages 目录下文件名由 [] 包裹的会产生动态路由，文件的名称会作为query参数传入页面，Link 中需要使用 as 属性。</p>
<h3 id="Router-and-Link"><a href="#Router-and-Link" class="headerlink" title="Router and Link"></a>Router and Link</h3><p>useRouter() 可以获取 router 对象，withRouter() 可以将 router 对象传入组件。页面跳转不要使用 <code>&lt;a&gt;</code>，它不会执行客户端导航，而是浏览器发起请求到服务器页面，会刷新整个页面，使用 <code>&lt;Link&gt;</code> 是客户端导航，并且使用了 <code>location.history</code>。<code>Link</code> 只是一个接受 href 和类似属性的包装组件，如果想给链接标签添加属性，需要添加到它的子组件上，href 属性是到 pages 下的路径，as 属性是浏览器地址栏显示的地址。</p>
<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><p>使用 <code>&lt;style jsx&gt;</code> 内联样式，只作用在本组件内，可以通过 global 属性定义全局样式，也可以使用引用 css 文件的方式。可以通过 <code>[name].module.css</code> 命名方式使用 css module。可以继承 styled-components 来支持服务端渲染。</p>
<h3 id="Data-Fetching"><a href="#Data-Fetching" class="headerlink" title="Data Fetching"></a>Data Fetching</h3><p>Next.js 有两种预渲染方式，Static Generation 和 Server-side Rendering。有3个方法可以用于预渲染获取数据：</p>
<ul>
<li>getStaticProps (Static Generation): 在打包构建生产环境时获取数据，因此无法获取 query 参数或 headers 等再请求发生时才有的信息，只在服务端执行，然后把获取到的数据用 props 传入页面</li>
<li>getStaticPaths (Static Generation): 根据数据指定动态路由进行预渲染，如果一个动态路由页面使用了 getStaticProps 方法，那它也必须使用 getStaticPaths 方法</li>
<li>getServerSideProps (Server-side Rendering): 每次请求时获取数据，只在服务端执行，</li>
</ul>
<p>除此之外，还可使用 getInitialProps API 获取数据，getInitialProps 适合通用数据抓取和服务器端渲染，有利于 SEO。这些方法只能在 page 页面导出。</p>
<h3 id="有用的包"><a href="#有用的包" class="headerlink" title="有用的包"></a>有用的包</h3><ul>
<li>使用 next-optimized-images 引入图片文件，并在部署时自动优化图片</li>
<li>使用 next-css 加载 css 文件</li>
<li>使用 next-compose-plugin 维护 next.config.js 文件整洁性</li>
<li>使用 @next/bundle-analyzer 分析打包效果</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[create-react-app 学习]]></title>
      <url>https://zhulichao.github.io/2018/05/26/create-react-app-learn/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Monorepo"><a href="#Monorepo" class="headerlink" title="Monorepo"></a>Monorepo</h2><p>先说一下 Multirepos 的管理方式，一个项目会有一个 repo 或者说一个 module 一个 repo，缺点：</p>
<ul>
<li>项目或者 module 因为功能或者属性或者历史的原因不得不拆分到不同的 organization 中，这会导致后期人员交接或者自己项目管理时不知道哪里去找 repo 的境地</li>
<li>issue 不知道往哪里提，导致项目管理混乱</li>
<li>版本管理带来的日常开销，如 webpack 需要变更时，需要人工同步所有的项目</li>
<li>changelog 梳理又是一场灾难，需要人工同步所有变动的仓库最终列出一个 changelog</li>
</ul>
<p>Monorepo 是一种相反的思路，可以将以上问题都解决。 Monorepo 是一种管理代码的方式，在这种方式下会摒弃原先一个 module 一个 repo 的方式，取而代之的是把所有的 modules 都放在一个 repo 内来管理，用一个项目维护所有的代码，每个子项目单独管理发布和运行，内部互相引用，但 Monorepo 也有缺陷，就是单个 repo 体积较大、如何进行权限管理。从代码结构看，一般使用 Monorepo 管理方式的项目，都会有一个 packages 目录，里面是一个个独立管理和发布的子项目。</p>
<p>目前诸如 Babel、React、Angular、Ember、Jest、Create-React-App 等等都采用了 Monorepo 这种方式来进行源码管理。</p>
<p>个人思考：<br>1、如果由一个 repo 管理所有项目，这个 repo 体积会越来越大，这会需要强大的构建工具，版本控制、权限管理也会变难。Monorepo 适用于什么场景呢？是否是由多个子项目共同完成一件事或者跟一件事相关，而且至少存在内部互相引用的情况，适用的边界在哪里？<br>2、我们的3个前端项目适用 monorepo 的管理方式吗？</p>
<h2 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h2><p><a href="https://lernajs.io/" target="_blank" rel="external">Lerna</a> 是基于 Monorepo 理念在工具端的实现，优化使用 git 和 npm 管理多包代码库的工作流程，可以在主项目下管理多个子项目，从而解决多个包互相依赖，且发布时需要手动维护多个包的问题，根据 git 提交记录自动生成 CHANGELOG。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yarn global add lerna</div><div class="line">git init monorepo-example</div><div class="line">cd monorepo-example</div><div class="line">lerna init</div></pre></td></tr></table></figure>
<p>此时目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- packages/     存放之后所有的官方维护的 module</div><div class="line">|-- lerna.json</div><div class="line">|-- package.json</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd packages</div><div class="line">mkdir module-a &amp;&amp; cd module-a &amp;&amp; yarn init</div><div class="line">mkdir module-b &amp;&amp; cd module-b &amp;&amp; yarn init</div></pre></td></tr></table></figure>
<p>此时目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- packages</div><div class="line">|       |-- module-a</div><div class="line">|               |-- package.json</div><div class="line">|       |-- module-b</div><div class="line">|               |-- package.json</div><div class="line">|-- lerna.json</div><div class="line">|-- package.json</div></pre></td></tr></table></figure></p>
<p>在 module-a 的 package.json 的 dependencies 中添加 module-b，执行 lerna bootstrap，引导packages安装各自的依赖。如果想把 package 发布到 npm 上，可以执行 lerna publish 命令。</p>
<h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><p>CONTRIBUTION.md 看项目结构，怎么更改和维护。React-boilerplate 样板 ，最佳实践，弄成项目样板，在此基础上写业务代码。</p>
<ul>
<li>读代码</li>
<li>看 commit 记录</li>
</ul>
<h2 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h2><p>把配置和开发调试依赖的东西分成独立项目了，使用者只关注业务代码。</p>
<p>babel-preset-react-app：react-scripts 使用的 babel 预设，将 ES6 以上的语法转义。<br>eslint-config-react-app：eslint 语法检查配置。<br>react-dev-utils：开发调试模式用到的一些脚本和方法，如编译时的错误提示？<br>create-react-app：全局 CLI 命令行工具，不应该经常变换，需适配多版本的 node，委托所有的配置给了 react-scripts。<br>react-scripts：项目核心，项目基础配置，包括开发服务的脚本和设置，如 webpack、babel、eslint 配置，构建生产模式等。</p>
<h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h3><p>create-react-app 由于是全局安装的，不会经常升级，因此要保持简单，少变更。它只负责做好一件事，初始化仓库，把其他版本的包下载到本地配置好，应适配多版本的 node。</p>
<p>create-react-app 好的思路：</p>
<ul>
<li>index.js 中 ： 生成一个新项目到本地，加载依赖项。检查 node 版本，过低给出警告。这样很安全。</li>
<li>使用 commander 项目，解决控制台如何使用指令。</li>
<li>react-script 中执行 init，把 package.json 填充好，把 template 目录中的模板文件拷贝到项目中。</li>
<li>配置相关的安装包都以特定的方式预配置到项目中，如果需要更高程度的自定义，使用 eject 命令。</li>
</ul>
<p><code>npx</code> 需要全局安装的包，用了一次或两次就不用了。全局安装包 + 执行命令 + 删除全局包。<br><code>npx create-react-app my-app</code> ===<br><code>npm install -g create-react-app &amp;&amp; create-react-app my-app &amp;&amp; npm uninstall -g create-react-app</code></p>
<p>通过 create-react-app + 自定义 react-scripts 的方式，fork create-react-app 项目，做了：</p>
<ul>
<li>将使用 js 改为 ts</li>
<li>添加了 fork-ts-checker-webpack-plugin 负责语法检查，添加了使用 ts-lint 的配置</li>
<li>添加了 cache</li>
<li>增加了 ts-jest 的配置</li>
<li>修改了 template 下的模板文件</li>
<li>增加了对 graphql 文件类型的处理 graphql-tag/loader</li>
<li>加载文件预处理的耗时多的操作，都用了 thread-loader</li>
<li>原来使用 webpack 的 uglyjs 的 plugin ，但是效率低，改为使用社区开源的 uglyjsplugin</li>
<li>使用 module.css 思路，以 .module.css 使用 css module 的处理，增加了对 scss sass 的处理</li>
<li>webpack 由3升级到4</li>
</ul>
<p>使用我们自定义的安装包<br><code>npx create-react-app@next --scripts-version=@canway/react-scripts my-app</code></p>
<p>性能优化：Typescript，会运行 tsc，src/complier/tsc.ts，使用 server-client 的设计思路模式。对于 typescript 其实是一个编译器，把 ts 文件转成 js 文件，把一个文件怎么编译和转换当做一个基础的服务放到 server，client 在个个地方怎么调用这些服务，tsc 是去调用提供的服务，所以 tsc 不在 server 下。ts 的服务一共两大部分：语法检查和转义。好处是，vscode 等 ide 中只要语法检查部分。直接使用 tsc 进行语法检查和转义，效率低，webpack 打包的时候只进行转义，独立的使用 fork-ts-checker-webpack-plugin 做语法检查，ts-loader 添加选项 happyPackMode: true 只进行转义，配合了 thread-loader 利用电脑多核使用多线程，使用 cache-loader 缓存转义（babel-loader本身是有缓存机制的，ts-loader 没有）。用独立的线程进行语法检查 fork-ts-checker-webpack-plugin。</p>
<hr>
<p>我的问题：</p>
<ul>
<li>node_modules 没有包括所有 package.json 中的 dependencies 下的包</li>
<li>执行 yarn install 后没有 yarn.lock 文件</li>
<li>createReactApp.js 中执行过安装 react、react-dom了，在 react-scripts/init.js 中再次执行</li>
<li>tasks 目录</li>
<li>yarn e2e:docker</li>
</ul>
<h2 id="项目中如何修改"><a href="#项目中如何修改" class="headerlink" title="项目中如何修改"></a>项目中如何修改</h2><ul>
<li>yarn add @private/react-scripts –exact</li>
<li><p>删除编译相关的包、scripts</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">graphql-tag</div><div class="line">isomorphic-loader</div><div class="line">serialize-javascript</div><div class="line">whatwg-fetch</div><div class="line">@babel/*</div><div class="line">jest 相关</div><div class="line">webpack 相关</div><div class="line">postcss 相关</div><div class="line">ts 相关</div><div class="line">ali-oss</div><div class="line">async-retry</div><div class="line">autoprefixer</div><div class="line">chalk</div><div class="line">chokidar</div><div class="line">front-matter</div><div class="line">fs-extra</div><div class="line">glob</div><div class="line">identify-obj-proxy</div><div class="line">markdown-it</div><div class="line">mkdirp</div><div class="line">object-assign</div><div class="line">prettier-error</div><div class="line">promise</div><div class="line">react-deep-force-update</div><div class="line">react-dev-utils</div><div class="line">react-error-overlay</div><div class="line">rimraf</div><div class="line">source-map-support</div></pre></td></tr></table></figure>
<p>  更新 scripts 只留 precommit、start、build、test、eject<br>  更新 browerslist</p>
</li>
<li>删除 config 、scripts、test 目录，babel、docker、jest、nginx 配置文件</li>
<li>拷贝 tsconfig、tslint</li>
<li>修改入口文件为 src/index.tsx</li>
<li>添加 serviceWorker.ts 文件</li>
<li>添加 node-sass 安装包</li>
<li>可能存在 react、react-dom 类型文件版本冲突，redux、apollo 也可能有问题，可能需要手动修改 yarn.lock 文件</li>
<li>webpack 4 “export does not found” 问题，修改 webpack 配置中 <code>strictExportPresence: false</code></li>
<li>更新环境变量为 REACT<em>APP</em> 开头</li>
</ul>
<h2 id="PostCss-改为-SCSS"><a href="#PostCss-改为-SCSS" class="headerlink" title="PostCss 改为 SCSS"></a>PostCss 改为 SCSS</h2><ul>
<li>删除 css.d.ts 声明文件</li>
<li>css 文件改为 module.scss，修改文件引入</li>
<li>变量的定义及使用、多媒体查询、@next 替换为 @at-root</li>
<li>图标样式文件 Icon.module.scss 中变量需定义为字符串</li>
<li>antd 样式没有生效，原因是 webpack 配置中使用了 thread-loader</li>
<li>修正 stylelint 配置文件，支持 scss 中的 @include 等使用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">   plugins: [</div><div class="line">     ...</div><div class="line">     &apos;stylelint-scss&apos;, // 需安装</div><div class="line">   ],</div><div class="line">   ...</div><div class="line">   rules: &#123;</div><div class="line">     ...</div><div class="line">     &apos;at-rule-no-unknow&apos;: null,</div><div class="line">     &apos;scss/at-rule-no-unknow&apos;: true,</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac-使用]]></title>
      <url>https://zhulichao.github.io/2018/05/13/mac-use/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>新建：command + n</li>
<li>返回行首/尾：command + 左箭头 / 右箭头</li>
<li>返回页顶/底：command + 上箭头 / 下箭头</li>
<li>重命名文件夹：点击文件夹回车</li>
<li>显示桌面：command + f3 / fn + f11</li>
<li>打开Finder：option + command + 空格</li>
<li>最小化当前窗口：command + m</li>
<li>最小化当前应用程序所有窗口：command + option + m</li>
<li>隐藏当前应用程序：command + h </li>
<li>关闭当前应用程序：command + q </li>
<li>将模拟器屏幕截图保存到桌面：command + s </li>
<li>command + tab 选中程序，松开Tab，按住Command不放的同时按住Opt，松开Command 将最小化的窗口恢复回来</li>
<li>Xcode中clean项目：command + shift + k  </li>
<li>调整模拟器窗口大小：Simulator -&gt; window -&gt; Scale</li>
<li>模拟器返回主界面：shift + command + h  </li>
<li>全屏：ctrl + command + f</li>
<li>显示隐藏文件夹  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true;</div><div class="line">KillAll Finder</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h2><ul>
<li>新建文件夹：mkdir</li>
<li>文件重命名：mv old.ar new.ar</li>
<li>列出当前目录所有文件：ls</li>
<li>列出当前目录某格式文件：ls *.ar</li>
<li>删除文件：rm 只能删除文件或者空的文件夹<ul>
<li>-r  删除文件夹内的子文件夹及内容</li>
<li>-f 强制删除参数</li>
</ul>
</li>
<li>查看文件内容：vi aa.txt，i 进行编辑，shift + : + w + q 保存</li>
<li>进入目录：cd</li>
<li>回到根目录：cd ~</li>
<li>输入补全：tab键</li>
<li>终端新建文件：touch .gitignore</li>
<li>查看ip：ifconfig</li>
<li>删除整行命令：ctrl + u</li>
<li>清除屏幕并将当前行移到页面顶部：Ctrl + L</li>
<li>删除一个单词：alt + delete</li>
<li>列出文件和目录的详细信息：ls -l</li>
<li>sudo chmod +x xx.sh</li>
<li>查找命令执行文件的路径：where node</li>
<li>输出：echo $PATH</li>
<li>打印系统环境变量：printenv</li>
<li>显示当前的目录路径：pwd</li>
<li>显示或连接文件内容：cat /etc/profile</li>
<li>通过简单正则表达式搜索文件：grep</li>
<li>处理文本文件的程序：awk </li>
<li>追加式写入：ifconfig &gt;&gt; .log</li>
<li>覆盖式写入：ifconfig &gt; .log 覆盖</li>
<li>查看当前运行的 Shell：echo $SHELL</li>
<li>判断命令的来源：type echo</li>
</ul>
<p><a href="https://www.jianshu.com/p/11584cbfb4a5" target="_blank" rel="external">Mac：终端常用命令 - 简书</a></p>
<h2 id="好用工具"><a href="#好用工具" class="headerlink" title="好用工具"></a>好用工具</h2><ul>
<li>Magnet 分屏工具</li>
<li>Xnip 截图工具</li>
<li>Bear Markdown 笔记</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目基础配置]]></title>
      <url>https://zhulichao.github.io/2018/05/06/project-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>在 github 中配置</p>
<ul>
<li>默认分支</li>
<li>保护分支，注意里面的配置项</li>
</ul>
</li>
<li><p>VSCode 中添加 Code Spell Checker 进行拼写检查</p>
</li>
<li><p>VSCode 中添加 EditorConfig for VS Code 进行风格统一</p>
<ul>
<li>参考 <a href="http://editorconfig.org" target="_blank" rel="external">EditorConfig 官网</a></li>
<li>项目根目录添加 .editorconfig 文件</li>
<li>editorConfig 不是什么软件，而是一个名称为 .editorconfig 的自定义文件，该文件用来定义项目的编码规范，编辑器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编辑器自身的设置要高</li>
</ul>
</li>
<li><p>格式检查</p>
<ul>
<li>参考 <a href="https://prettier.io" target="_blank" rel="external">prettier 官网</a> 进行配置，它可以很好的集成的到项目中，利用 git 的 hooks 的机制，在提交 commit 时自动调用 prettier，使用 husky 和 lint-staged 配合使用<ul>
<li>husky ：可以方便的通过 npm scripts 来调用各种 git hooks</li>
<li>lint-staged ：利用 git 的 staged 特性，可以提取出本次提交的变动文件，让 prettier 只处理这些文件</li>
</ul>
</li>
<li>husky 配合 lint-stage 的过程可以通过 pretty-quick 来取代，但如果项目中也使用了其它工具，比如ESLint，请使用lint-stage</li>
<li>VSCode 中添加 Prettier - Code formatter 插件</li>
<li>执行 <code>./node_modules/.bin/prettier --single-quote --write &quot;src/**/*.{js,jsx,json,css}&quot;</code> 来检查整个项目</li>
</ul>
</li>
<li><p>样式检查</p>
<ul>
<li>参考 <a href="https://stylelint.io/" target="_blank" rel="external">stylelint</a> 进行配置</li>
<li>安装 stylelint-config-standard、stylelint-order</li>
<li>VSCode 中添加 stylelint 插件</li>
</ul>
</li>
<li><p>语法检查</p>
<ul>
<li>参考 <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint 官网</a> <a href="https://github.com/palantir/tslint-react" target="_blank" rel="external">tslint-react</a> 进行配置</li>
<li><a href="https://github.com/alexjoverm/tslint-config-prettier" target="_blank" rel="external">tslint-config-prettier</a> 防止 tslint 和 prettier 发生冲突，prettier 负责格式，tslint 负责其它</li>
<li>VSCode 中添加 TSLint 插件</li>
</ul>
</li>
<li><p>自动化测试</p>
<ul>
<li>参考 <a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest</a>，需安装 @types/jest</li>
<li>参考 <a href="https://github.com/kulshekhar/ts-jest" target="_blank" rel="external">ts-jest</a>，作用是将 ts 写的测试文件转为 js 的，再对这些文件执行 jest</li>
<li><p>VSCode 中添加 jest 插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">import * as React from &apos;react&apos;;</div><div class="line">import * as renderer from &apos;react-test-renderer&apos;;</div><div class="line">import configureStore from &apos;redux-mock-store&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line"></div><div class="line">import App from &apos;../App&apos;;</div><div class="line">import Badge, &#123; BadgeVariant &#125; from &apos;./Badge&apos;;</div><div class="line"></div><div class="line">const middlewares = [thunk];</div><div class="line">const mockStore = configureStore(middlewares);</div><div class="line">const initialState = &#123;&#125;;</div><div class="line"></div><div class="line">test(&apos;正确渲染&apos;, () =&gt; &#123;</div><div class="line">const store = mockStore(initialState);</div><div class="line"></div><div class="line">let tree = renderer</div><div class="line">    .create(</div><div class="line">    &lt;App</div><div class="line">        context=&#123;&#123;</div><div class="line">        fetch: () =&gt; &#123;</div><div class="line">            return;</div><div class="line">        &#125;,</div><div class="line">        store,</div><div class="line">        client: &#123;&#125;,</div><div class="line">        &#125;&#125;</div><div class="line">    &gt;</div><div class="line">        &lt;Badge className=&quot;badge&quot;&gt;&#123;10&#125;&lt;/Badge&gt;</div><div class="line">    &lt;/App&gt;,</div><div class="line">    )</div><div class="line">    .toJSON();</div><div class="line">expect(tree).toMatchSnapshot();</div><div class="line"></div><div class="line">tree = renderer</div><div class="line">    .create(</div><div class="line">    &lt;App</div><div class="line">        context=&#123;&#123;</div><div class="line">        fetch: () =&gt; &#123;</div><div class="line">            return;</div><div class="line">        &#125;,</div><div class="line">        store,</div><div class="line">        client: &#123;&#125;,</div><div class="line">        &#125;&#125;</div><div class="line">    &gt;</div><div class="line">        &lt;Badge&gt;New&lt;/Badge&gt;</div><div class="line">    &lt;/App&gt;,</div><div class="line">    )</div><div class="line">    .toJSON();</div><div class="line">expect(tree).toMatchSnapshot();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">test(&apos;variant属性值应为 primary, info, success, warning, error 中的一个&apos;, () =&gt; &#123;</div><div class="line">const store = mockStore(initialState);</div><div class="line">for (const variant in BadgeVariant) &#123;</div><div class="line">    if (BadgeVariant[variant]) &#123;</div><div class="line">    const tree = renderer</div><div class="line">    .create(</div><div class="line">        &lt;App</div><div class="line">        context=&#123;&#123;</div><div class="line">            fetch: () =&gt; &#123;</div><div class="line">            return;</div><div class="line">            &#125;,</div><div class="line">            store,</div><div class="line">            client: &#123;&#125;,</div><div class="line">        &#125;&#125;</div><div class="line">        &gt;</div><div class="line">        &lt;Badge variant=&#123;BadgeVariant[variant]&#125;&gt;职问&lt;/Badge&gt;</div><div class="line">        &lt;/App&gt;,</div><div class="line">    )</div><div class="line">    .toJSON();</div><div class="line"></div><div class="line">    expect(tree).toMatchSnapshot();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>.editorconfig 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root = true</div><div class="line"></div><div class="line">[*]</div><div class="line">indent_style = space</div><div class="line">indent_size = 2</div><div class="line">end_of_line = lf</div><div class="line">charset = utf-8</div><div class="line">trim_trailing_whitespace = true</div><div class="line">insert_final_newline = true</div><div class="line"></div><div class="line"># editorconfig-tools is unable to ignore long strings or urls</div><div class="line">max_line_length = null</div></pre></td></tr></table></figure>
</li>
<li><p>.prettierrc 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;singleQuote&quot;: true,</div><div class="line">    &quot;trailingComma&quot;: &quot;all&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>.stylelintrc 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    extends: &apos;stylelint-config-standard&apos;,</div><div class="line">    plugins: [</div><div class="line">        &apos;stylelint-order&apos;,</div><div class="line">    ],</div><div class="line">    rules: &#123;</div><div class="line">        &apos;property-no-unknown&apos;: [</div><div class="line">            true,</div><div class="line">            &#123;</div><div class="line">                ignoreProperties: [</div><div class="line">                &apos;composes&apos;,</div><div class="line">            ],</div><div class="line">            &#125;,</div><div class="line">        ],</div><div class="line">        &apos;selector-pseudo-class-no-unknown&apos;: [</div><div class="line">            true,</div><div class="line">            &#123;</div><div class="line">                ignorePseudoClasses: [</div><div class="line">                    &apos;global&apos;,</div><div class="line">                ],</div><div class="line">            &#125;,</div><div class="line">        ],</div><div class="line">        &apos;string-quotes&apos;: &apos;single&apos;,</div><div class="line">        &apos;order/order&apos;: [</div><div class="line">            &apos;custom-properties&apos;,</div><div class="line">            &apos;dollar-variables&apos;,</div><div class="line">            &apos;declarations&apos;,</div><div class="line">            &apos;at-rules&apos;,</div><div class="line">            &apos;rules&apos;,</div><div class="line">        ],</div><div class="line">        &apos;order/properties-order&apos;: [</div><div class="line">            &apos;composes&apos;,</div><div class="line">            &apos;position&apos;,</div><div class="line">            &apos;top&apos;,</div><div class="line">            &apos;right&apos;,</div><div class="line">            &apos;bottom&apos;,</div><div class="line">            &apos;left&apos;,</div><div class="line">            &apos;z-index&apos;,</div><div class="line">            &apos;display&apos;,</div><div class="line">            &apos;align-content&apos;,</div><div class="line">            &apos;align-items&apos;,</div><div class="line">            &apos;align-self&apos;,</div><div class="line">            &apos;flex&apos;,</div><div class="line">            &apos;flex-basis&apos;,</div><div class="line">            &apos;flex-direction&apos;,</div><div class="line">            &apos;flex-flow&apos;,</div><div class="line">            &apos;flex-grow&apos;,</div><div class="line">            &apos;flex-shrink&apos;,</div><div class="line">            &apos;flex-wrap&apos;,</div><div class="line">            &apos;justify-content&apos;,</div><div class="line">            &apos;order&apos;,</div><div class="line">            &apos;float&apos;,</div><div class="line">            &apos;width&apos;,</div><div class="line">            &apos;height&apos;,</div><div class="line">            &apos;max-width&apos;,</div><div class="line">            &apos;max-height&apos;,</div><div class="line">            &apos;min-width&apos;,</div><div class="line">            &apos;min-height&apos;,</div><div class="line">            &apos;padding&apos;,</div><div class="line">            &apos;padding-top&apos;,</div><div class="line">            &apos;padding-right&apos;,</div><div class="line">            &apos;padding-bottom&apos;,</div><div class="line">            &apos;padding-left&apos;,</div><div class="line">            &apos;margin&apos;,</div><div class="line">            &apos;margin-top&apos;,</div><div class="line">            &apos;margin-right&apos;,</div><div class="line">            &apos;margin-bottom&apos;,</div><div class="line">            &apos;margin-left&apos;,</div><div class="line">            &apos;margin-collapse&apos;,</div><div class="line">            &apos;margin-top-collapse&apos;,</div><div class="line">            &apos;margin-right-collapse&apos;,</div><div class="line">            &apos;margin-bottom-collapse&apos;,</div><div class="line">            &apos;margin-left-collapse&apos;,</div><div class="line">            &apos;overflow&apos;,</div><div class="line">            &apos;overflow-x&apos;,</div><div class="line">            &apos;overflow-y&apos;,</div><div class="line">            &apos;clip&apos;,</div><div class="line">            &apos;clear&apos;,</div><div class="line">            &apos;font&apos;,</div><div class="line">            &apos;font-family&apos;,</div><div class="line">            &apos;font-size&apos;,</div><div class="line">            &apos;font-smoothing&apos;,</div><div class="line">            &apos;osx-font-smoothing&apos;,</div><div class="line">            &apos;font-style&apos;,</div><div class="line">            &apos;font-weight&apos;,</div><div class="line">            &apos;hyphens&apos;,</div><div class="line">            &apos;src&apos;,</div><div class="line">            &apos;line-height&apos;,</div><div class="line">            &apos;letter-spacing&apos;,</div><div class="line">            &apos;word-spacing&apos;,</div><div class="line">            &apos;color&apos;,</div><div class="line">            &apos;text-align&apos;,</div><div class="line">            &apos;text-decoration&apos;,</div><div class="line">            &apos;text-indent&apos;,</div><div class="line">            &apos;text-overflow&apos;,</div><div class="line">            &apos;text-rendering&apos;,</div><div class="line">            &apos;text-size-adjust&apos;,</div><div class="line">            &apos;text-shadow&apos;,</div><div class="line">            &apos;text-transform&apos;,</div><div class="line">            &apos;word-break&apos;,</div><div class="line">            &apos;word-wrap&apos;,</div><div class="line">            &apos;white-space&apos;,</div><div class="line">            &apos;vertical-align&apos;,</div><div class="line">            &apos;list-style&apos;,</div><div class="line">            &apos;list-style-type&apos;,</div><div class="line">            &apos;list-style-position&apos;,</div><div class="line">            &apos;list-style-image&apos;,</div><div class="line">            &apos;pointer-events&apos;,</div><div class="line">            &apos;cursor&apos;,</div><div class="line">            &apos;background&apos;,</div><div class="line">            &apos;background-attachment&apos;,</div><div class="line">            &apos;background-color&apos;,</div><div class="line">            &apos;background-image&apos;,</div><div class="line">            &apos;background-position&apos;,</div><div class="line">            &apos;background-repeat&apos;,</div><div class="line">            &apos;background-size&apos;,</div><div class="line">            &apos;border&apos;,</div><div class="line">            &apos;border-collapse&apos;,</div><div class="line">            &apos;border-top&apos;,</div><div class="line">            &apos;border-right&apos;,</div><div class="line">            &apos;border-bottom&apos;,</div><div class="line">            &apos;border-left&apos;,</div><div class="line">            &apos;border-color&apos;,</div><div class="line">            &apos;border-image&apos;,</div><div class="line">            &apos;border-top-color&apos;,</div><div class="line">            &apos;border-right-color&apos;,</div><div class="line">            &apos;border-bottom-color&apos;,</div><div class="line">            &apos;border-left-color&apos;,</div><div class="line">            &apos;border-spacing&apos;,</div><div class="line">            &apos;border-style&apos;,</div><div class="line">            &apos;border-top-style&apos;,</div><div class="line">            &apos;border-right-style&apos;,</div><div class="line">            &apos;border-bottom-style&apos;,</div><div class="line">            &apos;border-left-style&apos;,</div><div class="line">            &apos;border-width&apos;,</div><div class="line">            &apos;border-top-width&apos;,</div><div class="line">            &apos;border-right-width&apos;,</div><div class="line">            &apos;border-bottom-width&apos;,</div><div class="line">            &apos;border-left-width&apos;,</div><div class="line">            &apos;border-radius&apos;,</div><div class="line">            &apos;border-top-right-radius&apos;,</div><div class="line">            &apos;border-bottom-right-radius&apos;,</div><div class="line">            &apos;border-bottom-left-radius&apos;,</div><div class="line">            &apos;border-top-left-radius&apos;,</div><div class="line">            &apos;border-radius-topright&apos;,</div><div class="line">            &apos;border-radius-bottomright&apos;,</div><div class="line">            &apos;border-radius-bottomleft&apos;,</div><div class="line">            &apos;border-radius-topleft&apos;,</div><div class="line">            &apos;content&apos;,</div><div class="line">            &apos;quotes&apos;,</div><div class="line">            &apos;outline&apos;,</div><div class="line">            &apos;outline-offset&apos;,</div><div class="line">            &apos;outline-width&apos;,</div><div class="line">            &apos;outline-style&apos;,</div><div class="line">            &apos;outline-color&apos;,</div><div class="line">            &apos;opacity&apos;,</div><div class="line">            &apos;filter&apos;,</div><div class="line">            &apos;visibility&apos;,</div><div class="line">            &apos;size&apos;,</div><div class="line">            &apos;zoom&apos;,</div><div class="line">            &apos;transform&apos;,</div><div class="line">            &apos;box-align&apos;,</div><div class="line">            &apos;box-flex&apos;,</div><div class="line">            &apos;box-orient&apos;,</div><div class="line">            &apos;box-pack&apos;,</div><div class="line">            &apos;box-shadow&apos;,</div><div class="line">            &apos;box-sizing&apos;,</div><div class="line">            &apos;table-layout&apos;,</div><div class="line">            &apos;animation&apos;,</div><div class="line">            &apos;animation-delay&apos;,</div><div class="line">            &apos;animation-duration&apos;,</div><div class="line">            &apos;animation-iteration-count&apos;,</div><div class="line">            &apos;animation-name&apos;,</div><div class="line">            &apos;animation-play-state&apos;,</div><div class="line">            &apos;animation-timing-function&apos;,</div><div class="line">            &apos;animation-fill-mode&apos;,</div><div class="line">            &apos;transition&apos;,</div><div class="line">            &apos;transition-delay&apos;,</div><div class="line">            &apos;transition-duration&apos;,</div><div class="line">            &apos;transition-property&apos;,</div><div class="line">            &apos;transition-timing-function&apos;,</div><div class="line">            &apos;background-clip&apos;,</div><div class="line">            &apos;backface-visibility&apos;,</div><div class="line">            &apos;resize&apos;,</div><div class="line">            &apos;appearance&apos;,</div><div class="line">            &apos;user-select&apos;,</div><div class="line">            &apos;interpolation-mode&apos;,</div><div class="line">            &apos;direction&apos;,</div><div class="line">            &apos;marks&apos;,</div><div class="line">            &apos;page&apos;,</div><div class="line">            &apos;set-link-source&apos;,</div><div class="line">            &apos;unicode-bidi&apos;,</div><div class="line">            &apos;speak&apos;,</div><div class="line">        ],</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>tslint.json 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &#123;</div><div class="line">        &quot;extends&quot;: [&quot;tslint:latest&quot;, &quot;tslint-config-prettier&quot;, &quot;tslint-react&quot;],</div><div class="line">        &quot;rules&quot;: &#123;</div><div class="line">            &quot;interface-name&quot;: [true, &quot;never-prefix&quot;],</div><div class="line">            &quot;no-submodule-imports&quot;: false,</div><div class="line">            &quot;jsx-boolean-value&quot;: false,</div><div class="line">            &quot;jsx-no-multiline-js&quot;: false,</div><div class="line">            &quot;jsx-wrap-multiline&quot;: false,</div><div class="line">            &quot;class-name&quot;: true,</div><div class="line">            &quot;comment-format&quot;: [true, &quot;check-space&quot;],</div><div class="line">            &quot;curly&quot;: true,</div><div class="line">            &quot;indent&quot;: [true, &quot;spaces&quot;],</div><div class="line">            &quot;one-line&quot;: [true, &quot;check-open-brace&quot;, &quot;check-whitespace&quot;],</div><div class="line">            &quot;no-var-keyword&quot;: true,</div><div class="line">            &quot;quotemark&quot;: [true, &quot;single&quot;, &quot;avoid-escape&quot;, &quot;jsx-double&quot;],</div><div class="line">            &quot;semicolon&quot;: [true, &quot;always&quot;, &quot;ignore-bound-class-methods&quot;],</div><div class="line">            &quot;whitespace&quot;: [</div><div class="line">                true,</div><div class="line">                &quot;check-branch&quot;,</div><div class="line">                &quot;check-decl&quot;,</div><div class="line">                &quot;check-operator&quot;,</div><div class="line">                &quot;check-module&quot;,</div><div class="line">                &quot;check-separator&quot;,</div><div class="line">                &quot;check-type&quot;</div><div class="line">            ],</div><div class="line">            &quot;typedef-whitespace&quot;: [</div><div class="line">            true,</div><div class="line">            &#123;</div><div class="line">                &quot;call-signature&quot;: &quot;nospace&quot;,</div><div class="line">                &quot;index-signature&quot;: &quot;nospace&quot;,</div><div class="line">                &quot;parameter&quot;: &quot;nospace&quot;,</div><div class="line">                &quot;property-declaration&quot;: &quot;nospace&quot;,</div><div class="line">                &quot;variable-declaration&quot;: &quot;nospace&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;call-signature&quot;: &quot;onespace&quot;,</div><div class="line">                &quot;index-signature&quot;: &quot;onespace&quot;,</div><div class="line">                &quot;parameter&quot;: &quot;onespace&quot;,</div><div class="line">                &quot;property-declaration&quot;: &quot;onespace&quot;,</div><div class="line">                &quot;variable-declaration&quot;: &quot;onespace&quot;</div><div class="line">            &#125;</div><div class="line">            ],</div><div class="line">            &quot;no-internal-module&quot;: true,</div><div class="line">            &quot;no-trailing-whitespace&quot;: true,</div><div class="line">            &quot;no-null-keyword&quot;: true,</div><div class="line">            &quot;prefer-const&quot;: true,</div><div class="line">            &quot;jsdoc-format&quot;: true,</div><div class="line">            &quot;object-literal-sort-keys&quot;: false</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>tsConfig.json 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;compilerOptions&quot;: &#123;</div><div class="line">        &quot;outDir&quot;: &quot;build/dist&quot;,</div><div class="line">        &quot;module&quot;: &quot;esnext&quot;,</div><div class="line">        &quot;target&quot;: &quot;es5&quot;,</div><div class="line">        &quot;lib&quot;: [&quot;es7&quot;, &quot;dom&quot;],</div><div class="line">        &quot;sourceMap&quot;: true,</div><div class="line">        &quot;allowJs&quot;: true,</div><div class="line">        &quot;jsx&quot;: &quot;react&quot;,</div><div class="line">        &quot;moduleResolution&quot;: &quot;node&quot;,</div><div class="line">        &quot;rootDirs&quot;: [&quot;src&quot;, &quot;config&quot;],</div><div class="line">        &quot;forceConsistentCasingInFileNames&quot;: true,</div><div class="line">        &quot;noImplicitReturns&quot;: true,</div><div class="line">        &quot;noImplicitThis&quot;: true,</div><div class="line">        &quot;noImplicitAny&quot;: true,</div><div class="line">        &quot;strictNullChecks&quot;: true,</div><div class="line">        &quot;suppressImplicitAnyIndexErrors&quot;: true,</div><div class="line">        &quot;noUnusedLocals&quot;: true</div><div class="line">    &#125;,</div><div class="line">    &quot;exclude&quot;: [</div><div class="line">        &quot;node_modules&quot;,</div><div class="line">        &quot;build&quot;,</div><div class="line">        &quot;scripts&quot;,</div><div class="line">        &quot;acceptance-tests&quot;,</div><div class="line">        &quot;webpack&quot;,</div><div class="line">        &quot;jest&quot;,</div><div class="line">        &quot;src/setupTests.ts&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>package.json 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    &quot;lint-staged&quot;: &#123;</div><div class="line">        &quot;*.&#123;json,md,graphql&#125;&quot;: [</div><div class="line">            &quot;prettier --write&quot;,</div><div class="line">            &quot;git add&quot;</div><div class="line">        ],</div><div class="line">        &quot;*.&#123;ts,tsx&#125;&quot;: [</div><div class="line">            &quot;prettier --write&quot;,</div><div class="line">            &quot;tslint --fix&quot;,</div><div class="line">            &quot;git add&quot;</div><div class="line">        ],</div><div class="line">        &quot;*.&#123;css,less,scss,sass,sss&#125;&quot;: [</div><div class="line">            &quot;prettier --write&quot;,</div><div class="line">            &quot;stylelint --fix&quot;,</div><div class="line">            &quot;git add&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;scripts&quot;: &#123;</div><div class="line">        &quot;precommit&quot;: &quot;lint-staged&quot;,</div><div class="line">        &quot;lint&quot;: &quot;yarn run lint-ts &amp;&amp; yarn run lint-css&quot;,</div><div class="line">        &quot;fix&quot;: &quot;yarn run fix-ts &amp;&amp; yarn run fix-css&quot;,</div><div class="line">        &quot;lint-ts&quot;: &quot;tslint &apos;src/**/*.&#123;ts,tsx&#125;&apos;&quot;,</div><div class="line">        &quot;fix-ts&quot;: &quot;tslint --fix &apos;src/**/*.&#123;ts,tsx&#125;&apos;&quot;,</div><div class="line">        &quot;lint-css&quot;: &quot;stylelint &apos;src/**/*.&#123;css,less,scss,sass,sss&#125;&apos;&quot;,</div><div class="line">        &quot;fix-css&quot;: &quot;stylelint --fix &apos;src/**/*.&#123;css,less,scss,sass,sss&#125;&apos;&quot;,</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jest.config.js 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    automock: false,</div><div class="line">    browser: false,</div><div class="line">    bail: false,</div><div class="line">    collectCoverageFrom: [</div><div class="line">        &apos;src/**/*.&#123;ts,tsx&#125;&apos;,</div><div class="line">        &apos;!**/node_modules/**&apos;,</div><div class="line">        &apos;!**/vendor/**&apos;,</div><div class="line">    ],</div><div class="line">    coverageDirectory: &apos;&lt;rootDir&gt;/coverage&apos;,</div><div class="line">    globals: &#123;</div><div class="line">        __DEV__: true,</div><div class="line">    &#125;,</div><div class="line">    moduleFileExtensions: [&apos;ts&apos;, &apos;tsx&apos;, &apos;js&apos;, &apos;jsx&apos;, &apos;json&apos;, &apos;node&apos;],</div><div class="line">    moduleNameMapper: &#123;</div><div class="line">        &apos;\\.(css|less|scss|sss)$&apos;: &apos;identity-obj-proxy&apos;,</div><div class="line">        &apos;\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$&apos;:</div><div class="line">        &apos;GlobalImageStub&apos;,</div><div class="line">    &#125;,</div><div class="line">    transform: &#123;</div><div class="line">        &apos;^.+\\.tsx?$&apos;: &apos;ts-jest&apos;,</div><div class="line">    &#125;,</div><div class="line">    testRegex: &apos;(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$&apos;,</div><div class="line">    verbose: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>持续集成 CI</p>
<ul>
<li>参考 <a href="https://circleci.com" target="_blank" rel="external">CircleCi</a></li>
<li>登录 CircleCi，进入 Projects，Add Project，找到项目，Follow Project，Builds 中运行</li>
<li>登录 GitHub，github setting branches，require status check，ci/circleci</li>
<li>项目中配置 .circleci/config.yml 文件如下</li>
<li><p>CI 中需配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">version: 2</div><div class="line">jobs:</div><div class="line">build:</div><div class="line">    working_directory: ~/repo</div><div class="line">    docker:</div><div class="line">    - image: circleci/node:latest</div><div class="line">    steps:</div><div class="line">    - checkout</div><div class="line">    - restore_cache:</div><div class="line">        keys:</div><div class="line">        - v1-dependencies-&#123;&#123; checksum &quot;package.json&quot; &#125;&#125;</div><div class="line">        - v1-dependencies-</div><div class="line">    - run: yarn install</div><div class="line">    - save_cache:</div><div class="line">        paths:</div><div class="line">            - node_modules</div><div class="line">        key: v1-dependencies-&#123;&#123; checksum &quot;package.json&quot; &#125;&#125;</div><div class="line">    - run: yarn run lint</div><div class="line">    - run: yarn run test</div><div class="line">    - run:</div><div class="line">        name: yarn build</div><div class="line">        command: |</div><div class="line">            if [ &quot;$CIRCLE_BRANCH&quot; != &quot;develop&quot; ] &amp;&amp; [ &quot;$CIRCLE_BRANCH&quot; != &quot;master&quot; ]; then</div><div class="line">            yarn build;</div><div class="line">            fi</div><div class="line">    - store_artifacts:</div><div class="line">        path: build</div><div class="line">        destination: build</div><div class="line">    - store_test_results:</div><div class="line">        path: coverage</div></pre></td></tr></table></figure>
<p>在运行测试时 <code>yarn test</code> 命令有时会带参数 <code>yarn test --maxWorkers 2</code>，<a href="https://facebook.github.io/jest/docs/zh-Hans/cli.html" target="_blank" rel="external">Jest 官方文档</a>描述如下：</p>
<blockquote>
<p>设定测试会使用的最大 worker 数目。 默认会使用你的计算机上可用的内核的数量。 在类似 CI 等有资源限制的环境下需要进行相关调整时很有用。但多数场景都应该使用默认值。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>注意：<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html" target="_blank" rel="external">TypeScript 2.7</a> 支持 <code>import React from &#39;react&#39;</code> 的方式，需要在 ts.config 中配置 <code>&quot;module&quot;: &quot;commonjs&quot;</code> <code>&quot;esModuleInterop&quot;: true</code>。</p>
]]></content>
      
        <categories>
            
            <category> Project Base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Project Base </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git-基础2]]></title>
      <url>https://zhulichao.github.io/2018/05/04/git-base2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>工作区：就是你在电脑里能看到的目录<br>暂存区：git add 是把文件到暂存区<br>本地仓库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库</p>
<p>git diff 进行对比时不会对比新创建的文件。</p>
<p><code>git diff branchName</code> 比较当前分支与 branchName 分支<br><code>git diff branchName1 branchName2</code> 比较 branchName1 分支与 branchName2 分支<br><code>git diff develop origin/develop</code>  比较本地 develop 分支和远程 develop 分支的差别<br><code>git diff --staged</code>  比较暂存区与 HEAD<br><code>git diff HEAD</code> 比较工作区与 HEAD<br><code>git diff</code> 比较工作区与暂存区</p>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><ul>
<li><p><code>git commit</code>  提交所有添加到索引库中、或从索引库删除的文件<br>输入 i 进入编辑状态，第一行添加的内容作为 summary 描述, 隔一个空行，再添加的内容作为 description 描述，按 esc 退出编辑状态，输入 shift + :，输入 wq，保存并提交。</p>
</li>
<li><p><code>git commit -m &quot;summary 描述&quot;</code>  提交所有添加到索引库中、或从索引库删除的文件<br>简化版提交命令，-m 添加 summary 描述，不能添加 description 描述。</p>
</li>
<li><p><code>git commit -a</code>  提交所有已在索引库中发生了修改的文件，新添加的文件不会被提交<br>输入 i 进入编辑状态，第一行添加的内容作为 summary 描述, 隔一个空行，再添加的内容作为 description 描述，按 esc 退出编辑状态，输入 shift + :，输入 wq，保存并提交。</p>
</li>
<li><p><code>git commit --amend</code>  产生一个新的提交用来替换掉当前指向的这个提交<br>输入 i 进入编辑状态，第一行添加的内容作为 summary 描述, 隔一个空行，再添加的内容作为 description 描述，按 esc 退出编辑状态，输入 shift + :，输入 wq，保存并提交。</p>
</li>
<li><p><code>git commit --fixup [commitId]</code>  提交所有添加到索引库中、或从索引库删除的文件<br>提交一个新的 commit，summary 为指定 commitId 的 summary 添加了 “fixup!” 前缀。在执行 <code>rebase --autosquash</code> 命令时针对该次 commit 的操作默认为 fixup，本次提交信息会被清除，不会进入编辑提交信息的状态。</p>
</li>
<li><p><code>git commit --squash [commitId]</code>  提交所有添加到索引库中、或从索引库删除的文件<br>提交一个新的 commit，summary 为指定 commitId 的 summary 添加了 squash!” 前缀。在执行 <code>rebase --autosquash</code> 命令时针对该次 commit 的操作默认为 squash，会进入编辑提交信息的状态。</p>
</li>
</ul>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>类似于 git merge，将指定分支合并到当前分支。区别是 git merge 会创建一次新的提交记录，git rebase 不会，它会把当前分支里的每个提交取消掉，并且把它们临时保存为补丁(这些补丁放到”.git/rebase”目录中)，然后把当前分支更新为最新的指定分支，最后再把保存的这些补丁应用到当前分支上，<strong>形成一个线性的历史记录</strong>。</p>
<p>“-i” 是指交互模式，就是说你可以干预 rebase 这个事务的过程，包括设置 commit message，删除 commit 等等。<br>“–autosquash” 是自动合并 commit 的参数。</p>
<p><code>git rebase -i --autosquash [branchName]</code> 当前在特性分支上执行，合并 branchName 分支到当前分支</p>
<p><code>git rebase -i --autosquash [branchName] [feature]</code> 无需在特性分支上执行</p>
<p><code>git rebase --abort</code> 终止 rebase 的行动，回到 rebase 前的状态</p>
<p>特性分支合并了最新的主分支后，原有的 commit 是逐个应用到当前分支的，当正常执行的 commit 与已有代码发生冲突时，需执行下面三部，直到 rebase 成功。</p>
<p>① 解决冲突</p>
<p>② <code>git add .</code></p>
<p>③ <code>git rebase --continue</code></p>
<p>变基操作会改变提交历史，如果分支已经推送到远程分支，需要使用 <code>git push --force</code> 强制推送到远程。如果有其它人跟你一起在该分支上协同开发，需使用破坏性没那么强的 <code>--force-with-lease</code> 参数，如果远程有其它人推送了新的提交，那么推送将被拒绝。在使用 <code>git push --force-with-lease</code> 命令被拒绝时，需要 fetch 仓库，然后确认其它人是否对此分支有新的修改，如果没有你才可以继续强制推送。</p>
<h2 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h2><ul>
<li><code>pre-commit</code> 在键入提交信息前运行，被用来检查即将提交的快照，当从该挂钩返回非零值时，Git 放弃此次提交，但可以用 git commit –no-verify 来忽略</li>
<li><code>prepare-commit-msg</code> 在提交信息编辑器显示之前，默认信息被创建之后运行，该挂钩对通常的提交来说不是很有用，只在自动产生默认提交信息的情况下有作用，如提交信息模板、合并、压缩和修订提交等</li>
<li><code>commit-msg</code> 接收一个参数，此参数是包含最近提交信息的临时文件的路径，如果该挂钩脚本以非零退出，Git 放弃提交，可以用来在提交通过前验证项目状态或提交信息</li>
<li><code>post-commit</code> 挂钩在整个提交过程完成后运行，作为通知之类使用的</li>
<li><code>pre-rebase</code> 在衍合前运行，脚本以非零退出可以中止衍合的过程，可以使用这个挂钩来禁止衍合已经推送的提交对象</li>
<li><code>post-rewrite</code> 被那些会替换提交记录的命令调用，如 git commit –amend 和 git rebase</li>
<li><code>post-checkout</code> git checkout 成功运行后，该挂钩会被调用，可以用来为你的项目环境设置合适的工作目录</li>
<li><code>post-merge</code> 在merge命令成功执行后，该挂钩会被调用，可以用来在 Git 无法跟踪的工作树中恢复数据</li>
<li><code>pre-push</code> 会在 git push 运行期间，更新了远程引用但尚未传送对象时被调用，可以在推送开始之前，用它验证对引用的更新操作</li>
</ul>
<p><code>cd .git/hooks</code> 可查看 git 所有 hooks</p>
<h2 id="git-fork-机制"><a href="#git-fork-机制" class="headerlink" title="git fork 机制"></a>git fork 机制</h2><p>使用场景：如果想要修改他人 github 的项目，直接 clone 代码到本地是不能 pull 或 push 的，所以要使用 fork，先把他人代码 fork 到自己的 github 仓库，然后 clone 到本地修改，然后再提交到自己 github 仓库，这时候想要把修改的代码提交给他人的话，就可以在自己的 github 上提交 pull request，等其他人看到后就可以把代码做一个合并。当他人的代码有更新的时候，也可以将更新同步到自己的 github 仓库。</p>
<h4 id="github-的-fork"><a href="#github-的-fork" class="headerlink" title="github 的 fork"></a>github 的 fork</h4><p>在 github 上，fork 一个项目，如 lodash，如果远程有更新，红框内会有提示，点击 Pull request，base fork 选则本地仓库，head fork 选则 lodash 仓库，可将 lodash 的更新通过一个 pull request 合并到自己的仓库中。也可以通过交换 base fork 和 head fork 提交一个 pull request 到 lodash 仓库。</p>
<img src="/2018/05/04/git-base2/fork-1.png" title="fork 一个项目">
<img src="/2018/05/04/git-base2/fork-2.png" title="提交 pull request">
<img src="/2018/05/04/git-base2/fork-3.png" title="git remote -v">
<h4 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h4><p>在 github 创建一个仓库命名为 local-lodash 后，执行下面操作：<br><code>git clone https://github.com/lodash/lodash.git local-lodash</code> 克隆远程 lodash 仓库到本地<br><code>git remote remove origin</code> 删除远程仓库地址<br><code>git remote add origin https://github.com/zhulichao/local-lodash.git</code> 添加自己的远程仓库地址<br><code>git remote add upstream https://github.com/lodash/lodash.git</code> 添加上游远程仓库地址<br><code>git push -u origin master</code> 初次提交到自己的远程仓库<br><code>git pull upstream master</code> 同步上游仓库 lodash 的更新<br><code>git push origin</code> 提交到自己的远程仓库<br><code>git remote -v</code>  查看远程仓库地址，pull 和 push 可以是两个不同的地址</p>
<img src="/2018/05/04/git-base2/fork-4.png" title="git remote -v">
<p>这种方式与在 github 上执行 fork 还是有区别的，如图所示，没有上面图片中红框中的内容，在 github 上是无法通过 pull request 同步远程 lodash 更新的，当然也不能提交 pull request 到远程 lodash，只能通过上面的命令 <code>git pull upstream master</code> 同步远程 lodash 的更新。如果你恰好也是远程 lodash 的贡献者，也可以通过 <code>git push upstream master</code> 直接提交 commit 到 远程 lodash。</p>
<img src="/2018/05/04/git-base2/fork-5.png" title="github 上查看">
<img src="/2018/05/04/git-base2/fork-6.png" title="提交 pull request">
<h2 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a>git 分支</h2><p>删除所有已经不在远程仓库维护的分支<br><code>git fetch -p &amp;&amp; for branch in</code>git branch -vv | grep ‘: gone]’ | awk ‘{print $1}’<code>; do git branch -D $branch; done</code></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《精益创业》笔记（未完成）]]></title>
      <url>https://zhulichao.github.io/2018/04/07/lean-startup/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[统计基础]]></title>
      <url>https://zhulichao.github.io/2018/03/16/statistics-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>数据集是由数据组成的集合，数据质量越好价值也越高。<br>统计能够帮助我们：量化不确定性（quantify uncertainty）、辨别偏见（discern biases）。<br>需要考虑数据是哪里来的、是如何计算的，需要辨别哪些数据好、哪些数据不好，这些数据是做出决定的正确数据吗。<br>一手数据是自己从自然环境或实验中调查收集到的；二手数据就是现成的数据，从别人手里拿到的数据。<br>整理后的数据能够提供服务和方便、帮助做决定、有说服力、节省时间和金钱。</p>
<h2 id="数据的中心-The-Center-of-the-Data"><a href="#数据的中心-The-Center-of-the-Data" class="headerlink" title="数据的中心(The Center of the Data)"></a>数据的中心(The Center of the Data)</h2><h3 id="平均值-Mean-Average"><a href="#平均值-Mean-Average" class="headerlink" title="平均值(Mean/Average)"></a>平均值(Mean/Average)</h3><p>数据的总和除以数据的个数。</p>
<img src="/2018/03/16/statistics-base/mean.png" title="平均值">
<h3 id="中位数-Median"><a href="#中位数-Median" class="headerlink" title="中位数(Median)"></a>中位数(Median)</h3><p>有相同数量的高于该点的数据和低于该点的数据，如果数据的个数是偶数个，Median 是中间两个数的平均值。</p>
<h3 id="加权平均数-Weighted-Mean"><a href="#加权平均数-Weighted-Mean" class="headerlink" title="加权平均数(Weighted Mean)"></a>加权平均数(Weighted Mean)</h3><p>将各数值乘以相应的权重，然后求和得到总体值，再除以总的权重和。<br>场景：课程总分由多部分构成，考试成绩、出勤情况、完成练习程度</p>
<img src="/2018/03/16/statistics-base/weighted_mean.png" title="加权平均数">
<h3 id="众数-Mode"><a href="#众数-Mode" class="headerlink" title="众数(Mode)"></a>众数(Mode)</h3><p>一组数据中出现最多的那个数，表示最有可能出现的数。</p>
<h2 id="数据的变化性-Data-Variability"><a href="#数据的变化性-Data-Variability" class="headerlink" title="数据的变化性(Data Variability)"></a>数据的变化性(Data Variability)</h2><h3 id="极差-范围误差-全距-Range"><a href="#极差-范围误差-全距-Range" class="headerlink" title="极差/范围误差/全距(Range)"></a>极差/范围误差/全距(Range)</h3><p>数据集中最大值与最小值的差。</p>
<h3 id="标准差-均方差-Standard-Deviation"><a href="#标准差-均方差-Standard-Deviation" class="headerlink" title="标准差/均方差(Standard Deviation)"></a>标准差/均方差(Standard Deviation)</h3><p>标准差是离均值平方的算术平均数的平方根。标准差能反映一个数据集的离散程度，一个较大的标准差，代表大部分数值和其平均值之间差异较大；一个较小的标准差，代表这些数值较接近平均值。方差是标准差的平方。</p>
<img src="/2018/03/16/statistics-base/standard.png" title="标准差">
<h3 id="离群值-Outlier"><a href="#离群值-Outlier" class="headerlink" title="离群值(Outlier)"></a>离群值(Outlier)</h3><p>离群点是指一个数据集中，远离序列的一般水平的极端大值和极端小值。可通过表格和图标、标准差、z分数可以帮助我们识别离群点。</p>
<p>离群点没有明确的定义，离群点可以被认为是机会，它们是新趋势的开端。关于离群点，需要考虑这是一个真的离群点吗，它是怎么产生的，其中能学到什么，需要改进什么。</p>
<h2 id="分布和相对位置-Distribution-and-Relative-Position"><a href="#分布和相对位置-Distribution-and-Relative-Position" class="headerlink" title="分布和相对位置(Distribution and Relative Position)"></a>分布和相对位置(Distribution and Relative Position)</h2><h3 id="标准分数-z分数-Z-Score"><a href="#标准分数-z分数-Z-Score" class="headerlink" title="标准分数/z分数(Z-Score)"></a>标准分数/z分数(Z-Score)</h3><p>z分数是以标准差为单位度量原始分数离开平均数多少个标准差，正数表示大于平均数，负数表示小于平均数。</p>
<img src="/2018/03/16/statistics-base/z_score.png" title="z分数">
<h3 id="经验规则-Empirical-Rule-Three-Sigma-Rule"><a href="#经验规则-Empirical-Rule-Three-Sigma-Rule" class="headerlink" title="经验规则(Empirical Rule/Three Sigma Rule)"></a>经验规则(Empirical Rule/Three Sigma Rule)</h3><p>这里的 Sigma 代表标准差，作用于对称分布，对称分布通常用一个以均值为中心的钟形曲线。</p>
<p>经验规则是统计规律，指出了在正态分布，几乎所有数据都将落在均值的三倍标准差内。经验规则表明，68%的数据将分布在距离均值的一个标准差之内，95%的数据将分布在距离均值的两个标准差之内，99.7%的数据将分布在均值的三个标准偏差之内。</p>
<p>经验法则最常在统计中用于预测最后结果。在得到数据的标准差，并在可以收集确切的数据之前，该规则可作为一个对即将到来的数据的结果的粗略估计。该概率特别适用与一些需要消耗大量时间去收集的数据，或者甚至是不可能获得的数据。</p>
<img src="/2018/03/16/statistics-base/empirical.png" title="经验规则">
<h3 id="百分位数-Percentile-Rank"><a href="#百分位数-Percentile-Rank" class="headerlink" title="百分位数(Percentile Rank)"></a>百分位数(Percentile Rank)</h3><p>将一组数据从小到大排序，并计算相应的累计百分位，则某一百分位所对应数据的值就称为这一百分位的百分位数，可表示为：一组n个观测值按数值大小排列，如处于p%位置的值称第p百分位数，中位数是第50百分位数。第100百分位数是不可能的，因为那就是说你是班级中的前0%，既可以说你是班级的前1%，也可以说你是第99百分位数。</p>
<img src="/2018/03/16/statistics-base/percentile.png" title="百分位数">
<h2 id="概率-Probability"><a href="#概率-Probability" class="headerlink" title="概率(Probability)"></a>概率(Probability)</h2><p>概率是事件发生的可能性，样本空间所有可能结果的概率之和一定是100%，概率分为客观概率和主观概率。客观概率是基于计算的，又分为：古典概率/事前概率，所有可能是已知的，并且出现概率相同，如投币；经验概率，特定的事件发生的次数占总体实验样本的比率，如估算任意一年的二月份中最低的日最高温度低于零度的概率，罚球命中率。主观概率没办法计算，无法重复，建立在过去的经验与判断的基础上，根据对未来事态发展的预测和历史统计资料的研究确定的概率，如解雇率。</p>
<h2 id="多事件概率-Multiple-Event-Probability"><a href="#多事件概率-Multiple-Event-Probability" class="headerlink" title="多事件概率(Multiple Event Probability)"></a>多事件概率(Multiple Event Probability)</h2><p>事件1/事件2出现的概率 = 事件1出现的概率 + 事件2出现的概率 - 事件1和事件2共同出现的概率。<br>条件概率，事件1已经发生的情况下，事件2出现的概率。两个事件 A 和 B 是独立的当且仅当 Pr(A∩B) = Pr(A)Pr(B)。</p>
<p>贝叶斯定理(Bayes theorem)<br><img src="/2018/03/16/statistics-base/theorem.png" title="贝叶斯公式"></p>
<h2 id="贝叶斯经典问题"><a href="#贝叶斯经典问题" class="headerlink" title="贝叶斯经典问题"></a>贝叶斯经典问题</h2><p>Monty Hall problem: 出自美国的电视游戏节 Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔(Monty Hall)。参赛者会看见三扇关闭的门，其中一扇的后面有辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是:换另一扇门参赛者可以赢得汽车的概率是多少?</p>
<p>答案：简单的想选择当前门赢汽车的概率是1/3，选择另外两扇门赢汽车的概率是2/3，其中一扇已经打开了，换成另一个门赢汽车的概率就是2/3了。<br><img src="/2018/03/16/statistics-base/question1.png" title="计算方式"></p>
<p>毒品检测问题。已知一家公司 0.5% 的员工吸毒。现在引入一个毒品检测的方式，对吸毒者检测为阳性的概率是 99%，非吸毒者检测出阳性的概率是 1%。已知一个公司的员工被检测出阳性，那么他吸毒的概率是多少?</p>
<p>答案：使用贝叶斯公式<br><img src="/2018/03/16/statistics-base/question2.png" title="计算方式"></p>
<h2 id="事物是如何排列的-How-Objects-Are-Arranged"><a href="#事物是如何排列的-How-Objects-Are-Arranged" class="headerlink" title="事物是如何排列的(How Objects Are Arranged)"></a>事物是如何排列的(How Objects Are Arranged)</h2><h3 id="排列-Permutation"><a href="#排列-Permutation" class="headerlink" title="排列(Permutation)"></a>排列(Permutation)</h3><p>总数为n，有序的排列，有多少可能 = n!<br>总数为n，选出有序的x个，有多少可能 = n! / (n - x)!</p>
<h3 id="组合-Combination"><a href="#组合-Combination" class="headerlink" title="组合(Combination)"></a>组合(Combination)</h3><p>总数为n，选出无序的x个，有多少可能 = n! / [(n - x)! * x!]</p>
<h2 id="离散与连续-Discrete-VS-Continuous"><a href="#离散与连续-Discrete-VS-Continuous" class="headerlink" title="离散与连续(Discrete VS. Continuous)"></a>离散与连续(Discrete VS. Continuous)</h2><p>实验最终出现的结果是未知的、随机的，因此实验的结果叫做随机变量。随机变量表示随机试验各种结果的实值单值函数，随机事件不论与数量是否直接有关，都可以数量化，即都能用数量化的方式表达。离散指的是有限多种可能性，自然数或整数计算。连续指的是有无限多种可能性，是某个区间内的任一实数。因为连续随机变量的取值有无限多种可能，因此需要使用一种替代的方式来计算这种类型的概率。</p>
<h2 id="离散概率分布-Discrete-Probability-Distributions"><a href="#离散概率分布-Discrete-Probability-Distributions" class="headerlink" title="离散概率分布(Discrete Probability Distributions)"></a>离散概率分布(Discrete Probability Distributions)</h2><img src="/2018/03/16/statistics-base/discrete.png" title="离散型方差">
<h2 id="连续概率分布-Continuous-Probability-Distributions"><a href="#连续概率分布-Continuous-Probability-Distributions" class="headerlink" title="连续概率分布(Continuous Probability Distributions)"></a>连续概率分布(Continuous Probability Distributions)</h2><img src="/2018/03/16/statistics-base/continuous.png" title="连续型方差">
<img src="/2018/03/16/statistics-base/other.png" title="随机变量的期望和方差">
<h3 id="概率密度-Probability-densities"><a href="#概率密度-Probability-densities" class="headerlink" title="概率密度(Probability densities)"></a>概率密度(Probability densities)</h3><p>结果的可能是无限时，用曲线来描述结果的分布，这个曲线被叫做概率密度，曲线下的区域表示每种可能的结果。</p>
<h3 id="钟形曲线-Bell-shaped-curve"><a href="#钟形曲线-Bell-shaped-curve" class="headerlink" title="钟形曲线(Bell-shaped curve)"></a>钟形曲线(Bell-shaped curve)</h3><p>正态分布。<br><img src="/2018/03/16/statistics-base/curve.png" title="钟形曲线"></p>
<h3 id="模糊中心极限定理-Fuzzy-central-limit-theorem"><a href="#模糊中心极限定理-Fuzzy-central-limit-theorem" class="headerlink" title="模糊中心极限定理(Fuzzy central limit theorem)"></a>模糊中心极限定理(Fuzzy central limit theorem)</h3><p>一些现象受到许多相互独立的随机因素的影响，如果每个因素所产生的影响都很微小时，总的影响可以看作是服从正态分布的。</p>
]]></content>
      
        <categories>
            
            <category> Statistics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Statistics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lodash 之 debounce]]></title>
      <url>https://zhulichao.github.io/2018/01/26/lodash-debounce/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="了解-Throttling（防抖）-和-Debouncing（节流）"><a href="#了解-Throttling（防抖）-和-Debouncing（节流）" class="headerlink" title="了解 Throttling（防抖） 和 Debouncing（节流）"></a>了解 Throttling（防抖） 和 Debouncing（节流）</h2><p>参考：<br><a href="https://css-tricks.com/the-difference-between-throttling-and-debouncing/" target="_blank" rel="external">The Difference Between Throttling and Debouncing</a><br><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="external">Debouncing and Throttling Explained Through Examples</a></p>
<p>应用场景：一个典型的应用场景是浏览器窗口中 scrolling 和 resizing，如设置了滚动的监听函数，在滚动 5000px的时候可能会触发 100 次以上的监听事件，如果监听事件做了大量计算或操作很多 DOM 元素，可能就会遇到性能问题。即时搜索也有同样的问题。</p>
<p>相同点：它们是为了解决性能问题而限制基于 DOM 事件的 JavaScript 的执行次数的两种方式，这是在事件和函数执行之间加的控制，因为 DOM 事件的触发频率是无法控制的。</p>
<p>不同点：<strong>Throttling</strong> 是限制一个函数能够被执行的最大时间间隔，保证了函数至少每隔 X 毫秒会被调用一次，如每隔 100ms 执行一次函数。<strong>Debouncing</strong> 是限制一个函数距上次调用达到一定时间间隔才会被再次调用，相当于连续的事件被分成了一组，只触发一次函数调用，如距上次调用达到 100ms 才会再次执行。</p>
<h2 id="了解-requestAnimationFrame"><a href="#了解-requestAnimationFrame" class="headerlink" title="了解 requestAnimationFrame"></a>了解 requestAnimationFrame</h2><p><code>window.requestAnimationFrame(callback)</code> 方法告诉浏览器执行动画并请求浏览器在下一次重绘之前调用函数 callback 来更新动画，返回一个 long 整数的 ID，可以通过传此值到 <code>window.cancelAnimationFrame()</code> 来取消回调函数的执行，注意只是在下一次重绘时调用回调函数。</p>
<p>requestAnimationFrame 的优势，在于充分利用显示器的刷新机制，比较节省系统资源。显示器有固定的刷新频率（60Hz 或 75Hz），requestAnimationFrame 的基本思想就是与这个刷新频率保持同步，利用这个刷新频率进行页面重绘。此外，使用这个API，一旦页面不处于浏览器的当前标签，就会自动停止刷新，这就节省了CPU、GPU和电力。注意 requestAnimationFrame 是在主线程上完成，这也意味着，如果主线程非常繁忙，requestAnimationFrame 的动画效果会大打折扣。</p>
<p>requestAnimationFrame 是限制函数执行次数的另一种方式，可以被认为是 <code>_.throttle(dosomething, 16)</code>，但是是高保真的，会针对不同设备本身的性能而更精确一些，浏览器内部决定渲染的最佳时机，它可以作为 throttle 的替换。</p>
<p>如果浏览器标签不是激活状态，就不会被执行，虽然对滚动、鼠标或键盘事件没有影响。还有需要考虑浏览器兼容性，node.js 中也没有提供该 API。</p>
<p>最佳实践：使用 requestAnimationFrame 进行重新绘制、计算元素位置或直接改变属性的操作，使用 <code>_.debounce</code> 或 <code>_.throttle</code> 进行 Ajax 请求或添加、移除 class（可以触发 CSS 动画），这时可以设置一个低一些的频率，如 200ms。</p>
<h2 id="lodash-之-debounce-源码"><a href="#lodash-之-debounce-源码" class="headerlink" title="lodash 之 debounce 源码"></a>lodash 之 debounce 源码</h2><p>这里不再描述 throttle 了，其实 throttle 就是设置了 maxWait 的 debounce，lodash 源码中对 throttle 的实现就是调用了 wait 和 maxWait 相等的 debounce。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * root 为全局变量，浏览器下为 window，node.js 下为 global</div><div class="line"> * isObject 函数判断传入参数是否为一个对象</div><div class="line"> * 创建一个 debounced 函数并返回，该函数延迟 func 在距离上一次调用达到 wait 时间之后再执行，如果在这期间内又调用了函数则将取消前一次并重新计* 算时间</div><div class="line"> * options.leading 函数在每个等待延迟的开始被调用</div><div class="line"> * options.trailing 函数在每个等待延迟的结束被调用</div><div class="line"> * options.maxWait 函数被调用的最大等待时间，实现 throttle 效果，保证大于一定时间后一定能执行</div><div class="line"> * 如果 leading 和 trailing 都设置为 true 了，只有函数在 wait 时间内被执行一次以上才会执行 trailing</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, options</span>) </span>&#123;</div><div class="line">    <span class="comment">// 变量初始化</span></div><div class="line">    <span class="keyword">let</span> lastArgs,</div><div class="line">        lastThis,</div><div class="line">        maxWait,</div><div class="line">        result,</div><div class="line">        timerId,</div><div class="line">        lastCallTime;</div><div class="line">    <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> leading = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">let</span> maxing = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">let</span> trailing = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 如果 wait = NaN 并且当前是浏览器环境 requestAnimationFrame 存在时，返回 true</span></div><div class="line">    <span class="keyword">const</span> userRAF = (!wait &amp;&amp; wait !== <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> root.requestAnimationFrame === <span class="string">'function'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 传入参数的验证</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> func != <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected a function'</span>);</div><div class="line">    &#125;</div><div class="line">    wait = +wait || <span class="number">0</span>; <span class="comment">// 将传入的 wait 转为数字，如果没有传入值默认赋值为 0</span></div><div class="line">    <span class="keyword">if</span> (isObject(options)) &#123;</div><div class="line">        leading = !!options.leading;</div><div class="line">        maxing = <span class="string">'maxWait'</span> <span class="keyword">in</span> options;</div><div class="line">        <span class="comment">// maxWait 为设置的 maxWait 值和 wait 值中最大的，因为如果 maxWait 小于 wait，debounce 就失效了，相当于只有 throttle 了</span></div><div class="line">        maxWait = maxing ? <span class="built_in">Math</span>.max(+options.maxWait || <span class="number">0</span>, wait) : maxWait;</div><div class="line">        trailing = <span class="string">'trailing'</span> <span class="keyword">in</span> options ? !!options.trailing : trailing;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">invokeFunc</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        <span class="comment">// 进入 debounced 函数时对 lastArgs、lastThis 进行的赋值，在这里执行完函数后，对 lastArgs、lastThis 进行了重置</span></div><div class="line">        <span class="comment">// 个人认为这样做的原因，是保证通过计时的方式执行函数最多只能执行一次</span></div><div class="line">        <span class="keyword">const</span> args = lastArgs;</div><div class="line">        <span class="keyword">const</span> thisArg = lastThis;</div><div class="line">        lastArgs = lastThis = <span class="literal">undefined</span>;</div><div class="line">        lastInvokeTime = time;</div><div class="line">        result = func.apply(thisArg, args);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params">pendingFunc, wait</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (userRAF) &#123;</div><div class="line">            <span class="keyword">return</span> root.requestAnimationFrame(pendingFunc);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> setTimeout(pendingFunc, wait);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancelTimer</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (userRAF) &#123;</div><div class="line">            <span class="keyword">return</span> root.cancelAnimationFrame(id);</div><div class="line">        &#125;</div><div class="line">        clearTimeout(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leadingEdge</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO 不明白为什么这里需要更新 lastInvokeTime，进入 leadingEdge 函数不一定会真的触发函数的执行</span></div><div class="line">        lastInvokeTime = time;</div><div class="line">        <span class="comment">// 为 trailingEdge 触发函数调用设置定时器</span></div><div class="line">        timerId = startTimer(timerExpired, wait);</div><div class="line">        <span class="comment">// 如果 leading 为 true，会触发函数执行，否则返回上一次执行结果</span></div><div class="line">        <span class="keyword">return</span> leading ? invokeFunc(time) : result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 主要作用就是触发 trailingEdge</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">timerExpired</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> time = <span class="built_in">Date</span>.now();</div><div class="line">        <span class="comment">// 在 trailingEdge 且时间符合条件时，调用 trailingEdge函数，否则重启定时器</span></div><div class="line">        <span class="keyword">if</span> (shouldInvoke(time)) &#123;</div><div class="line">            <span class="keyword">return</span> trailingEdge(time);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 重启定时器，保证下一次时延的末尾触发</span></div><div class="line">        timerId = startTimer(timerExpired, remainingWait(time));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remainingWait</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        <span class="comment">// 距离上次函数被调用的时间</span></div><div class="line">        <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime;</div><div class="line">        <span class="comment">// 距离上次函数被执行的时间</span></div><div class="line">        <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime;</div><div class="line">        <span class="comment">// wait - timeSinceLastCall 为距离下一次 trailing 的位置</span></div><div class="line">        <span class="keyword">const</span> timeWaiting = wait - timeSinceLastCall;</div><div class="line"></div><div class="line">        <span class="comment">// maxWait - timeSinceLastInvoke 为距离下一次 maxing 的位置</span></div><div class="line">        <span class="comment">// 有maxing：比较出下一次 maxing 和下一次 trailing 的最小值，作为下一次函数要执行的时间</span></div><div class="line">        <span class="comment">// 无maxing：在下一次 trailing 时执行 timerExpired</span></div><div class="line">        <span class="keyword">return</span> maxing ? <span class="built_in">Math</span>.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trailingEdge</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        timerId = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 有 lastArgs 才执行，意味着只有 func 已经被 debounced 过一次，也就是被调用过一次，以后才会在 trailingEdge 执行</span></div><div class="line">        <span class="keyword">if</span> (trailing &amp;&amp; lastArgs) &#123;</div><div class="line">            <span class="keyword">return</span> invokeFunc(time);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 每次 trailingEdge 都会清除 lastArgs 和 lastThis，目的是避免最后一次函数被执行了两次</span></div><div class="line">        <span class="comment">// 举个例子：最后一次函数执行的时候，可能恰巧是前一次的 trailing edge，函数被调用，而这个函数又需要在自己时延的 trailing edge 触发，导致触发多次</span></div><div class="line">        lastArgs = lastThis = <span class="literal">undefined</span>;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shouldInvoke</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime;</div><div class="line">        <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            lastCallTime === <span class="literal">undefined</span>                    <span class="comment">// 第一次调用</span></div><div class="line">            || (timeSinceLastCall &gt;= wait)                <span class="comment">// 距离上次被调用已经超过 wait</span></div><div class="line">            || (timeSinceLastCall &lt; <span class="number">0</span>)                    <span class="comment">//系统时间倒退</span></div><div class="line">            || (maxing &amp;&amp; timeSinceLastInvoke &gt;= maxWait) <span class="comment">//超过最大等待时间</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 取消函数延迟执行</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (timerId !== <span class="literal">undefined</span>) &#123;</div><div class="line">            cancelTimer(timerId);</div><div class="line">        &#125;</div><div class="line">        lastInvokeTime = <span class="number">0</span>;</div><div class="line">        lastArgs = lastCallTime = lastThis = timerId = <span class="literal">undefined</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 触发函数立即执行</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">flush</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 如果前面没有定时任务在执行，也就是没有前面没有调用过函数，返回最后一次执行的结果，否则才会触发一次函数执行</span></div><div class="line">        <span class="keyword">return</span> timerId === <span class="literal">undefined</span> ? result : trailingEdge(<span class="built_in">Date</span>.now());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 检查当前是否在计时中</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pending</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> timerId !== <span class="literal">undefined</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回的控制函数真正调用频率的函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">debounced</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> time = <span class="built_in">Date</span>.now();</div><div class="line">        <span class="keyword">const</span> isInvoking = shouldInvoke(time);</div><div class="line"></div><div class="line">        lastArgs = args;</div><div class="line">        lastThis = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">// 更新上次函数调用时间</span></div><div class="line">        lastCallTime = time;</div><div class="line">        <span class="comment">// 无 timerId 的情况有两种：1.首次调用 2.trailingEdge执行过函数</span></div><div class="line">        <span class="keyword">if</span> (isInvoking) &#123;</div><div class="line">            <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</div><div class="line">                <span class="keyword">return</span> leadingEdge(lastCallTime);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (maxing) &#123;</div><div class="line">                <span class="comment">// Handle invocations in a tight loop.</span></div><div class="line">                timerId = startTimer(timerExpired, wait);</div><div class="line">                <span class="keyword">return</span> invokeFunc(lastCallTime);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 负责一种 case：trailing 为 true 的情况下，在前一个 wait 的 trailingEdge 已经执行了函数；</span></div><div class="line">        <span class="comment">// 而这次函数被调用时 shouldInvoke 不满足条件，因此要设置定时器，在本次的 trailingEdge 保证函数被执行</span></div><div class="line">        <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</div><div class="line">            timerId = startTimer(timerExpired, wait);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    debounced.cancel = cancel;</div><div class="line">    debounced.flush = flush;</div><div class="line">    debounced.pending = pending;</div><div class="line">    <span class="keyword">return</span> debounced;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows-开发环境配置]]></title>
      <url>https://zhulichao.github.io/2017/11/14/windows-development-environment/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p><a href="https://www.python.org" target="_blank" rel="external">下载</a></p>
<p><a href="http://jingyan.baidu.com/article/7908e85c78c743af491ad261.html" target="_blank" rel="external">安装教程</a></p>
<h2 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h2><p><a href="https://nodejs.org" target="_blank" rel="external">下载</a></p>
<p><a href="http://my.oschina.net/JeeChou/blog/219699?fromerr=RAIpMmVj" target="_blank" rel="external">安装教程</a></p>
<p><strong><font color="red" size="4px">注意</font>：</strong> 通篇看完一遍教程和下面注意事项后再进行安装。</p>
<blockquote>
<p>安装路径：X:\Program Files\nodejs，X是你自己的盘符，其它路径名称不要改，可能出问题<br>执行完安装教程后，npm -v 查看版本号如果没有反映，请删除C:\Users{账户}\下的.npmrc文件<br>NODE_PATH 环境变量为：<code>X:\Program Files\nodejs\node_global</code><br>path 环境变量为： <code>X:\Program Files\nodejs\;F:\Program Files\nodejs\node_global;</code><br>X:\Program Files\nodejs\node_modules\npm 路径下，npmrc文件第二行添加 <code>registry = https://registry.npm.taobao.org</code> 配置淘宝镜像<br>npm 升级，执行 npm install npm -g<br>X:\Program Files\nodejs\node_global\node_modules\npm 路径下，npmrc文件第二行添加 <code>registry = https://registry.npm.taobao.org</code></p>
</blockquote>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p><a href="https://git-scm.com/download" target="_blank" rel="external">下载</a><br><a href="http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="external">安装教程</a></p>
<p><strong>注意</strong> Adjusting your PATH environment 选择 Run Git from the Windows Command Prompt.</p>
<h2 id="安装-TortuiseGit"><a href="#安装-TortuiseGit" class="headerlink" title="安装 TortuiseGit"></a>安装 TortuiseGit</h2><p><a href="https://download.tortoisegit.org" target="_blank" rel="external">下载</a></p>
<h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><p><a href="https://www.sublimetext.com/" target="_blank" rel="external">下载</a><br><a href="http://blog.sina.com.cn/s/blog_68e267e10102v76h.html" target="_blank" rel="external">注册码</a><br><a href="http://www.cnblogs.com/luoshupeng/archive/2013/09/09/3310777.html" target="_blank" rel="external">安装Package Control</a></p>
<h2 id="前端代码运行"><a href="#前端代码运行" class="headerlink" title="前端代码运行"></a>前端代码运行</h2><p><code>npm install babel-cli -g</code></p>
<p><code>git clone http://xxx.git</code></p>
<p><code>cd xxx</code></p>
<p><code>npm install</code></p>
<p><code>npm update</code></p>
<p><code>npm start</code></p>
<h2 id="后端代码运行"><a href="#后端代码运行" class="headerlink" title="后端代码运行"></a>后端代码运行</h2><p>在 eclipse 工作空间执行：<code>git clone http://yyy.git</code></p>
<p>解压 ide-setting.zip 到当前目录</p>
<p>将项目导入到 Eclipse 中</p>
<p>确定 Build Path 里没有问题，jdk 用1.7或1.8的</p>
<p>右键项目，Run As ——&gt; Run on Server 进行项目启动，如果没起起来，看一下Server.xml中内容是否如下，最后将端口改为8088</p>
<img src="/2017/11/14/windows-development-environment/server.png" title="Server.xml配置">
<p><strong>注意：</strong> 数据库配置在 /WebRoot/WEB-INF/db.properties 中</p>
]]></content>
      
        <categories>
            
            <category> 开发环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发环境 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac-开发环境配置]]></title>
      <url>https://zhulichao.github.io/2017/11/14/mac-development-environment/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Web端环境"><a href="#Web端环境" class="headerlink" title="Web端环境"></a>Web端环境</h2><ul>
<li><p>安装 Homebrew</p>
<p>  <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
</li>
<li><p>安装 Node</p>
<p>  <code>brew install node</code><br>  <code>brew install nvm</code><br>  <code>vim ~/.profile</code>，添加以下命令</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=~/.nvm</div><div class="line">source $(brew --prefix nvm)/nvm.sh</div></pre></td></tr></table></figure>
<p>  <code>source ~/.profile</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote 查看 所有的node可用版本</div><div class="line">$ nvm install xxx 下载你想要的版本</div><div class="line">$ nvm use xxx 使用指定版本的node</div><div class="line">$ nvm alias default xxx 每次启动终端都使用该版本的node</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Yarn</p>
<p>  <code>brew install yarn</code></p>
</li>
<li><p>全局安装 babel-cli</p>
<p>  <code>yarn global add babel-cli</code></p>
</li>
<li><p>安装 Mongo</p>
<p>  <code>brew install mongo</code></p>
</li>
<li><p>安装 git</p>
<p>  <code>brew install git</code></p>
</li>
<li><p>注册服务并启动</p>
<p>  <code>brew services start mongodb</code></p>
</li>
<li><p>导入数据库文件 xx.ar</p>
<p>  <code>cat xx.ar| mongorestore -h localhost --port 27017 --drop --gzip --archive -vvvv --stopOnError</code></p>
</li>
<li><p>安装 Robo 3T，创建连接</p>
</li>
<li><p>安装 Java</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew cask search java</div><div class="line">brew cask info java</div><div class="line">brew cask install java</div></pre></td></tr></table></figure>
</li>
<li><p>下载 <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.zip" target="_blank" rel="external">elasticsearch</a>解压</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch</div><div class="line">./bin/elasticsearch (这个窗口不能关)</div></pre></td></tr></table></figure>
</li>
<li><p>安装 VSCode，使用Setting Sync，安装插件</p>
</li>
<li><p>在 VSCode 中，alt + command + p 打开命令面板，输入 shell command 找到：Install‘code’ command in PAH，即可在终端中通过 code . 打开所在目录</p>
</li>
</ul>
<h2 id="移动端环境"><a href="#移动端环境" class="headerlink" title="移动端环境"></a>移动端环境</h2><ul>
<li><p>安装工具</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn react-native-cli</div><div class="line">brew install watchman</div><div class="line">brew install flow</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Xcode</p>
<blockquote>
<p>虽然一般来说命令行工具都是默认安装了，但你最好还是启动Xcode，并在Xcode -&gt; Preferences -&gt; Locations 菜单中检查一下是否装有选中的Command Line Tools。</p>
</blockquote>
</li>
<li><p>安装 Android Studio</p>
<p>  <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">下载 SDK 1.8</a>，注意不要使用 JDK 9.0，启动项目时会报错，如果安装了多个 JDK，要用如下指令指定使用哪个版本。<br>  <code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home</code></p>
<p>  Android Studio 中，File -&gt; Project Structure 中， SDK Location 中，JDK location 取消勾选“Use embedded JDK”，输入框中写入上面导出对应的路径，为 <code>/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home</code>。</p>
<p>  <a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">下载 Android Studio</a>，按步骤安装，注意需要翻墙安装 SDK。</p>
<p>  如果启动项目报如图所示错误，修改 android/build.gradle 文件如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        /*</div><div class="line">        解决图中所示错误</div><div class="line">        */</div><div class="line">        maven &#123; url &apos;https://maven.google.com&apos; &#125;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:3.0.0&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenLocal()</div><div class="line">        jcenter()</div><div class="line">        /*</div><div class="line">        解决找不到</div><div class="line">        import com.facebook.react.ReactApplication;</div><div class="line">        import com.facebook.react.ReactNativeHost;</div><div class="line">        */</div><div class="line">        maven &#123;</div><div class="line">            url &quot;$rootDir/../node_modules/react-native/android&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <img src="/2017/11/14/mac-development-environment/maven.png" title="错误信息"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发环境 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Yarn 常用命令]]></title>
      <url>https://zhulichao.github.io/2017/10/28/yarn-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h2><ul>
<li><code>yarn global &lt;add|list|remove|upgrade&gt; &lt;package...&gt;</code> 全局安装</li>
<li><code>yarn global dir</code> 查看 yarn 全局安装目录</li>
<li><code>yarn config get registry</code> 查询当前配置的镜像</li>
<li><code>yarn config set registry http://registry.npm.taobao.org/</code> 设置镜像</li>
</ul>
<h2 id="以下yarn所有操作都会更新-package-json-和-yarn-lock-文件"><a href="#以下yarn所有操作都会更新-package-json-和-yarn-lock-文件" class="headerlink" title="以下yarn所有操作都会更新 package.json 和 yarn.lock 文件"></a>以下yarn所有操作都会更新 <code>package.json</code> 和 <code>yarn.lock</code> 文件</h2><ul>
<li><code>yarn init [--yes|-Y]</code>：创建项目，初始化包的开发环境</li>
<li><code>yarn add [package]@[version|tag]</code>：添加依赖项，添加到dependencies<ul>
<li><code>yarn add --dev|-D</code> 添加到 devDependencies</li>
<li><code>yarn add --peer|-P</code> 添加到 peerDependencies</li>
<li><code>yarn add --optional|-O</code> 添加到 optionalDependencies</li>
</ul>
</li>
<li><code>yarn upgrade [package]@[version|tag]</code>：升级依赖项</li>
<li><code>yarn remove [package]</code>：移除依赖项</li>
</ul>
<h2 id="以下yarn所有操作都不会更新-package-json-和-yarn-lock-文件"><a href="#以下yarn所有操作都不会更新-package-json-和-yarn-lock-文件" class="headerlink" title="以下yarn所有操作都不会更新 package.json 和 yarn.lock 文件"></a>以下yarn所有操作都不会更新 <code>package.json</code> 和 <code>yarn.lock</code> 文件</h2><ul>
<li><code>yarn [install]</code>：从package.json安装项目全部依赖并写入yarn.lock<ul>
<li><code>yarn intall --flat</code> 安装一个包的单一版本</li>
<li><code>yarn install --force</code> 强制重新下载所有包</li>
<li><code>yarn install --production</code> 只安装生产环境依赖</li>
</ul>
</li>
<li><code>yarn check</code>：验证package.json里的依赖版本是否和yarn.lock否匹配</li>
<li><code>yarn check --integrity</code>：验证package.json里依赖版本和hash值是否和yarn.lock是否匹配</li>
</ul>
<h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><ul>
<li><code>yarn info &lt;package&gt;@[version] [&lt;field&gt;]</code>：拉取远程包的信息并返回树格式，可通过field指定哪部分被返回，也可将filed指定为readme</li>
<li><code>yarn licenses list</code>：按字母顺序列出所有被yan install安装的包</li>
<li><code>yarn list [package]</code>：列出项目安装的依赖</li>
<li><code>yarn outdated [package...]</code>：检查过时的包依赖</li>
<li><code>yarn why &lt;query&gt;</code>：显示有关一个包为何被安装的信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> NPM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Web全栈工程师的自我修养》笔记]]></title>
      <url>https://zhulichao.github.io/2017/09/23/full-stack-developer/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看了《Web全栈工程师的自我修养》，以下是个人感觉书中比较好的内容，记录下来方便以后查看。</p>
<hr>
<p>服务器、数据库、服务器编程语言、HTML、CSS、JavaScript等组合在一起就是一个“栈”，这个“栈”是用来制作Web站点的，所以又叫<strong>Web栈（Web-Stack）</strong>。</p>
<p>服务器、数据库、服务器编程语言、iOS或者Android开发技术组合在一起称为<strong>App栈</strong>。</p>
<p>软件工程师事业的3个关键词，分别是技术、成长和声望。</p>
<p><strong>全栈工程师</strong>是指，一个能处理数据库、服务器、系统工程和客户端的所有工作的工程师。根据项目的不同，客户需要的可能是移动栈、Web栈，或者原生应用程序栈。全栈工程师除了在一个专精知识领域有深入研究之外，还以知识广博和解决问题能力强著称，可以采用“先精后广，一专多长”的流学习程来成为全栈工程师。从工作中锻炼出来的发现问题、洞察需求、设计解决方案并开发出初始版本产品的能力，是全栈工程师最大的优势。全栈工程师应该关注用户体验，并且掌握用户体验相关的知识。</p>
<p>如果一个公司需要招聘“全栈工程师”，可能要求的三个那能力就是一专多长、关注商业目标、关注用户体验。</p>
<p>全栈工程师的目标往往是快速解决商业问题，不一定需要长期完美的方案。使用方便好用的框架能大大节省学习成本和开发时间，所以有些时候技术选型的步骤是：先选择框架，然后选择语言。</p>
<p>一个代表性的全栈框架————MEAN，它是MongoDB-Express-AngularJs-Node.js的缩写，是从数据库、服务器到前端页面的一个完整技术栈。</p>
<p>最常使用的服务器是基于Linux的。Web发布使用Apache，数据库使用MySQL，服务器端编程语言使用PHP的组合，它们往往一起统称为LAMP（Linux-Apache-MySQL-PHP）整体解决方案。</p>
<hr>
<p><strong>前端工程师</strong>：产品视觉稿在得到产品经理和交互设计师等多方确认之后，会交给前端工程师，由前端工程师制作页面，实现视觉稿以及交互功能。从头衔上的变化就可以看出，这时候才真正开始编码。前端工程师需要非常熟悉HTML、CSS和JavaScript，以及性能、语义化、多浏览器兼容、SEO、自动化工具等广泛的知识。关于网络性能和HTTP协议，作为大公司的前端工程师是非常看重的。现在前端开发岗位开始要求有移动端页面开发的经验，或者熟悉响应式页面开发。</p>
<p>招聘初级工程师时，一般会考察：</p>
<ul>
<li>对浏览器兼容性的了解</li>
<li>对HTML/CSS/JavaScript语法和原理的理解</li>
<li>对编辑器和插件的熟悉程度</li>
<li>对调试工具的了解程度</li>
<li>对版本管理软件的熟悉和应用经验</li>
<li>对前端库/框架的使用</li>
<li>标准/规范</li>
</ul>
<p>招聘中级工程师时，一般会考察：</p>
<ul>
<li>对代码质量、代码规范的理解</li>
<li>对JavaScript单元测试的熟悉</li>
<li>对性能优化的应用和理解</li>
<li>对SEO的应用和理解</li>
<li>代码部署</li>
<li>移动Web</li>
</ul>
<p>招聘高级工程师时，除了上面考察点以外，还会考察：</p>
<ul>
<li>代码架构</li>
<li>安全</li>
<li>对自动化测试的理解</li>
</ul>
<p><strong>越接近高级工程师，越考察对某个点的本质理解，以及在项目和团队中的引导作用，而不是对某工具的使用经验。</strong></p>
<p>前端工程师要有一个基本常识，那就是结构、表现和行为要分离。技术层面上讲，网站的内容使用语义化的HTML标签，而不掺杂任何表现和逻辑；网站样式表现用CSS来描述，既能在多个页面之间复用，也可以根据不同用户来分别定义外观；页面行为逻辑用JavaScript来实现，这样保证浏览器在禁用JavaScript的时候，页面也能正常渲染和使用。</p>
<p>建议，在大三或者大四的方向课程设计上，或者选修课设计上增加与时俱进的前端开发课程，使用业界最新的编程语言去教学，这样对毕业生、对用人单位都是好事。</p>
<hr>
<p>一个<strong>库</strong>是一系列对象、方法等代码，应用程序可以把这个库“链接”进来。库起到了重用代码的作用，省下了重写这部分代码的工作量。</p>
<p>一个<strong>框架</strong>是一个软件系统中可重用的一部分，它可能包含子程序、库、胶水语言、图片等一些“资源”，这些资源一起组成了软件项目。框架不像库，可能包含多种语言，某些功能可能通过API的方式让主程序调用。</p>
<p>GASP库发现jQuery动画慢的问题，就重点优化JavaScript动画部分，它号称动画速度比jQuery快20倍，而且能开启硬件加速，在某些情况下比CSS动画性能还要好。</p>
<p>互联网领域发展很快，问题的优先级永远都是在动态变化的。所以团队往往每半年或者三个月就要回顾一下当前形势，并制定新的工作计划。如果新计划不是您擅长的，怎么办？您应该马上开始学习新的技术，这就是所说的关注问题，而不是醉心技术。</p>
<p>如何创造更大的影响力？影响力就是跨界解决问题。高级工程师可以选择往上下游去扩展自己的能力，并承担更多的责任，给公司带来更大的收益，也给自己带来更大的成长空间。</p>
<p>永远从商业目标的角度来决定学习哪些东西，而不是纯粹为了锻炼技术能力而去学习。在开源项目中贡献代码，说明您有能力阅读和编写好的代码，这是公司直接需要的技能，此外，这还能说明您有能力与他人协作：开源代码总是需要协作的。开源项目还能表明您对新鲜事物有热情，表明您也许英语能力不错，有查阅文档的能力…简直是一箭N雕。</p>
<p>Web性能优化：</p>
<ul>
<li>压缩源码和图片</li>
<li>选择合适的图片格式</li>
<li>合并静态资源</li>
<li>开启服务器端的Gzip压缩</li>
<li>使用CDN</li>
<li>延长静态资源缓存时间，不过需要通过改文件名的方式确保资源更新时用户会拉取新资源</li>
<li>把CSS放在页面的头部，把JavaScript放在页面的底部</li>
</ul>
<p>在最开始，硅谷之所以名字当中有一个“硅”字，是因为当地企业多数是从事加工制造高浓度硅的半导体行业和电脑工业。随后，互联网公司和软件公司渐渐取代传统的硬件公司，让硅谷获得了新的生命，但硅谷这个名字保留了下来。在硅谷从诞生到发展壮大的整个生命周期中，斯坦福大学起到了很大的最用，称之为硅谷的母亲也不为过。</p>
<p><a href="https://www.smashingmagazine.com/" target="_blank" rel="external">https://www.smashingmagazine.com/</a><br><a href="https://tutsplus.com/" target="_blank" rel="external">https://tutsplus.com/</a></p>
<p>沉淀和总结是很重要的，在腾讯，设计师做完一次设计定稿之后，就会把设计的思路，包括整体的设计风格、设计规范和色彩的确定等都总结成一封邮件或者PPT，发送给部门同事。</p>
<p>为什么服务器对并发请求数这么敏感？虽然服务器的多个进程看上去是同时运行，但是对于单核CPU的架构来说，实际上是计算机系统同一段时间内，以进程的形式，将多个程序加载到存储器中，并借由时间共享，以在一个处理器上表现出同时运行的感觉。由于在操作系统中，生成进程、销毁进程、进程间切换都很消耗CPU和内存，因为当负载高时，性能会明显降低。</p>
<p>Apache通过模块化的设计来适应各种环境，其中一个模块叫做多处理模块（MPM），专门用来处理多请求的情况。Apache安装在不同系统上的时候会调用不同的默认MPM，我们不用关心具体的细节，只需要了解Unix上默认的MPM是prefork。为了优化，可以改成worker模式。prefork和worker模式的最大区别就是，prefork的一个进程维持一个连接，而woker的一个线程维持一个连接。</p>
<p>Nginx是Apache服务器不错的替代品或者补充：一方面是Nginx更加轻量级，占用更少的资源和内存；另一方面是Nginx处理请求是异步非阻塞的，而Apache则是阻塞型的，在高并发下Nginx能保持低资源、低消耗和高性能。由于Apache和Nginx各有所长，所以经常的搭配是Nginx处理前端并发，Apache处理后台请求。</p>
<p>DDoS是Distributed Denial of Service的缩写，DDoS攻击翻译成中文就是“分布式拒绝服务”攻击。</p>
<p>HTTP 1.1引入分块传输编码，允许服务器为动态生成的内容维持HTTP持久链接。如果一个HTTP消息（请求消息或应答消息）的Transfer-Encoding消息头的值为chunked，那么消息体由数量不确定的块组成————也就是说想发送多少块发送多少块————并以最后一个大小为0的块为结束。</p>
<p>通过Chrome开发者工具中的PageSpeed工具，可以快速获得关于站点性能优化的建议。</p>
<p>缓存有这样几种功效：</p>
<ul>
<li>存储频繁访问的数据</li>
<li>内存缓存减少磁盘I/O</li>
<li>保存耗时的操作，以便下次使用</li>
</ul>
<p>可以开启MySQL查询缓存来提高速度，并且减少系统压力。可以通过修改MySQL安装目录中的my.ini来设置查询缓存。</p>
<p>memcached支持集群，而且有诸多优点，所以可以有效利用多台机器的内存，提高命中率。</p>
<p>表征性状态传输（Representational State Transfer，REST）是Roy Fielding博士在2000年发表的博士论文中提出来的一种软件架构风格。Restful的目的是定义如何正确地使用Web标准，优雅地使用HTTP本身的特性。原则上是对资源、集合、服务（URL）、get、post、put、delete（操作）的合理使用。</p>
<p>浏览器缓存设置最佳实践：</p>
<ul>
<li>对于动态生成的HTML页面使用HTTPS头：Cache-Control:no-cache。</li>
<li>对于静态HTML页面使用HTTPS头：Last-Modafied。</li>
<li>其它所有的文件类型都设置Expires头，并且在文件内容有所修改的时候修改Query String。</li>
</ul>
<p>风投在评估一个创业项目是否会成功的时候，有一个指标就是创始人是否是自己产品的目标用户。</p>
<p>混合模式App同时使用Web技术与原生程序语言开发。App启动后，它的全部页面或者部分界面中，使用网络视图（WebView）技术来实现。WebView能加载显示网页，可以将其视为一个浏览器，它一般使用WebKit渲染引擎加载显示网页。常用的对WebView进行性能优化的方法：</p>
<ul>
<li>把WebView的部分或者所有资源打包在App中。需要网络数据时，可以通过网络请求json或者体积比较小的数据格式，然后通过本地页面模板和资源来渲染。这种方式的缺点是，App发布包体积会变大。</li>
<li>把需要加载的资源设置好预先加载。可以在App启动时从后台下载需要的资源，并缓存在手机沙盒中备用。这种方法的好处是不会增加包体积，不过第一次访问的时候可能因为没有预加载资源而导致等待时间比较久。</li>
<li>使用HTML5 Manifest技术实现资源缓存。HTML5引入了应用程序缓存，这意味着Web App可进行缓存，并可在没有互联网连接时访问。这种方法的好处是，缓存所有资源到本地之后，如果希望更新WebView，可以在服务器上更新资源列表和Manifest文件。App检测到Manifest文件的修改，就知道资源已经更新，可以开始下载新的资源了。</li>
<li>不要把整个App的主要逻辑都使用WebView来实现。要结合原生技术和WebView各自的优缺点，根据不同的场景选择合适的技术。原生技术的优点在于能很好地操作App存储数据；实现页面间切换、高性能动画、大量数据的界面。WebView的优点在于开发快、技术简单；前端开发者能够利用已有的CSS3和JavaScript知识；页面能够从服务器端更新；能够分享到社交平台；在多个平台上共用等。</li>
<li>设计得更像一个App，而不是一个网页。在这种做法诞生初期，还会把App分为原生App和混合模式App，不过从2014年以来，已经不这样区分了。一般认为一个App中有一些HTML页面是非常自然的事情，所以这个概念在渐渐淡化。</li>
</ul>
<p>点击WebView中的一个按钮，我希望弹出一个原生的警告框，应该怎么实现呢？在Android中，可以使用WebView.addJavascriptInterface方法来实现互相通信。在iOS中，需要使用shouldStartLoadWithRequest委托。</p>
<p>CVS有以下几个缺点：</p>
<ul>
<li>CVS不支持文件重命名，如果重命名一个文件，之前的修订历史记录就会丢失</li>
<li>CVS没有原子性提交，如果提交很多文件，提交到一半的时候出错，那就麻烦了</li>
<li>CVS只支持文本文件，无法提交二进制文件</li>
</ul>
<p>SVN解决了这几个问题，并加入了一些新特性：</p>
<ul>
<li>SVN对二进制文件的版本管理，使用了节省空间的保存方法，只保存和上一版本的不同之处</li>
<li>目录也有版本历史。重命名、复制和删除也会保存在版本历史记录中，当然，要用SVN的重命名来操作</li>
<li>分支的开销比较小</li>
</ul>
<p>关于npm这个词的意义，一般人可能以为是Node Package Manager的缩写，但实际不是这样的。npm是“npm is not an acronym”（npm不是一个缩写）这个递归定义的简写。</p>
<p>所有的脚本语言都是直接运行，不需要编译成可执行代码，只不过Python等脚本运行在服务器，用户看不到源代码，而JavaScript运行在浏览器，所有人都能看到源码。</p>
<p>好的架构有以下几个要素：</p>
<ul>
<li>有合适的分离粒度</li>
<li>最小知识原则</li>
<li>DRY（Don’t Repeat Yourself，不要重复您自己）</li>
<li>最小化预先设计，只设计必需的内容</li>
<li>通过良好的层级，让文件易于找到</li>
<li>在代码层面，有一致且可执行的命名规则</li>
</ul>
<p>将编程语言编译成机器码有两种传统的方法：使用编译器（compiler）预先编译，或者使用解释器（interpreter）一边编译一边运行。编译器的工作方式是，通过编译程序直接将我们的源代码翻译成当前系统环境下CPU可执行的机器码，下次只需执行这些翻译完成后的机器代码即可。这种方式的好处是执行效率非常高，缺点就是可移植性很差。解释器的工作方式是，将工程师编写的代码，一句一句解释给CPU执行，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较慢。这种方式的好处是平台无关性，以及这个“编辑-解释-除错”的循环通常比“编辑-编译-运行-除错”的循环省时许多。</p>
<p>传统JavaScript引擎通常先把JavaScript代码编译成字节码，然后再通过字节码转译为机器码。v8引擎直接把JavaScript代码编译成机器码，所以性能得到了很大提高。</p>
<p>有些语言被设计为可以在任何领域使用，比如C、Java、Python和XML，它们被成为“通用语言”。</p>
<p>有些语言被设计为特定领域专用，比如HTML和CSS，称为为“特定领域语言”。</p>
<p>KISS原则是“Keep it simple, stupid”的缩写，意思是说软件设计当中应该注重简约的原则。这一原则认为，大部分系统的设计越简单越好，有不必要的复杂性都应该避免。如果一个系统非常复杂，就应该分解为多个简单的组件，做好足够的分解和抽象。</p>
<p>虚拟专用服务器（Virtual Privte Server，VPS）是把一台服务器分割成多个虚拟专享服务器的优质服务。</p>
<p>设计模式的关注点在于：</p>
<ul>
<li>高效编写代码</li>
<li>高可复用性</li>
<li>抽象带来的可读性</li>
</ul>
<p>23种软件设计模式，分为三大类：创建型模式、结构型模式、行为模式。创建型模式，就是用来创建对象的模式，它对实例化的过程进行了抽象，帮助一个系统独立于如何创建、组合和表示它的那些对象，如单例模式、惰性初始化模式、工厂方法、抽象工厂、建造模型、原型模式、对象池模式和多例模式等。结构型模式，主要解决类、对象、模块之前的耦合关系，如适配器模式、桥接模式、组合模式、装饰模式、外观模式、享元模式和代理模式等。行为模式，用来识别对象之前的常用交流模式并加以实现，如此，可在进行这些交流活动时增强弹性，如观察者模式、黑板、责任链、命令、解释器、迭代器、中介者、备忘录、空对象、模板方法和访问者等。</p>
<p>MVC的本质是代码的分离，它不光在Web开发中大放异彩，在桌面软件和移动端软件开发中也随处可见。</p>
<p>DRY是“Don’t Repeat Yourself”的缩写，意思是说，在一个系统里，对于任何数据或者变量，都应该配置在有且只有一个地方，其它的地方都应该引用这里的数据。这样，需要改动数据的时候，只需调整这一处，所有的地方就都变更过来了。</p>
<p>推荐使用英文搜索的原因：</p>
<ul>
<li>英文的技术资料更多</li>
<li>StackOverflow有完善的鼓励机制</li>
<li>Google的搜索能力非常强</li>
<li>英语世界的语言风格比较严谨</li>
</ul>
<p><strong>Jeff Atwood提出了著名的Atwood定律：“任何能够用JavaScript实现的应用系统，最终都必将用JavaScript实现”。</strong></p>
<p>自我意识，是指您能够精确地觉察自己的情绪波动。</p>
<p>社会意识，是指您能感知周围人的情绪，并敏锐捕捉到周围发生的事情。</p>
<p>自我管理，是指您能根据自我情绪的感知，灵活积极地调控自身行为。</p>
<p>关系管理，是指您感知到周遭的“情绪场”之后，能够掌控自我情绪并把握他人情绪值，来让双方进行更好的互动。</p>
<img src="/2017/09/23/full-stack-developer/timg.jpg" title="时间管理四象限">
]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-小代码]]></title>
      <url>https://zhulichao.github.io/2017/08/31/findjob-javascript-code/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>实现Array的map</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Array.prototype.map = function(callback, thisArg) &#123;  </div><div class="line">    if (this == null) &#123;</div><div class="line">        throw new TypeError(&quot;this is null or not defined&quot;);</div><div class="line">    &#125;  </div><div class="line">    if (Object.prototype.toString.call(callback) != &quot;[object Function]&quot;) &#123;</div><div class="line">        throw new TypeError(callback + &quot; is not a function&quot;);</div><div class="line">    &#125;</div><div class="line">    // 将O赋值为调用map方法的数组. 防止callback方法中修改原数组.</div><div class="line">    var originArr = Object(this);</div><div class="line">    // 将len赋值为数组O的长度. 如果length未定义就取0.</div><div class="line">    var len = originArr.length &gt;&gt;&gt; 0;</div><div class="line">    var copyArg;</div><div class="line">    if (thisArg) &#123;</div><div class="line">        copyArg = thisArg;</div><div class="line">    &#125;</div><div class="line">    var result = new Array(len);</div><div class="line">    var k = 0;</div><div class="line">    while(k &lt; len) &#123;</div><div class="line">        var kValue, mappedValue;</div><div class="line">        // 遍历O,k为原数组索引</div><div class="line">        if (k in originArr) &#123;</div><div class="line">            // kValue为索引k对应的值.</div><div class="line">            kValue = originArr[k];</div><div class="line">            // 执行callback,this指向copyArg.</div><div class="line">            // originArr.map((kValue, k, originArr) =&gt; &#123;&#125;);</div><div class="line">            mappedValue = callback.call(copyArg, kValue, k, originArr);</div><div class="line">            // 返回值添加到新数组A中.</div><div class="line">            result[k] = mappedValue;</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>js 实现快排</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function quickSort(arr)&#123;</div><div class="line">    // 如果数组&lt;=1,则直接返回</div><div class="line">    if(arr.length &lt;= 1)&#123;</div><div class="line">        return arr;</div><div class="line">    &#125;</div><div class="line">    var pivotIndex = Math.floor(arr.length/2);</div><div class="line">    // 找基准，并把基准从原数组删除</div><div class="line">    var pivot = arr.splice(pivotIndex, 1)[0];</div><div class="line">    // 定义左右数组</div><div class="line">    var left = [];</div><div class="line">    var right = [];</div><div class="line">    // 比基准小的放在left，比基准大的放在right</div><div class="line">    for(var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">        if(arr[i] &lt;= pivot)&#123;</div><div class="line">            left.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            right.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 递归</div><div class="line">    return quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>随机选取10–100之间的10个且不重复的数字，存入一个数组并排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function randomRange(start, end, count) &#123;</div><div class="line">    // 升序排序</div><div class="line">    function sortFunc(a, b) &#123;</div><div class="line">        return a - b;</div><div class="line">    &#125;</div><div class="line">    const randoms=[];</div><div class="line">    // 跳出while循环时 randoms数组有count个元素</div><div class="line">    while (randoms.length &lt; count)</div><div class="line">    &#123;</div><div class="line">        // 获取一个10–100范围的数</div><div class="line">        var random = Math.floor(Math.random()*(end - start + 1) + start);</div><div class="line">        // 判断当前随机数是否已经存在</div><div class="line">        if (!randoms.includes(random)) &#123;</div><div class="line">            randoms.push(random);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    randoms.sort(sortFunc);</div><div class="line">    return randoms;</div><div class="line">&#125;</div><div class="line">randomRange(10, 100, 10);</div></pre></td></tr></table></figure>
</li>
<li><p>获取url后面的查询参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 获取url后面指定名称的查询参数</div><div class="line">function getUrlQueryString(name) &#123;</div><div class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);</div><div class="line">    // window.location.search 从?开始的部分，包括?</div><div class="line">    var r = window.location.search.substr(1).match(reg);</div><div class="line">    if (r) &#123;</div><div class="line">        return unescape(r[2]);// 对通过escape()编码的字符串进行解码</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line">// 获取url的查询参数组成的对象</div><div class="line">function getUrlQueryObj() &#123; </div><div class="line">    //获取url中&quot;?&quot;符后的字串 </div><div class="line">    var url = location.search;</div><div class="line">    var queryObj = &#123;&#125;; </div><div class="line">    if (url.indexOf(&quot;?&quot;) &gt; -1) &#123; </div><div class="line">        var str = url.substr(1); </div><div class="line">        strs = str.split(&quot;&amp;&quot;);</div><div class="line">        strs.forEach((item) =&gt; &#123;</div><div class="line">            queryObj[item.split(&quot;=&quot;)[0]] = unescape(item.split(&quot;=&quot;)[1]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    return queryObj; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>找字符串中出现最多的字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function getMost(str)&#123;</div><div class="line">    var maxNum = 0;</div><div class="line">    // 存放出现字数最多的字符数组，因为出现最多的字符可能有多个</div><div class="line">    var maxCharArr = [];    </div><div class="line">    while(str)&#123;</div><div class="line">        var char = str.charAt(0);</div><div class="line">        var arr = str.split(char);</div><div class="line">        // char 字符出现的个数</div><div class="line">        var n = str.length - arr.join(&apos;&apos;).length;</div><div class="line">        // str 中去掉全部 char 字符</div><div class="line">        str = arr.join(&apos;&apos;);</div><div class="line">        if(n &gt; maxNum)&#123;</div><div class="line">            maxNum = n;</div><div class="line">            maxCharArr = [char];    // 放置数组元素</div><div class="line">        &#125;else if( n === maxNum)&#123;</div><div class="line">            maxCharArr.push(char);    //出现次数相同的字符 存入数组里</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return &#123;&apos;maxNum&apos;: maxNum, &apos;maxCharArr&apos;: maxCharArr&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>a 和 b 不使用临时变量进行交换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 方式一 通过计算</div><div class="line">function swape(a, b) &#123;</div><div class="line">    console.log(&quot;进入：&quot;, a, &apos;    &apos;, b);</div><div class="line">    if (a === b) &#123;</div><div class="line">        // 不用交换</div><div class="line">    &#125;</div><div class="line">    if (a &lt; b) &#123;</div><div class="line">        a = b + (b - a);</div><div class="line">        b = b - (a - b);</div><div class="line">        a = b + (a - b)/2;</div><div class="line">    &#125; else &#123;</div><div class="line">        b = a + (a - b);</div><div class="line">        a = a - (b - a);</div><div class="line">        b = a + (b - a)/2;</div><div class="line">    &#125;</div><div class="line">    console.log(&quot;离开：&quot;, a, &apos;    &apos;, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 方式二 es5</div><div class="line">a = [b, b = a][0];</div><div class="line"></div><div class="line">// 方式三 es6</div><div class="line">[a, b] = [b, a];</div></pre></td></tr></table></figure>
</li>
<li><p>字符串的字节长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 方式一 将双字节字符替换为2个单字节字母</div><div class="line">str.replace(/[\u0931-\uFFE5]/g, &apos;aa&apos;).length;</div><div class="line"></div><div class="line">// 方式二 把中文替换成两个a</div><div class="line">str.replace(/[^\x00-\xff]/g, &apos;aa&apos;); </div><div class="line"></div><div class="line">// 方式三 循环遍历</div><div class="line">function getStrLength (str) &#123;</div><div class="line">    // 获得字符串实际长度，中文2，英文1</div><div class="line">    var realLength = 0, len = str.length, charCode = -1;</div><div class="line">    for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">        charCode = str.charCodeAt(i);</div><div class="line">        if (charCode &gt;= 0 &amp;&amp; charCode &lt;= 128)</div><div class="line">            realLength += 1;</div><div class="line">        else &#123;</div><div class="line">            realLength += 2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return realLength;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串反转</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.split(&apos;&apos;).reverse().join(&apos;&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>数组去重</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 方式一 使用es6的set</div><div class="line">arr = Array.from(new Set(arr));</div><div class="line"></div><div class="line">// 方式二 使用indexOf和lastIndexOf判断</div><div class="line">function uniqueArray(arr) &#123;</div><div class="line">    for(let i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">        let start = arr.indexOf(arr[i]);</div><div class="line">        let end = arr.lastIndexOf(arr[i]);</div><div class="line">        while(start !== end) &#123;</div><div class="line">            arr.splice(end, 1);</div><div class="line">            end = arr.lastIndexOf(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>数组扁平化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 方式一 递归</div><div class="line">function flat(array, newarray) &#123;</div><div class="line">    for (var i = 0; i &lt; array.length; i++) &#123;</div><div class="line">        if(typeof array[i] == &quot;number&quot;)&#123;</div><div class="line">            //类型为number, 则放入到新数组中</div><div class="line">            newarray.push(array[i]);</div><div class="line">        &#125; else &#123;</div><div class="line">            //否则, 继续分解</div><div class="line">            flat(array[i], newarray);</div><div class="line">        &#125;       </div><div class="line">    &#125;      </div><div class="line">&#125;</div><div class="line">var array = [1,[3,[4],[5,[6,7]],8],[9,[10]]];</div><div class="line">var newarray = [];</div><div class="line">flat(array, newarray);</div><div class="line"></div><div class="line">// 方式二 toString()，但是条件受限 </div><div class="line">var array = [1,[3,[4],[5,[6,7]],8],[9,[10]]];</div><div class="line">var newarray = array.toString().split(&apos;,&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>// 方式三 使用es6的generator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var array = [1,[3,[4],[5,[6,7]],8],[9,[10]]];</div><div class="line">function* iterTree(tree) &#123;</div><div class="line">  if (Array.isArray(tree)) &#123;</div><div class="line">    for(let i=0; i &lt; tree.length; i++) &#123;</div><div class="line">      yield* iterTree(tree[i]);</div><div class="line">    &#125;</div><div class="line">  &#125; else &#123;</div><div class="line">    yield tree;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">for(let x of iterTree(array)) &#123;</div><div class="line">  console.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>同一事件有多个监听方法，可分别删除监听方法</p>
<p>  当同一个对象使用.onclick的写法触发多个方法的时候，后一个方法会把前一个方法覆盖掉。而用addEventListener事件监听则不会有覆盖的现象，支持多重加载与冒泡捕获，每个绑定的事件都会被执行。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// onclick绑定事件</div><div class="line">window.onload = function() &#123;</div><div class="line">    var btn = document.getElementById(&quot;yuanEvent&quot;);</div><div class="line">    btn.onclick = function() &#123;</div><div class="line">        alert(&quot;第一个事件&quot;);</div><div class="line">    &#125;;</div><div class="line">    btn.onclick = function() &#123;</div><div class="line">        alert(&quot;第二个事件&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">// addEventListener绑定事件</div><div class="line">var eventOne = function() &#123;</div><div class="line">    alert(&quot;第一个监听事件&quot;);</div><div class="line">&#125;</div><div class="line">function eventTwo() &#123;</div><div class="line">    alert(&quot;第二个监听事件&quot;);</div><div class="line">&#125;</div><div class="line">window.onload = function() &#123;</div><div class="line">    var btn = document.getElementById(&quot;yuanEvent&quot;);</div><div class="line">    // addEventListener：绑定函数</div><div class="line">    btn.addEventListener(&quot;click&quot;, eventOne); </div><div class="line">    btn.addEventListener(&quot;click&quot;, eventTwo);</div><div class="line">    // removeEventListener：取消绑定</div><div class="line">    btn.removeEventListener(&quot;click&quot;,eventOne); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  解决onClick的写法触发后一个方法会把前一个方法覆盖的问题。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//统计添加事件监听的个数，0作为预留位</div><div class="line">var eventHandlesCounter = 1;</div><div class="line">function addEvent(obj, evt, fn) &#123;</div><div class="line">    if(!fn.__EventID) &#123;</div><div class="line">        fn.__EventID = eventHandlesCounter++;</div><div class="line">    &#125;</div><div class="line">    if(!obj.__EventHandles) &#123;</div><div class="line">        obj.__EventHandles = [];</div><div class="line">    &#125;</div><div class="line">    if(!obj.__EventHandles[evt]) &#123;</div><div class="line">        obj.__EventHandles[evt] = [];</div><div class="line">        // 这里记录已经使用onClick直接绑定的事件</div><div class="line">        if(obj[&quot;on&quot; + evt] instanceof Function) &#123;</div><div class="line">            obj[&quot;on&quot; + evt].__EventID = 0;</div><div class="line">            obj.__EventHandles[evt][0] = obj[&quot;on&quot; + evt];</div><div class="line">        &#125;</div><div class="line">        obj[&quot;on&quot; + evt] = handleEvents;</div><div class="line">    &#125;</div><div class="line">    obj.__EventHandles[evt][fn.__EventID] = fn;</div><div class="line">  </div><div class="line">    function handleEvents() &#123;</div><div class="line">        var fns = obj.__EventHandles[evt];</div><div class="line">        for (var i = 0; i &lt; fns.length; i++) &#123;</div><div class="line">            if(fns[i] instanceof Function) &#123;</div><div class="line">                fns[i].call(this);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function delEvent(obj, evt, fn) &#123;</div><div class="line">    if(!obj.__EventHandles || !obj.__EventHandles[evt] || !fn.__EventID)&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    if(obj.__EventHandles[evt][fn.__EventID] == fn)&#123;</div><div class="line">       delete obj.__EventHandles[evt][fn.__EventID];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>img标签，获取图片的base64编码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        function getBase64Image(img) &#123;</div><div class="line">            var canvas = document.createElement(&quot;canvas&quot;);</div><div class="line">            canvas.width = img.width;</div><div class="line">            canvas.height = img.height;</div><div class="line">            var ctx = canvas.getContext(&quot;2d&quot;);</div><div class="line">            ctx.drawImage(img, 0, 0, img.width, img.height);</div><div class="line">            var dataURL = canvas.toDataURL(&quot;image/png&quot;);</div><div class="line">            return dataURL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        function main() &#123;</div><div class="line">            var img = document.createElement(&apos;img&apos;);</div><div class="line">            // 注意这个图片需要是同源的</div><div class="line">            img.src = &apos;./1.png&apos;;</div><div class="line">            img.onload =function() &#123;</div><div class="line">                var data = getBase64Image(img);</div><div class="line">                console.log(&quot;图片的base64编码：&quot;, data);</div><div class="line">            &#125;</div><div class="line">            document.body.appendChild(img);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        main()</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>实现String.prototype.trim函数的实现</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 使用正则表达式</div><div class="line">String.prototype.trim = function() &#123; </div><div class="line">    return this.replace(/(^\s*)|(\s*$)/g, &quot;&quot;); </div><div class="line">&#125; </div><div class="line">String.prototype.trimLeft = function() &#123; </div><div class="line">    return this.replace(/(^\s*)/g, &quot;&quot;); </div><div class="line">&#125; </div><div class="line">String.prototype.trimRight = function() &#123; </div><div class="line">    return this.replace(/(\s*$)/g, &quot;&quot;); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现一个函数fn，只有一个参数，实现参数求和功能，例如console.log(parseInt(fn(0)(1)(2)(3)(4)(5)))，可以在控制台输出15。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function fn(value) &#123;</div><div class="line">    function returnFn(value2) &#123;</div><div class="line">        value = value + value2;</div><div class="line">        return returnFn;</div><div class="line">    &#125;</div><div class="line">    returnFn.toString = returnFn.valueOf = function() &#123;</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">    return returnFn;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用基于组件的开发模式，开发一个转盘抽奖组件，要求组件功能有：①可以设置旋转圈数②组件可复用③其它自行设计。设计对应的dom，css及js代码，最多可使用jQuery和zepto辅助。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;title&gt;简单转盘效果&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        #RotateDiv, #RotateDiv2 &#123;</div><div class="line">            width: 50px;</div><div class="line">            height: 50px;</div><div class="line">            color: #fff;</div><div class="line">            text-align: center;</div><div class="line">            line-height: 50px;</div><div class="line">            background: #444;</div><div class="line">            position: relative;</div><div class="line">            margin: 20px;</div><div class="line">            /* 指针效果 */</div><div class="line">            border-radius: 50px 0 50px 50px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;简单转盘：&lt;/p&gt;</div><div class="line">    &lt;p&gt; &lt;button id=&quot;RotateBtn&quot;&gt;开始抽奖&lt;/button&gt; &lt;/p&gt;</div><div class="line">    &lt;div id=&quot;RotateDiv&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;p&gt;默认转动：&lt;/p&gt;</div><div class="line">    &lt;p&gt; &lt;button id=&quot;RotateBtn2&quot;&gt;开始抽奖2&lt;/button&gt; &lt;/p&gt;</div><div class="line">    &lt;div id=&quot;RotateDiv2&quot;&gt;&lt;/div&gt;</div><div class="line"> </div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        window.iRotate = (function(w, d)&#123;</div><div class="line">            function R(obj, json)&#123;</div><div class="line">                this.obj = (typeof obj === &apos;object&apos;) ? obj : d.querySelector(obj);</div><div class="line">                this.startTime = Date.now();</div><div class="line">                this.timer = null;</div><div class="line">                this.rotate(json);</div><div class="line">            &#125;;</div><div class="line">            R.prototype = &#123;</div><div class="line">                rotate: function(json) &#123;</div><div class="line">                    var self = this;</div><div class="line">                    var times = json[&apos;time&apos;] || 1000;</div><div class="line">                    clearInterval(self.timer);</div><div class="line">                    self.timer = setInterval(function() &#123;</div><div class="line">                        var changeTime = Date.now();</div><div class="line">                        // 当前消耗时间</div><div class="line">                        var timing = Math.min(times, changeTime - self.startTime);</div><div class="line">                        var tweenFun = Tween[json[&apos;easing&apos;] || &apos;easeOut&apos;];</div><div class="line">                        // 根据当前时间计算转动角度</div><div class="line">                        var value = tweenFun(</div><div class="line">                                        timing,</div><div class="line">                                        +json[&apos;start&apos;] || 0,</div><div class="line">                                        json[&apos;end&apos;] - (+json[&apos;start&apos;] || 0),</div><div class="line">                                        times</div><div class="line">                                    );</div><div class="line">                        self.obj.style[&apos;transform&apos;] = &apos;rotate(&apos; + value%360 + &apos;deg)&apos;;</div><div class="line">                        self.obj.style[&apos;-webkit-transform&apos;] = &apos;rotate(&apos; + value%360 + &apos;deg)&apos;;</div><div class="line">                        self.obj.setAttribute(&apos;data-rotate&apos;, value%360);</div><div class="line">                        // 停止旋转</div><div class="line">                        if(timing == times)&#123;</div><div class="line">                            clearInterval(self.timer);</div><div class="line">                            json.callback &amp;&amp; json.callback.call(self.obj);</div><div class="line">                        &#125;</div><div class="line">                    &#125;, 10)</div><div class="line">                &#125;,</div><div class="line">                stop: function(fn) &#123;</div><div class="line">                    clearInterval(this.timer);</div><div class="line">                    fn &amp;&amp; fn.call(this.obj);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        return R;</div><div class="line">    &#125;)(window, document);</div><div class="line"></div><div class="line">    var Tween = &#123;</div><div class="line">        // 匀速转动</div><div class="line">        linear: function (t, b, c, d)&#123;</div><div class="line">            return c*t/d + b;</div><div class="line">        &#125;,</div><div class="line">        // 逐渐变慢</div><div class="line">        easeOut: function(t, b, c, d)&#123;</div><div class="line">            return -c *(t/=d)*(t-2) + b;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    (function()&#123;</div><div class="line">        // 点击转动</div><div class="line">        var off = true;</div><div class="line">        RotateBtn.onclick = function()&#123;</div><div class="line">            if(!off) return; // 判断是否在旋转</div><div class="line">            off = false;</div><div class="line">            new iRotate(&apos;#RotateDiv&apos;, &#123;</div><div class="line">                end: 45 + 1800,</div><div class="line">                time: 5000,</div><div class="line">                callback : function()&#123; // 回调函数</div><div class="line">                    this.innerHTML = this.getAttribute(&apos;data-rotate&apos;);</div><div class="line">                    off = true;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        //默认转动</div><div class="line">        var r = null;</div><div class="line">        var off2 = true;</div><div class="line">        function rotate2()&#123; // 递归持续旋转</div><div class="line">            r = new iRotate(&apos;#RotateDiv2&apos;, &#123;</div><div class="line">                start: 0,</div><div class="line">                end: 360,</div><div class="line">                time: 1000,</div><div class="line">                easing: &apos;linear&apos;,</div><div class="line">                callback: function()&#123;</div><div class="line">                    rotate2();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        rotate2();</div><div class="line">        RotateBtn2.onclick = function()&#123;</div><div class="line">            if(!off2) return; // 判断是否在旋转</div><div class="line">            off2 = false;</div><div class="line">            r.stop(); // 停止之前的旋转</div><div class="line">            new iRotate(&apos;#RotateDiv2&apos;, &#123;</div><div class="line">                start: RotateDiv2.getAttribute(&apos;data-rotate&apos;), // 如果不加这个会从0角度开始旋转，有抖动</div><div class="line">                end: 65 + 1800,</div><div class="line">                time: 5000,</div><div class="line">                callback: function()&#123; // 回调函数</div><div class="line">                    this.innerHTML = this.getAttribute(&apos;data-rotate&apos;);</div><div class="line">                    off2 = true;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
  <img src="/2017/08/31/findjob-javascript-code/turntable.png" width="400" title="效果图">
</li>
<li><p>股票利润：假如一个数组中存储了一个股票在一天交易窗口内各时间点的股票价格（正整数），只允许一次买入和一次卖出，计算出通过卖出和买入可以得到的最大利润。</p>
<p>  思路：只要找出输入数组中最大的差值即可。遍历一遍数组，求出每个元素前面的最小值，每个元素与对应最小值的差即为该元素对应的收益，所有元素收益的最大值就是所求值。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function maxProfit(prices) &#123;</div><div class="line">    var maxProfit = -1;</div><div class="line">    if (!prices || prices.length === 0) &#123;</div><div class="line">        return maxProfit;</div><div class="line">    &#125;</div><div class="line">    var minPrices = [];</div><div class="line">    for(var i = 0; i &lt; prices.length; i++) &#123;</div><div class="line">        if (i === 0) &#123;</div><div class="line">            // 第一个元素前的最小值是自己</div><div class="line">            minPrices.push(prices[i]);</div><div class="line">        &#125; else &#123;</div><div class="line">            /*</div><div class="line">            当前元素如果大于前一个最小值，则当前元素最小值为前一个的最小值，否则当前元素的最小值为当前元素</div><div class="line">            */</div><div class="line">            minPrices.push(minPrices[i-1] &lt;= prices[i] ? minPrices[i-1] : prices[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    for(var i = 0; i &lt; prices.length; i++) &#123;</div><div class="line">        if (prices[i] - minPrices[i] &gt; maxProfit) &#123;</div><div class="line">            maxProfit = prices[i] - minPrices[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return maxProfit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现图片墙的效果，要求所有图片显示的宽度相同，整个图片墙的高度尽可能小。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        * &#123;</div><div class="line">            margin:0;</div><div class="line">            padding:0;</div><div class="line">        &#125;</div><div class="line">        #main &#123;</div><div class="line">            position:relative;</div><div class="line">        &#125;</div><div class="line">        .box &#123;</div><div class="line">            padding:15px 0 0 15px;</div><div class="line">            float:left;</div><div class="line">        &#125;</div><div class="line">        .pic &#123;</div><div class="line">            padding:10px;</div><div class="line">            border:1px solid #ccc;</div><div class="line">            border-radius:5px;</div><div class="line">            box-shadow:0 0 5px #ccc;</div><div class="line">            background:#FFF;</div><div class="line">        &#125;</div><div class="line">        img &#123;</div><div class="line">            width:236px; // 固定</div><div class="line">            height:auto;</div><div class="line">            opacity:1;</div><div class="line">        &#125;</div><div class="line">        .pic:hover img &#123;</div><div class="line">            opacity:0.7;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">// 如果没有加载,就可以加载</span></div><div class="line">        <span class="keyword">var</span> loading = <span class="literal">false</span>; </div><div class="line">        <span class="comment">// 发起请求加载图片</span></div><div class="line">        putDate();</div><div class="line">        <span class="comment">// 滚轮加载, 符合条件时, 当滚轮滚到最后一个div的一半时请求新的数据</span></div><div class="line">        <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (getMore()) &#123;</div><div class="line">                <span class="comment">// 这里是 ajax 请求, 如果没有加载,就可以加载, 加载完成后就设置为false未加在状态</span></div><div class="line">                <span class="keyword">if</span> (!loading) &#123;</div><div class="line">                    loading = <span class="literal">true</span>;</div><div class="line">                    <span class="comment">// 发起请求加载图片</span></div><div class="line">                    putDate();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 排序方法</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">parent, box</span>) </span>&#123;</div><div class="line">            <span class="comment">// 获取大盒子. 获取小盒子</span></div><div class="line">            <span class="keyword">let</span> parentBox = <span class="built_in">document</span>.getElementById(parent);</div><div class="line">            <span class="keyword">let</span> theBox = <span class="built_in">document</span>.getElementsByClassName(box);</div><div class="line">            <span class="keyword">if</span> (theBox.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 计算大盒子里能放几列小盒子</span></div><div class="line">            <span class="keyword">let</span> mainWidth = <span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line">            <span class="keyword">let</span> contentWidth = theBox[<span class="number">0</span>].offsetWidth;</div><div class="line">            <span class="keyword">let</span> col = <span class="built_in">Math</span>.floor(mainWidth/contentWidth);</div><div class="line">            <span class="comment">// 给大盒子设置宽度</span></div><div class="line">            parentBox.style.cssText = <span class="string">`width: <span class="subst">$&#123;contentWidth*col&#125;</span>px; margin: 0 auto;`</span>;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            计算 哪个盒子所在的位置的 offsetTop 最小</div><div class="line">            创建一个数组, 把现在屏幕宽度能设置的列数,比如最大时4列, 把前4 个div的高度放进数组中,</div><div class="line">            然后超过 4 的开始计算,</div><div class="line">            1: 数组中谁最小,</div><div class="line">            2: 获取他的值 作为这个将要定位的div 的 top值, 下标*contentWidth 作为 left的定位</div><div class="line">            3: 更改数组, 把这个div的 offsetHeight + 最小值 更新这个值</div><div class="line">            */</div><div class="line">            <span class="keyword">let</span> arr = [];</div><div class="line">            [...theBox].map((item,index) =&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (index &lt; col) &#123;</div><div class="line">                    arr.push(item.offsetHeight)</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 获取最小值</span></div><div class="line">                    <span class="keyword">let</span> getMinNum = <span class="built_in">Math</span>.min.apply( <span class="literal">null</span>, arr);</div><div class="line">                    <span class="comment">// 获取最小值所在的Index</span></div><div class="line">                    <span class="keyword">let</span> getMinNumIndex = arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> item === getMinNum</div><div class="line">                    &#125;);</div><div class="line">                    theBox[index].style.cssText = <span class="string">`position: absolute; top: <span class="subst">$&#123;getMinNum&#125;</span>px; left: <span class="subst">$&#123;getMinNumIndex*contentWidth&#125;</span>px`</span>;</div><div class="line">                    arr[getMinNumIndex] += theBox[index].offsetHeight;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">        继续加载的条件, 当滚动到最后一个div的中间位置, 就加载</div><div class="line">        即 div.offsetTop + div.offsetHeight/2 小于 scrollTop(滚动到上面看不到的距离) + clientHeight (现在可视区域的高度) </div><div class="line">        */</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getMore</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> theBox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>);</div><div class="line">            <span class="keyword">let</span> len = theBox.length;</div><div class="line">            <span class="keyword">let</span> ele = theBox[len - <span class="number">1</span> ];</div><div class="line">            <span class="comment">// 获取div的 offsetTop ,offsetHeight</span></div><div class="line">            <span class="keyword">let</span> divTop = ele.offsetTop + ele.offsetHeight/<span class="number">2</span> ;</div><div class="line">            <span class="comment">// 获取 scrollTop(滚动到上面看不到的距离) 可能有iframe吧</span></div><div class="line">            <span class="keyword">let</span> scrollT = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</div><div class="line">            <span class="comment">// 获取 clientHeight (现在可视区域的高度)</span></div><div class="line">            <span class="keyword">let</span> clitH = <span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">            <span class="keyword">return</span> divTop &lt; scrollT + clitH;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//后台请求数据</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">putDate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// var xhr = ajaxContent();</span></div><div class="line">            <span class="comment">// xhr.onreadystatechange = function()&#123;</span></div><div class="line">            <span class="comment">//  if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span></div><div class="line">            <span class="comment">//      var res = JSON.parse(xhr.responseText);</span></div><div class="line">            <span class="comment">//      addImages(res);</span></div><div class="line">            <span class="comment">//  &#125;</span></div><div class="line">            <span class="comment">// &#125;</span></div><div class="line">            <span class="comment">// xhr.open('get','../config/data.js',true);</span></div><div class="line">            <span class="comment">// xhr.send();</span></div><div class="line">            <span class="keyword">var</span> res = [&#123;<span class="string">"src"</span>:<span class="string">"1.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"2.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"3.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"4.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"5.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"6.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"7.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"8.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"9.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"10.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"11.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"12.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"13.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"14.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"15.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"16.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"17.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"18.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"19.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"20.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"21.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"22.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"23.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"24.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"25.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"26.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"27.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"28.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"29.jpg"</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">"30.jpg"</span>&#125;];</div><div class="line">            addImages(res);</div><div class="line">            </div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">addImages</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oparent = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line">                res.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> url = item.src;</div><div class="line">                    <span class="keyword">var</span> str =<span class="string">'&lt;div class="pic"&gt;&lt;img src="imgp/'</span>+url+<span class="string">'" onload="waterfall(\'main\',\'box\')"&gt;&lt;/div&gt;'</span>;</div><div class="line">                    <span class="keyword">var</span> mdiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">                    mdiv.setAttribute(<span class="string">'class'</span>,<span class="string">'box'</span>)</div><div class="line">                    mdiv.innerHTML = str;</div><div class="line">                    oparent.appendChild(mdiv);</div><div class="line">                    <span class="comment">// 请求一次做一次定位</span></div><div class="line">                    waterfall(<span class="string">'main'</span>,<span class="string">'box'</span>);</div><div class="line">                    loading = <span class="literal">false</span>;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 封装ajax请求</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ajaxContent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                xhr = <span class="keyword">new</span> ActiveXObjext(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> xhr;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法基础]]></title>
      <url>https://zhulichao.github.io/2017/08/31/findjob-algorithm/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>首先要知道<strong>完全二叉树</strong>的概念：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</p>
<img src="/2017/08/31/findjob-algorithm/CompleteBinaryTree.png" title="完全二叉树">
<p>堆可以视为一棵完全的二叉树，大顶堆中每个父节点的元素值都大于等于其孩子结点的值，小顶堆中每个父节点的元素值都小于等于其孩子结点的值。</p>
<p><strong>堆排序不需要大量的递归或者多维的暂存数组，这对于数据量非常巨大的序列是合适的，比如超过数百万条记录。</strong>因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。如果要取大量数据中最大或最小的几个，这种时候用堆排比较好，取出要求的前几个最大元素即可停止了。</p>
<p><strong>建堆思路：</strong>从最后一个非叶子节点开始，按照从下到上、从右到左的顺序进行迭代，让它（下标记为x）同其孩子节点（下标：2x、2x+1）比较，如果它小于任何一个孩子节点，则说明这个子树是符合堆规则的；否则把它同其较小的子节点交换。由于交换后，以这个节点（x）会破坏原来孩子的堆特性，因此这里有一个子迭代，让它继续上面的行为，直到找到一个合适的位置落脚。如此，直到根节点，就可以保证整颗完全树具备堆的性质。</p>
<p><strong>堆排序思路：</strong>对于一个最小堆，去掉它的堆顶元素，然后以最末端元素移动到堆顶位置，然后进行调整，使之再次成为最小堆。如此迭代，直到没有剩余的元素，依次取出来的顺序就是实现排序的过程。</p>
<p>js实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">function adjustHeap(arr, len, first) &#123;</div><div class="line">    var sortedFlag = true;</div><div class="line">    var i = first ? Math.floor(len/2-1) : 0;</div><div class="line">    while(i &gt;= 0) &#123;</div><div class="line">        var j = i;</div><div class="line">        i--;</div><div class="line">        var flag = true;</div><div class="line">        while(flag) &#123;</div><div class="line">            flag = false;</div><div class="line">            var largePos;</div><div class="line">            if (j*2+1 &lt; len) &#123;</div><div class="line">                largePos = j*2+1;</div><div class="line">            &#125;</div><div class="line">            if ( (j*2+2) &lt; len &amp;&amp; arr[j*2+2] &gt; arr[largePos]) &#123;</div><div class="line">                largePos = j*2+2;</div><div class="line">            &#125;   </div><div class="line">            if (largePos &amp;&amp; arr[j] &lt; arr[largePos] ) &#123;</div><div class="line">                flag = true;</div><div class="line">                var temp = arr[j];</div><div class="line">                arr[j] = arr[largePos];</div><div class="line">                arr[largePos] = temp;</div><div class="line">                j = largePos;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function heapSort(arr) &#123;</div><div class="line">    var first = true;</div><div class="line">    for(var i= arr.length; i &gt; 0; i--) &#123;</div><div class="line">        adjustHeap(arr, i, first);</div><div class="line">        first = false;</div><div class="line">        var temp = arr[0];</div><div class="line">        arr[0] = arr[i-1];</div><div class="line">        arr[i-1] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var arr = [16, 4, 10, 14, 7, 9, 3, 2, 8, 1];</div><div class="line">heapSort(arr);</div></pre></td></tr></table></figure></p>
<h2 id="100万个数取最大的5个，要求尽量提升性能"><a href="#100万个数取最大的5个，要求尽量提升性能" class="headerlink" title="100万个数取最大的5个，要求尽量提升性能"></a>100万个数取最大的5个，要求尽量提升性能</h2><p>思路一</p>
<p>用一个长度为5的数组存结果，对100万个数进行一遍扫描，先存入前5个元素从小到大插入结果数组，对于后面的每个元素，如果小于第一个元素则继续，如果大于第五个元素则删除第一个元素将当前元素插入，如果大于第一个元素小于第五个元素，找到元素所在位置插入并删除最小的元素，这样扫描一遍就可以找到最大的5个元素。</p>
<p>思路二</p>
<p>使用快速排序的思路，在递归时放弃处理值小的那部分，每次都是递归处理值大的部分，直到要处理的元素个数为5个停止。</p>
<p>思路三</p>
<p>查找1000个数中最大或最小的10个，这种时候用堆排比较好。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function bubbleSort(arr) &#123;</div><div class="line">    for(var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">        var pos = i;</div><div class="line">        var min = arr[i];</div><div class="line">        for( var j = i+1; j &lt; arr.length; j++) &#123;</div><div class="line">            if (min &gt; arr[j]) &#123;</div><div class="line">                min = arr[j];</div><div class="line">                pos = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        var temp = arr[pos];</div><div class="line">        arr[pos] = arr[i];</div><div class="line">        arr[i] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const arr = [19, 32, 35, 40, 69, 74, 84, 91, 96, 98];</div><div class="line">bubbleSort(arr);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Router-简单原理]]></title>
      <url>https://zhulichao.github.io/2017/08/27/findjob-react-router/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下内容主要参考自<br><a href="http://www.cnblogs.com/wyaocn/p/5805777.html" target="_blank" rel="external">深入理解 react-router 路由系统</a><br><a href="https://segmentfault.com/a/1190000004527878" target="_blank" rel="external">react-router的实现原理</a><br><a href="http://web.jobbole.com/86407/" target="_blank" rel="external">前端路由实现与 react-router 源码分析</a></p>
<ul>
<li><p>react-router怎么实现页面局部刷新和url变化的</p>
<p>  路由的原理并不复杂，即保证视图和URL的同步，只要URL一致，那么返回的UI界面总是相同的。从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。</p>
<p>  在HTML5的historyAPI出现之前，前端的路由都是通过hash来实现的，hash能兼容低版本的浏览器。Web服务并不会解析hash，也就是说#后的内容Web服务都会自动忽略，但是JavaScript是可以通过window.location.hash读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。</p>
<p>  history是HTML5才有的新API，可以用来操作浏览器的session history(会话历史)。基于history来实现的路由可以和最初的路径规则一样，即不带#。用户可能都察觉不到该访问地址是Web服务实现的路由还是前端实现的路由。</p>
<p>  react-router路由系统的核心是history对象，它的很多特性也与React保持了一致，比如声明式组件、组件嵌套、状态机特性等，毕竟它就是基于React构建并且为之所用的。路由进入时装载匹配的组件离开时卸载该组件的策略可以做到合理利用资源，不会一下把所有的组件都装载进来使内存占用飙升，也不会离开时没有卸载而时内存泄漏，每一个路由中声明的组件在渲染之前都会被传入一些props，主要包括history对象和location对象，这两个对象同时存在于路由组件的context中，还可以通过React的context API在组件的子级组件中获取到这两个对象。</p>
<p>  <strong>点击Link后路由系统发生了什么？</strong></p>
<p>  Link组件最终会渲染为HTML的a标签，它的to、query、hash属性会被组合在一起并渲染为href属性。虽然Link被渲染为超链接，但在内部实现上使用脚本拦截了浏览器的默认行为，然后调用了history.pushState方法。history包中底层的pushState方法支持传入两个参数state和path，在函数体内又将这两个参数传输到createLocation方法中，返回location。系统会将这个location对象作为参数传入到TransitionTo方法中，然后调用window.location.hash或者window.history.pushState()修改了应用的URL，这取决于你创建history对象的方式。同时会触发history.listen中注册的事件监听器。</p>
<p>  接下来请看路由系统内部是如何修改UI的。在得到了新的location对象后，系统内部的matchRoutes方法会匹配出Route组件树中与当前location对象匹配的一个子集，并且得到了nextState。在Router组件的componentWillMount生命周期方法中调用了history.listen(listener)方法。listener会在上述matchRoutes方法执行成功后执行listener(nextState)，nextState对象里面包含location、routes、params、components属性，接下来执行this.setState(nextState)就可以实现重新渲染Router组件。</p>
<p>  <strong>点击浏览器的前进和后退按钮发生了什么？</strong></p>
<p>  前进与后退的实现，是通过监听popstate以及hashchange的事件，当前进或后退url更新时，触发这两个事件的回调函数。可以简单地把web浏览器的历史记录比做成一个仅有入栈操作的栈，当用户浏览器到某一个页面时将该文档存入到栈中，点击后退或前进按钮时移动指针到history栈中对应的某一个文档。在传统的浏览器中，文档都是从服务端请求过来的。不过现代的浏览器一般都会支持两种方式用于动态的生成并载入页面。</p>
<p>  第一种方式</p>
<p>  location.hash与hashchange事件，这也是比较简单并且兼容性也比较好的一种方式，会在浏览器的URL中添加一个#号，对应history包中的createHashHistory方法，出于兼容性的考虑（ie8+），路由系统内部将这种方式作为创建history对象的默认方法。详细请看下面几点：</p>
<blockquote>
<p>使用hashchange事件来监听window.location.hash的变化<br>hash发生变化浏览器会更新URL，并且在history栈中产生一条记录<br>路由系统会将所有的路由信息都保存到location.hash中<br>在react-router内部注册了window.addEventListener(‘hashchange’, listener, false)事件监听器<br>listener内部可以通过hash fragment获取到当前URL对应的location对象<br>接下来的过程与点击<code>&lt;Link/&gt;</code>时保持一致</p>
</blockquote>
<p>  当然，你会想到不仅仅在前进和后退会触发hashchange事件，应该说每次路由操作都会有hash的变化。确实如此，为了解决这个问题，路由系统内部通过判断currentLocation与nextLocation是否相等来处理该问题。不过，从它的实现原理上来看，由于路由操作hash发生变化而重复调用transitonTo(location)这一步确实无可避免。</p>
<p>  第二种方式</p>
<p>  history.pushState与popstate事件，新的HTML5规范中还提出了一个相对复杂但更加健壮的方式来解决该问题，对应history包中的createBrowserHistory方法，使用这种方式进行路由需要服务端要做一个路由的配置将所有请求重定向到入口文件位置，否则在用户刷新页面时会报404错误。详细请看下面几点：</p>
<blockquote>
<p>可以通过window.history.pushState(state, title, path)方法来改变浏览器的URL，实际上该方法同时在history栈中存入了state对象<br>在浏览器前进和后退时触发popstate事件，然后注册window.addEventListener(‘popstate’, listener, false)，并且可以在事件对象中取出对应的state对象<br>state对象可以存储一些恢复该页面所需要的简单信息，state会作为属性存储在location对象中，这样你就可以在组件中通过location.state来获取到<br>在react-router内部将该对象存储到了sessionStorage中，也就是上图中的saveState操作<br>接下来的操作与第一种方式一致</p>
</blockquote>
<p>  实际上，上面提到的state对象不仅仅在第二种路由方式中可以使用。react-router内部做了polyfill，统一了API。在使用第一种方式创建路由时你会发现URL中多了一个类似_key=s1gvrm的query，这个_key就是为react-router内部在sessionStorage中读取state对象所提供的。</p>
</li>
<li><p>react-router中的几类history</p>
<blockquote>
<p>老浏览器的history: 主要通过hash来实现，对应createHashHistory<br>高版本浏览器: 通过html5里面的history，对应createBrowserHistory<br>node环境下: 主要存储在memeory里面，对应createMemoryHistory</p>
</blockquote>
<p>  上面针对不同的环境提供了三个API，但是三个API有一些共性的操作，将其抽象了一个公共的文件createHistory，createHashHistory、createBrowserHistory、createMemoryHistory只是覆盖其中的某些方法而已。需要注意的是，这里的location跟浏览器原生的location是不相同的，最大的区别就在于里面多了key字段，history内部通过key来进行location的操作。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 内部的抽象实现</div><div class="line">function createHistory(options=&#123;&#125;) &#123;</div><div class="line">  ...</div><div class="line">  return &#123;</div><div class="line">    listenBefore, // 内部的hook机制，可以在location发生变化前执行某些行为，AOP的实现</div><div class="line">    listen, // location发生改变时触发回调</div><div class="line">    transitionTo, // 执行location的改变</div><div class="line">    push, // 改变location</div><div class="line">    replace,</div><div class="line">    go,</div><div class="line">    goBack,</div><div class="line">    goForward,</div><div class="line">    createKey, // 创建location的key，用于唯一标示该location，是随机生成的</div><div class="line">    createPath,</div><div class="line">    createHref,</div><div class="line">    createLocation, // 创建location</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  执行URL前进</p>
<blockquote>
<p>createBrowserHistory: pushState、replaceState<br>createHashHistory: location.hash=<em>*</em>、location.replace()<br>createMemoryHistory: 在内存中进行历史记录的存储</p>
</blockquote>
<p>  伪代码如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// createBrowserHistory(HTML5)中的前进实现</div><div class="line">function finishTransition(location) &#123;</div><div class="line">  ...</div><div class="line">  const historyState = &#123; key &#125;;</div><div class="line">  ...</div><div class="line">  if (location.action === &apos;PUSH&apos;) ) &#123;</div><div class="line">    window.history.pushState(historyState, null, path);</div><div class="line">  &#125; else &#123;</div><div class="line">    window.history.replaceState(historyState, null, path)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// createHashHistory的内部实现</div><div class="line">function finishTransition(location) &#123;</div><div class="line">  ...</div><div class="line">  if (location.action === &apos;PUSH&apos;) ) &#123;</div><div class="line">    window.location.hash = path;</div><div class="line">  &#125; else &#123;</div><div class="line">    window.location.replace(</div><div class="line">    window.location.pathname + window.location.search + &apos;#&apos; + path</div><div class="line">  );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// createMemoryHistory的内部实现</div><div class="line">entries = [];</div><div class="line">function finishTransition(location) &#123;</div><div class="line">  ...</div><div class="line">  switch (location.action) &#123;</div><div class="line">    case &apos;PUSH&apos;:</div><div class="line">      entries.push(location);</div><div class="line">      break;</div><div class="line">    case &apos;REPLACE&apos;:</div><div class="line">      entries[current] = location;</div><div class="line">      break;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  检测URL回退</p>
<blockquote>
<p>createBrowserHistory: popstate<br>createHashHistory: hashchange<br>createMemoryHistory: 因为是在内存中操作，跟浏览器没有关系，不涉及UI层面的事情，所以可以直接进行历史信息的回退</p>
</blockquote>
<p>  伪代码实现如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// createBrowserHistory(HTML5)中的后退检测</div><div class="line">function startPopStateListener(&#123; transitionTo &#125;) &#123;</div><div class="line">  function popStateListener(event) &#123;</div><div class="line">    ...</div><div class="line">    transitionTo( getCurrentLocation(event.state) );</div><div class="line">  &#125;</div><div class="line">  addEventListener(window, &apos;popstate&apos;, popStateListener);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// createHashHistory的后退检测</div><div class="line">function startPopStateListener(&#123; transitionTo &#125;) &#123;</div><div class="line">  function hashChangeListener(event) &#123;</div><div class="line">    ...</div><div class="line">    transitionTo( getCurrentLocation(event.state) );</div><div class="line">  &#125;</div><div class="line">  addEventListener(window, &apos;hashchange&apos;, hashChangeListener);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// createMemoryHistory的内部实现</div><div class="line">function go(n) &#123;</div><div class="line">  if (n) &#123;</div><div class="line">    ...</div><div class="line">    current += n;</div><div class="line">    const currentLocation = getCurrentLocation();</div><div class="line">    // change action to POP</div><div class="line">    history.transitionTo(&#123; ...currentLocation, action: POP &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  为了维护state的状态，将其存储在sessionStorage里面:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// createBrowserHistory/createHashHistory中state的存储</div><div class="line">function saveState(key, state) &#123;</div><div class="line">  ...</div><div class="line">  window.sessionStorage.setItem(createKey(key), JSON.stringify(state));</div><div class="line">&#125;</div><div class="line">function readState(key) &#123;</div><div class="line">  ...</div><div class="line">  json = window.sessionStorage.getItem(createKey(key));</div><div class="line">  return JSON.parse(json);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// createMemoryHistory仅仅在内存中，所以操作比较简单</div><div class="line">const storage = createStateStorage(entries);</div><div class="line">function saveState(key, state) &#123;</div><div class="line">  storage[key] = state;</div><div class="line">&#125;</div><div class="line">function readState(key) &#123;</div><div class="line">  return storage[key];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-常用知识]]></title>
      <url>https://zhulichao.github.io/2017/08/26/findjob-es6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6相关"><a href="#ES6相关" class="headerlink" title="ES6相关"></a>ES6相关</h2><ul>
<li><p>let、const与var相比</p>
<blockquote>
<p>使用未声明的变量，直接报错<br>重复声明同一个变量，直接报错<br>是块级作用域<br>必须声明 ‘use strict’ 后才能使用let声明变量</p>
</blockquote>
</li>
<li><p>数组的解构赋值，是值的拷贝，不是深拷贝</p>
</li>
<li>对象的解构赋值，是值的拷贝，不是深拷贝，let {a: { b }} = {a: { b: 1 }} 给b赋值，此时a是未定义的</li>
<li><p>箭头函数</p>
<p>  （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>  （2）不可以当作构造函数，也就是不可以使用new命令，否则会抛出错误。<br>  （3）不可以使用arguments对象，该对象在函数体内不存在，如果要用，可以使用rest参数代替。<br>  （4）不可以使用yield命令，因为箭头函数不能用作Generator函数。</p>
<p>  理解定义时所在的作用域。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    a: 1,</div><div class="line">    fn: function () &#123;console.log(this.a)&#125;</div><div class="line">&#125;;</div><div class="line">obj.fn(); // 1</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">    a: 1,</div><div class="line">    fn: () =&gt; &#123;console.log(this.a)&#125;</div><div class="line">&#125;;</div><div class="line">obj.fn(); // undefined</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">    a: 1,</div><div class="line">    fn: function () &#123;</div><div class="line">        setTimeout(() =&gt; &#123;console.log(this.a)&#125;, 0)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.fn(); // 1</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">    a: 1,</div><div class="line">    fn: function () &#123;console.log(this.a)&#125;</div><div class="line">&#125;;</div><div class="line">setTimeout(obj.fn, 0); // undefined</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">    a: 1,</div><div class="line">    fn: () =&gt; &#123;console.log(this.a)&#125;</div><div class="line">&#125;;</div><div class="line">setTimeout(obj.fn, 0); // undefined</div></pre></td></tr></table></figure>
</li>
<li><p>super</p>
<p>  super关键字，既可以当作函数使用，也可以当作对象使用。使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class A &#123;&#125;</div><div class="line">class B extends A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">    /*</div><div class="line">    Uncaught SyntaxError: &apos;super&apos; keyword unexpected here</div><div class="line">    无法看出super是作为函数使用，还是作为对象使用</div><div class="line">    */</div><div class="line">    console.log(super);</div><div class="line">    /*</div><div class="line">    super.valueOf()表明super是一个对象</div><div class="line">    */</div><div class="line">    console.log(super.valueOf() instanceof B); // true</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">  toString() &#123;</div><div class="line">    return &quot;MyObject: &quot; + super.toString();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.toString(); // MyObject: [object Object]</div></pre></td></tr></table></figure>
<p>  第一种情况，当作函数使用，代表父类的构造函数，super虽然代表了父类的构造函数，但是返回的是子类的实例，即super内部的this指的是子类。super()只能用在子类的构造函数中，用在其它地方就会报错。ES6要求，子类的构造函数必须执行一次super函数。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class A&#123;&#125;</div><div class="line">class B extends A &#123;</div><div class="line">    constructor() &#123;</div><div class="line">        /*</div><div class="line">        当作函数使用，代表父类的构造函数，相当于</div><div class="line">        A.prototype.constructor.call(this)</div><div class="line">        */</div><div class="line">        super();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  第二种情况，super作为对象时，在普通方法中指向父类的原型对象，在静态方法中指向父类。ES6规定，通过super调用父类的方法时，super会绑定子类的this。由于绑定子类的this，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.q = 2;</div><div class="line">  &#125;</div><div class="line">  p() &#123;</div><div class="line">    return 2;</div><div class="line">  &#125;</div><div class="line">  print() &#123;</div><div class="line">    /*</div><div class="line">    通过B的super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()会绑定子类B的this，相当于</div><div class="line">    super.print.call(this)</div><div class="line">    */</div><div class="line">    console.log(this.q);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class B extends A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.q = 3;</div><div class="line">    /*</div><div class="line">    当作对象使用，这是普通方法，super指向A.prototype，相当于</div><div class="line">    A.prototype.p()</div><div class="line">    q是父类A实例的属性，super.q就引用不到它</div><div class="line">    */</div><div class="line">    console.log(super.p()); // 2</div><div class="line">    console.log(super.q); // undefined</div><div class="line">  &#125;</div><div class="line">  subPrint() &#123;</div><div class="line">    super.print();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">let b = new B();</div><div class="line">b.subPrint(); // 3</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    console.log(&apos;static&apos;, msg);</div><div class="line">  &#125;</div><div class="line">  myMethod(msg) &#123;</div><div class="line">    console.log(&apos;instance&apos;, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    // 静态方法，super指向父类</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">  myMethod(msg) &#123;</div><div class="line">    // 普通方法，super指向父类的原型对象</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(1); // static 1</div><div class="line">var child = new Child();</div><div class="line">child.myMethod(2); // instance 2</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-AJAX]]></title>
      <url>https://zhulichao.github.io/2017/08/26/findjob-javascript-ajax/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.w3school.com.cn/jquery/ajax_ajax.asp" target="_blank" rel="external">http://www.w3school.com.cn/jquery/ajax_ajax.asp</a></p>
<p>AJAX(Asynchronous JavaScript and XML)，最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。编写常规的AJAX代码并不容易，因为不同的浏览器对 AJAX 的实现并不相同，不过jQuery为我们解决了这个难题。</p>
<h2 id="jQuery-AJAX-使用"><a href="#jQuery-AJAX-使用" class="headerlink" title="jQuery AJAX 使用"></a>jQuery AJAX 使用</h2><p><code>$.ajax([settings])</code> 返回其创建的 XMLHttpRequest 对象，大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项以获得更多的灵活性。参数对象settings可选，参数中的所有的选项都可以通过$.ajaxSetup() 函数来全局设置。</p>
<ul>
<li><p>global: Boolean  默认为true，表示触发全局AJAX事件</p>
</li>
<li><p>options: Object  可选，AJAX请求设置</p>
</li>
<li><p>async: Boolean  默认为true，表示异步请求</p>
</li>
<li><p>cache: Boolean  默认为true，dataType为script和jsonp时默认为false，false表示不缓存此页面</p>
</li>
<li><p>ifModified: Boolean  默认为false，true表示仅在服务器数据改变时获取新数据</p>
</li>
<li><p>timeout: Number  设置请求超时时间（毫秒），此设置将覆盖全局设置</p>
</li>
<li><p>traditional: Boolean  如果想要用传统的方式来序列化数据，那么就设置为true</p>
</li>
<li><p>processData: Boolean  默认为true，true表示通过data选项传递进来的数据会被转化成一个查询字符串</p>
</li>
<li><p>context: Object  设置AJAX相关回调函数的上下文，也就是回调函数内的this，如果不设定那么this指向调用本次AJAX请求时传递的options参数</p>
</li>
<li><p>username: String  用于响应 HTTP 访问认证请求的用户名</p>
</li>
<li><p>password: String  用于响应 HTTP 访问认证请求的密码</p>
</li>
<li><p>contentType: String  默认为”application/x-www-form-urlencoded”，表示发送信息至服务器时内容编码类型</p>
</li>
<li><p>dataType: String  预期服务器返回的数据类型，如不指定jQuery将自动根据HTTP包MIME信息来智能判断，可用值：”xml”、”html”、”script”、”json”、”jsonp”、”text”</p>
</li>
<li><p>type: String  默认为GET，可选”POST”或”GET”</p>
</li>
<li><p>headers: Object  设置请求头</p>
</li>
<li><p>url: String  发送请求的地址，默认为当前页地址</p>
</li>
<li><p>data: String  发送到服务器的数据、请求参数，将自动转换为请求字符串格式，processData 选项可禁止此自动转换，GET请求中将附加在URL后</p>
</li>
<li><p>jsonp: String  在一个jsonp请求中重写回调函数的名字，来替代在”callback”</p>
</li>
<li><p>jsonpCallback: String  为jsonp请求指定一个回调函数名，将用来取代jQuery自动生成的随机函数名。想让浏览器缓存GET请求的时候，指定这个回调函数名</p>
</li>
<li><p>scriptCharset: String  只有当请求时dataType为”jsonp”或”script”，并且type是”GET”才会用于强制修改 charset。通常只在本地和远程的内容编码不同时使用。</p>
</li>
<li><p>xhr: Function  需要返回一个 XMLHttpRequest 对象，默认在 IE 下是 ActiveXObject 而其他情况下是 XMLHttpRequest 。用于重写或者提供一个增强的 XMLHttpRequest 对象。</p>
</li>
<li><p>beforeSend: Function(XMLHttpRequest)  发送请求前可修改XMLHttpRequest对象的函数，如添加自定义HTTP头。参数为XMLHttpRequest。如果返回false可以取消本次ajax请求</p>
</li>
<li><p>complete: Function(XMLHttpRequest, TS)  请求完成后回调函数(请求成功或失败之后均调用)，参数为XMLHttpRequest 对象和一个描述请求类型的字符串</p>
</li>
<li><p>error: Function(XMLHttpRequest, textStatus, errorThrown)  请求失败时调用此函数，参数为XMLHttpRequest对象、错误信息、捕获的异常对象</p>
</li>
<li><p>success: Function(responseData, TS)  请求成功后的回调函数，参数为根据dataType参数进行处理后的数据和描述状态的字符串。</p>
</li>
<li><p>dataFilter: Function(data, type)  给Ajax返回的原始数据的进行预处理的函数，data是返回的原始数据，type是dataType参数</p>
</li>
</ul>
<p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    $(document).ready(function()&#123;</div><div class="line">      $(&quot;#b01&quot;).click(function()&#123;</div><div class="line">        // 同步</div><div class="line">        htmlobj=$.ajax(&#123;url:&quot;/jquery/test1.txt&quot;,async:false&#125;);</div><div class="line">        $(&quot;#myDiv&quot;).html(htmlobj.responseText);</div><div class="line">        // 异步</div><div class="line">        $.ajax(&#123;</div><div class="line">            url: &quot;/jquery/test1.txt&quot;,</div><div class="line">            success: function(responseData) &#123;</div><div class="line">                $(&quot;#myDiv&quot;).html(responseData);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;myDiv&quot;&gt;&lt;h2&gt;通过 AJAX 改变文本&lt;/h2&gt;&lt;/div&gt;</div><div class="line">&lt;button id=&quot;b01&quot; type=&quot;button&quot;&gt;改变内容&lt;/button&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="AJAX实现"><a href="#AJAX实现" class="headerlink" title="AJAX实现"></a>AJAX实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">function ajax(options) &#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line">    options.type = (options.type || &quot;GET&quot;).toUpperCase();</div><div class="line">    options.dataType = options.dataType || &quot;json&quot;;</div><div class="line">    var params = formatParams(options.data);</div><div class="line">    var xhr;</div><div class="line"></div><div class="line">    //创建 - 第一步</div><div class="line">    if (window.XMLHttpRequest) &#123;</div><div class="line">        xhr = new XMLHttpRequest();</div><div class="line">    &#125; else if(window.ActiveObject) &#123;//IE6及以下</div><div class="line">        xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //连接 和 发送 - 第二步</div><div class="line">    if (options.type == &quot;GET&quot;) &#123;</div><div class="line">        xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</div><div class="line">        xhr.send(null);</div><div class="line">    &#125; else if (options.type == &quot;POST&quot;) &#123;</div><div class="line">        xhr.open(&quot;POST&quot;, options.url, true);</div><div class="line">        //设置表单提交时的内容类型</div><div class="line">        xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</div><div class="line">        xhr.send(params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //接收 - 第三步</div><div class="line">    xhr.onreadystatechange = function () &#123;</div><div class="line">        if (xhr.readyState == 4) &#123;</div><div class="line">            var status = xhr.status;</div><div class="line">            if (status &gt;= 200 &amp;&amp; status &lt; 300 || status == 304) &#123;</div><div class="line">                options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</div><div class="line">            &#125; else &#123;</div><div class="line">                options.error &amp;&amp; options.error(status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//格式化参数</div><div class="line">function formatParams(data) &#123;</div><div class="line">    var arr = [];</div><div class="line">    for (var name in data) &#123;</div><div class="line">        arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</div><div class="line">    &#125;</div><div class="line">    arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</div><div class="line">    return arr.join(&quot;&amp;&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GET跨域提交表单"><a href="#GET跨域提交表单" class="headerlink" title="GET跨域提交表单"></a>GET跨域提交表单</h2><p>前台代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;跨域&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;./jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">        function flightHandler(data) &#123;</div><div class="line">            console.log(&apos;2: &apos;,data)</div><div class="line">        &#125;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                url: &quot;http://localhost:9432&quot;,</div><div class="line">                type: &quot;get&quot;, // jsonp必须是get方式，post不支持，注意</div><div class="line">                dataType: &quot;jsonp&quot;,</div><div class="line">                jsonp: &quot;callback&quot;, // 回调函数名称变量名</div><div class="line">                jsonpCallback: &quot;flightHandler&quot;, // 回调函数名称的值</div><div class="line">                data: &#123;param: &apos;参数&apos;&#125;,</div><div class="line">                beforeSend: function () &#123;</div><div class="line">                    console.log(&apos;1&apos;);</div><div class="line">                &#125;,</div><div class="line">                success: function (msg) &#123;</div><div class="line">                    console.log(&apos;3: &apos;,msg);</div><div class="line">                &#125;,</div><div class="line">                error: function (XMLHttpRequest, textStatus, errorThrown) &#123;</div><div class="line">                    console.log(&apos;4: &apos;,XMLHttpRequest, textStatus, errorThrown);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>后台代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;),</div><div class="line">    fs = require(&apos;fs&apos;),</div><div class="line">    url=require(&quot;url&quot;);</div><div class="line"></div><div class="line">http.createServer(function(req, res) &#123;</div><div class="line">    var query = url.parse(req.url, true).query;</div><div class="line">    var func = query.callback;</div><div class="line">    console.log(query);</div><div class="line">    var msg = `$&#123;func&#125;(&#123;&quot;txt&quot;: &quot;success&quot;&#125;)`;</div><div class="line">    res.write(msg);</div><div class="line">    res.end();  </div><div class="line">&#125;).listen(9432);</div></pre></td></tr></table></figure></p>
<p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2:  &#123;txt: &quot;success&quot;&#125;</div><div class="line">3:  &#123;txt: &quot;success&quot;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="POST跨域提交表单"><a href="#POST跨域提交表单" class="headerlink" title="POST跨域提交表单"></a>POST跨域提交表单</h2><p>CORS（跨域资源共享，Cross-Origin Resource Sharing），定义一种跨域访问的机制，可以让AJAX实现跨域访问。CORS允许一个域上的网络应用向另一个域提交跨域AJAX请求。实现此功能非常简单，只需由服务器发送一个响应标头即可。</p>
<p>header(“Access-Control-Allow-Origin: *”);<br>header(“Access-Control-Allow-Origin: <a href="http://www.test2.com" target="_blank" rel="external">http://www.test2.com</a>“);</p>
<p>CORS提供了一种跨域请求方案，但没有为安全访问提供足够的保障机制，如果需要信息的绝对安全，不要依赖CORS当中的权限制度，应当使用更多其它的措施来保障，比如OAuth2。CORS使用场景：</p>
<ul>
<li>CORS在移动终端支持的不错，可以考虑在移动端全面尝试</li>
<li>jsonp是get形式，承载的信息量有限，所以信息量较大时CORS是不二选择</li>
<li>配合新的JSAPI(fileapi、xhr2等)一起使用，实现强大的新体验功能</li>
</ul>
<p>前台代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;跨域&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;./jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                url: &quot;http://localhost:9432&quot;,</div><div class="line">                type: &quot;post&quot;,</div><div class="line">                dataType: &quot;json&quot;,</div><div class="line">                data: &#123;param: &apos;参数&apos;&#125;,</div><div class="line">                success: function (msg) &#123;</div><div class="line">                    console.log(&apos;3: &apos;,msg);</div><div class="line">                &#125;,</div><div class="line">                error: function (XMLHttpRequest, textStatus, errorThrown) &#123;</div><div class="line">                    console.log(&apos;4: &apos;,XMLHttpRequest, textStatus, errorThrown);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>后台代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;),</div><div class="line">    fs = require(&apos;fs&apos;),</div><div class="line">    url=require(&quot;url&quot;);</div><div class="line"></div><div class="line">http.createServer(function(req, res) &#123;</div><div class="line">    res.writeHead(200,&#123;&quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;&#125;);</div><div class="line">    // res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);</div><div class="line"></div><div class="line">    // 设置接收数据编码格式为 UTF-8</div><div class="line">    req.setEncoding(&apos;utf-8&apos;);</div><div class="line">    //POST &amp; GET ： name=zzl&amp;email=zzl@sina.com</div><div class="line">    var postData = &quot;&quot;;</div><div class="line">    // 数据块接收中</div><div class="line">    req.addListener(&quot;data&quot;, function (postDataChunk) &#123;</div><div class="line">        postData += postDataChunk;</div><div class="line">    &#125;);</div><div class="line">    // 数据接收完毕，执行回调函数</div><div class="line">    req.addListener(&quot;end&quot;, function () &#123;</div><div class="line">        console.log(&apos;数据接收完毕&apos;);</div><div class="line">        //GET &amp; POST  ////解释表单数据部分&#123;name=&quot;zzl&quot;,email=&quot;zzl@sina.com&quot;&#125;</div><div class="line">        var params = querystring.parse(postData);</div><div class="line">        console.log(params);</div><div class="line">    &#125;);</div><div class="line">    var msg = `&#123;&quot;txt&quot;: &quot;success&quot;&#125;`;</div><div class="line">    res.write(msg);</div><div class="line">    res.end();</div><div class="line">&#125;).listen(9432);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-基础知识]]></title>
      <url>https://zhulichao.github.io/2017/08/26/findjob-javascript1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>数据类型</p>
<p>  6种数据类型，其中包括5个基本数据类型：String、Number、Boolean、Null、Undefined，按值访问；1个复杂数据类型：Object，按引用访问。</p>
</li>
<li><p>html允许跨域的标签</p>
<p>  script、link、img、video、audio、frame、iframe、embed等有src属性的标签，以及object（data属性）、applet（code属性），css中的@font-face。</p>
</li>
<li><p>call、applay和bind的区别</p>
<p>  bind通常用来重新绑定函数体中的this并放回一个具有指定this的函数，多次bind是无效的。call和apply则表示重新指定this并调用返回结果，区别在于call采用多个实参的方式传参，apply则是使用一个数组。</p>
<p>  共同点：第一个参数指定为this，第二个参数起为参数传递。</p>
<p>  不同点：bind是用来返回具有特定this的函数，call和apply都是改变上下文中的this并立即执行这个函数。</p>
</li>
<li><p>单页应用(SPA)和多页应用(MPA)</p>
<p>  单页应用将所有的活动局限于一个Web页面中，仅在该Web页面初始化时加载相应的HTML、JavaScript和CSS。一旦页面加载完成了，SPA不会因为用户的操作而进行页面的重新加载或跳转。取而代之的是利用JavaScript动态的变换HTML的内容，从而实现UI与用户的交互。由于避免了页面的重新加载，SPA可以提供较为流畅的用户体验，但不利于SEO。MVVM这类最适合做单页面应用。</p>
<p>  多页面一般每个页面都有一个入口页面，页面跳转用普通的<code>&lt;a href=\&quot;\&quot;&gt;&lt;/a&gt;</code>，会进行整个页面的刷新。</p>
</li>
<li><p>发布订阅模式</p>
<p>  订阅发布模式定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。当一个对象的改变需要同时改变其它对象，而且它还不知道具体有多少对象需要改变时，就可以使用订阅发布模式了。</p>
<p>  观察者模式与发布订阅模式很像，虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），区别是观察者模式是由具体目标调度的，而发布订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布订阅模式则不会。</p>
</li>
<li><p>纯函数</p>
<p>  纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，JavaScript中指不依赖于且不改变它作用域之外的变量状态的函数。只要是跟函数外部环境发生的交互就都是副作用，副作用可能包含但不限于：</p>
<blockquote>
<p>更改文件系统<br>往数据库插入记录<br>发送一个 http 请求<br>可变数据<br>打印/log等IO操作<br>获取用户输入<br>DOM 查询<br>访问系统状态<br>访问系统时钟</p>
</blockquote>
</li>
<li><p>属性特性</p>
<p>  ES5定义了一个名叫“属性描述符”的对象，用于描述属性的各种特征，只能在Object.defineProperty或Object.defineProperties中使用。属性描述符对象有：</p>
<p>  4个属性：</p>
<blockquote>
<p>configurable: 可配置性，表示能否修改属性特性，能否把属性修改为访问器属性，或者能否通过delete删除属性从而重新定义属性，默认true。设置为false后，再调用Object.defineProperty修改属性特性都会报错。<br>enumerable: 可枚举性，表示能否通过for-in遍历得到属性，默认true。<br>writable: 可写性，表示能否修改属性的值，默认为true。<br>value: 数据属性，表示属性的值，默认为undefined。</p>
</blockquote>
<p>  2个存取器属性，分别是get和set，可以代替value和writable，存取器和value、writable不能同时存在：</p>
<blockquote>
<p>get: 在读取属性时调用的函数，只指定get则表示属性为只读属性，默认值为undefined。<br>set: 在写入属性时调用的函数，只指定set则表示属性为只写属性，默认值为undefined。</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 修改obj的name属性特性</div><div class="line">Object.defineProperty(obj, &apos;name&apos;, &#123;</div><div class="line">    writable: false,</div><div class="line">    value: &apos;Tom&apos;,</div><div class="line">)&#125;;</div><div class="line">// 一次修改obj的多个属性特性</div><div class="line">Object.defineProperties(obj, &#123;</div><div class="line">    _year: &#123;</div><div class="line">        value: 2017,</div><div class="line">    &#125;,</div><div class="line">    edition: &#123;</div><div class="line">        value: 1,</div><div class="line">        writable: true,</div><div class="line">    &#125;,</div><div class="line">    year: &#123;</div><div class="line">        get: function() &#123;</div><div class="line">            return this._year;</div><div class="line">        &#125;,</div><div class="line">        set: function() &#123; ... &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">// 读取属性特性</div><div class="line">Object.getOwnPropertyDescriptor(obj, &apos;_year&apos;);</div><div class="line">// 读取所有属性特性</div><div class="line">Object.getOwnPropertyDescriptors(obj);</div></pre></td></tr></table></figure>
<p>  Object.preventExtensions(obj) 禁止扩展，禁止给对象添加属性和方法，原有的属性可修改<br>  Object.isExtensible(obj) 检查是否可扩展<br>  Object.seal() 密封对象，不可扩展、不可删除属性<br>  Object.isSeal() 检查是否密封<br>  Object.freeze() 冻结对象，不可扩展、不可删除、不可修改属性<br>  Object.isFrozen() 检查是否冻结</p>
</li>
<li><p>事件冒泡</p>
<p>  事件冒泡，从内到外；事件捕获，从外到内；DOM事件流，从外到内再从内到外回到原点。事件冒泡允许多个操作被集中处理，把事件处理器添加到一个父级元素上，避免把事件处理器添加到多个子级元素上，可以优化性能，在页面动态添加新元素后，这些新增的元素也不用再绑定事件，它还可以让你在对象层的不同级别捕获事件。</p>
<p>  blur、focus、load、unload不冒泡。使用addEventListener绑定事件的方法第三个参数可以控制事件触发顺序，true为事件捕获，false为事件冒泡，默认为false。使用attachEvent绑定事件的方法不能控制事件触发顺序。</p>
<p>  阻止事件冒泡不能阻止对象默认行为，如submit按钮会提交表单数据。</p>
<p>  事件对象：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">event.keyCode // 返回keydown何keyup事件发生的时候按键的代码</div><div class="line">event.target // 发生事件的目标元素</div><div class="line">event.currentTarget // 当前处理事件的元素</div></pre></td></tr></table></figure>
<p>  阻止冒泡：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">event.stopPropagation();</div><div class="line">event.stopImmediatePropagation(); // 除了该事件的冒泡行为被阻止之外，该元素绑定的后序相同类型事件的监听函数的执行也将被阻止</div><div class="line">window.event.cancelBubble = true; // IE下</div></pre></td></tr></table></figure>
<p>  阻止默认行为：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.preventDefault();</div><div class="line">window.event.returnValue = false; // IE下</div></pre></td></tr></table></figure>
<p>  在body上处理事件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">window.onload = function() &#123;</div><div class="line">  document.body.addEventListener(&apos;click&apos;, function(e)&#123;</div><div class="line">    console.log(e.target.id);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>cookie和session的区别与联系，怎么实现</p>
<p>  cookie和session都是用来跟踪浏览器用户身份的会话方式。cookie数据保存在客户端，session数据保存在服务器端。考虑到安全应当使用session，考虑到减轻服务器性能方面，应当使用cookie。</p>
<p>  如果web服务器端使用的是session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，保存sessionid的方式可以采用cookie、url重写等方式，存储于浏览器内存中，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性。</p>
<p>  如果浏览器使用的是cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。如果不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口cookie就消失。如果设置了的过期时间，浏览器会将cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有cookie，如果有的话就读取该cookie，然后发送给服务器。如果直接将cookie文件拷贝到别人的浏览器目录下面，浏览器是不认的，因为它有一个index.dat文件，存储了cookie文件的建立时间，以及是否有修改，所以必须要先有该网站的cookie文件，并且要从保证时间上骗过浏览器，才能保证拷贝的cookie能生效。所以，cookie是可以伪造的，使用cookie被攻击的可能性比较大。</p>
</li>
<li><p>Web Storage包括哪几种方式，区别是什么，没出现之前怎么做的</p>
<p>  HTML5中的Web Storage包括了两种存储方式：sessionStorage和localStorage。在没有Web Storage之前，是通过Cookie来在客户端存储数据的。</p>
<p>  sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问，刷新页面数据依旧存在，但是当会话结束也就是页面关闭后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</p>
<p>  localStorage用于持久化的本地存储，可用于所有同源窗口或标签页（相同的域名、协议和端口），除非主动删除数据，否则数据是永远不会过期的。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Cookie</th>
<th style="text-align:left">Web Storage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4KB左右</td>
<td style="text-align:left">5MB左右</td>
</tr>
<tr>
<td style="text-align:left">自己封装setCookie、getCookie</td>
<td style="text-align:left">提供setItem、getItem等api</td>
</tr>
<tr>
<td style="text-align:left">可设置失效时间</td>
<td style="text-align:left">localStorage永久保存、sessionStorage会话级别</td>
</tr>
<tr>
<td style="text-align:left">HTTP规范的一部分，同源的请求都带Cookie</td>
<td style="text-align:left">仅在客户端保存数据，不参与和服务器的通信</td>
</tr>
</tbody>
</table>
<ul>
<li><p>正则表达式中test、exec、match</p>
<p>  <strong>test</strong>查找对应的字符串中是否存在模式，返回Boolean。当一个具有g标志的正则表达式调用test方法时，它的行为和exec相同，会从上个匹配的位置(index + 当前匹配项的长度)开始查找，这样我们就可以使用方法test来遍历字符串了。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var str = &quot;1a1b1c&quot;;</div><div class="line">var reg = new RegExp(&quot;1.&quot;, &quot;g&quot;);</div><div class="line">console.log(reg.test(str)); // true</div><div class="line">console.log(reg.test(str)); // true</div><div class="line">console.log(reg.test(str)); // true</div><div class="line">console.log(reg.test(str)); // false</div></pre></td></tr></table></figure>
<p>  <strong>exec</strong>查找并返回当前的匹配结果，并以数组的形式返回，如果不存在模式则返回null，否则总是返回一个长度为1的数组，其值就是当前匹配项，还有两个属性：index为当前匹配项的位置；input就是参数字符串。exec方法受参数g的影响。若指定了g，则下次调用exec时，会从上个匹配的位置(index+当前匹配项的长度)开始查找。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = &quot;1a1b1c&quot;;</div><div class="line">var reg = new RegExp(&quot;1.&quot;, &quot;g&quot;);</div><div class="line">console.log(reg.exec(str)); // [&quot;1a&quot;, index: 0, input: &quot;1a1b1c&quot;]</div><div class="line">console.log(reg.exec(str)); // [&quot;1b&quot;, index: 2, input: &quot;1a1b1c&quot;]</div></pre></td></tr></table></figure>
<p>  <strong>match</strong>是String对象的一个方法。match这个方法有点像exec，但exec是RegExp对象的方法。二者有一个不同点，就是对参数g的解释。如果指定了参数g，那么match一次返回所有的结果组成的数组，没有匹配则返回null。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;1a1b1c&quot;;</div><div class="line">var reg = new RegExp(&quot;1.&quot;, &quot;g&quot;);</div><div class="line">console.log(str.match(reg)); // [&quot;1a&quot;, &quot;1b&quot;, &quot;1c&quot;]</div></pre></td></tr></table></figure>
</li>
<li><p>dom ready 的实现</p>
<p>  window.onload事件是等到页面上的所有资源被加载才激活，包括页面上的许多图片、音乐或falsh等资源。如果要做绑定事件、DOM操作某节点等事情，使用window.onload有点太“迟”了，比较影响用户体验。为了解决这个问题，Firefox为DOM纳入一个全新事件DOMContentLoaded，也就是后来所说的DOMReady，是在DOM树构建完毕执行，无需等待其它资源的加载，因此是在onload前加载的。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">// DOM已加载，比window.onload快，可以有多个，按序执行</div><div class="line">jQuery(document).ready(function() &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line">// 也是在页面所有元素加载完毕后执行的，但是可加载多个函数，并且可以做到js和html完全分离</div><div class="line">$(window).load(function() &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line">$(window).load(function() &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line">// 页面关闭时引发</div><div class="line">$(window).unload(function() &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// IE浏览器没有添加DOMContentLoaded事件，以下是jQuery对该事件的兼容性实现</div><div class="line">function domReady() &#123;</div><div class="line">    if (readyBound) return;</div><div class="line">    readyBound = true;</div><div class="line">    if (document.addEventListener) &#123;// 对于非IE的处理</div><div class="line">        document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</div><div class="line">            document.removeEventListener(&quot;DOMContentLoaded&quot;, arguments.callee, false);</div><div class="line">            jQuery.ready();</div><div class="line">        &#125;, false);</div><div class="line">    &#125; else if (document.attachEvent) &#123;// 对于IE的处理</div><div class="line">        // 如果是在iframe中，通过document的onReadyStateChange实现</div><div class="line">        document.attachEvent(&quot;onReadyStateChange&quot;, function() &#123;</div><div class="line">            if (document.readyState === &quot;complete&quot;) &#123;</div><div class="line">                document.detachEvent(&quot;onReadyStateChange&quot;, arguments.callee);</div><div class="line">                jQuery.ready();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 如果页面不在iframe中，通过setTimeout不断调用documentElement的doScroll方法直到调用成功</div><div class="line">        if (document.documentElement.doScroll &amp;&amp; typeof window.frameElement === &quot;undefined&quot;) &#123;</div><div class="line">            (function() &#123;</div><div class="line">                if (jQuery.isReady) return;</div><div class="line">                try &#123;</div><div class="line">                    document.documentElement.doScroll(&quot;left&quot;);</div><div class="line">                &#125; catch(error) &#123;</div><div class="line">                    setTimeout(arguments.callee, 0);</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                jQuery.ready();</div><div class="line">            &#125;)();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    jQuery.event.add(window, &quot;load&quot;, jQuery.ready);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>img标签的图片怎么占高</p>
<p>  img外层要有div，如果已知图片宽高可直接指定div的宽高，然后将img的width样式设成100%。也可以使用预览图占位。</p>
<p>  获取图片原始尺寸：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// js获取</div><div class="line">var img = document.getElementsByTagName(&apos;img&apos;)[0];</div><div class="line">function getImgNaturalDimensions(img, callback) &#123;</div><div class="line">    var nWidth, nHeight</div><div class="line">    if (img.naturalWidth) &#123; // 现代浏览器</div><div class="line">        nWidth = img.naturalWidth</div><div class="line">        nHeight = img.naturalHeight</div><div class="line">    &#125; else &#123; // IE6/7/8</div><div class="line">        // js创建一个Image</div><div class="line">        var imgae = new Image();</div><div class="line">        image.src = img.src;</div><div class="line">        image.onload = function() &#123;</div><div class="line">            callback(image.width, image.height);</div><div class="line">        &#125;</div><div class="line">        // jQuery创建img</div><div class="line">        $(&quot;&lt;img/&gt;&quot;).attr(&quot;src&quot;, $(img).attr(&quot;src&quot;)).load(function() &#123;</div><div class="line">            callback(image.width, image.height);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    return [nWidth, nHeight];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>js跨域的解决办法</p>
<p>  浏览器都有一个同源策略，其限制之一是不能通过ajax的方法去请求不同源中的文档；第二是限制浏览器中不同域的框架之间是不能进行js的交互操作的。但是不同的框架之间（父子或同辈），是能够获取到彼此的window对象的，但却不能使用获取到的window对象的属性和方法，<strong>postMessage方法除外，</strong>可以当做是只能获取到一个几乎无用的window对象。只要协议、域名、端口有任何一个不同，都被当作是不同的域。要解决跨域的问题，我们可以使用以下几种方法：</p>
<p>  <strong>方式一、通过jsonp跨域</strong></p>
<p>  jsonp是利用<code>&lt;script&gt;</code>标签可以引入不同域上的js脚本文件来实现的，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">js原生写法，通过http://example.com/data.php?callback=dosomething得到的js文件，就是我们之前定义的dosomething函数,并且它的参数就是我们需要的json数据，这样就跨域获得了我们需要的数据。</div><div class="line">*/</div><div class="line">&lt;script&gt;</div><div class="line">    function dosomething(jsondata) &#123;</div><div class="line">        // 相应操作</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;http://example.com/data.php?callback=dosomething&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">/*</div><div class="line">jQuery写法，jQuery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁。$.getJSON方法会自动判断是否跨域，不跨域就调用普通的ajax方法，跨域会以异步加载js文件的形式来调用jsonp的回调函数。</div><div class="line">*/</div><div class="line">&lt;script&gt;</div><div class="line">    $.getJSON(&apos;http://example.com/data.php?callback=?&apos;, function(jsondata)&#123;</div><div class="line">        // 相应操作</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>  <br></p>
<p>  <strong>方式二、通过修改document.domain来跨子域</strong></p>
<p>  针对不同域的框架这种情况，是无法通过在页面中书写js代码来获取iframe中的东西的，这个时候可以使用document.domain，把这两个页面的document.domain都设成相同的域名就可以了。但要注意，只能把document.domain设置成自身或更高一级的父域，且主域必须相同，如果当前文档的domain就是要设置的域名，还是必须显示的设置<br>  document.domain。这样我们就可以通过js访问到iframe中的各种属性和对象了。</p>
<p>  <code>http://www.example.com/a.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&quot;http://example.com/b.html&quot; id=&quot;iframe&quot; onLoad=&quot;test()&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    document.domain = &apos;example.com&apos;; // 设置成主域</div><div class="line">    function test() &#123;</div><div class="line">        alert(document.getElementById(&apos;iframe&apos;).contentWindow);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>  <code>http://example.com/b.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    // 在iframe载入的这个页面也设置document.domain，使之与主页面的document.domain相同</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>  但是如果想在a.html页面中通过ajax直接请求b.html页面，即使设置了相同的document.domain也还是不行的，修改document.domain的方法只适用于不同子域的框架间的交互。如果想通过ajax的方法去与不同子域的页面交互，除了使用jsonp的方法外，还可以用一个隐藏的iframe来做一个代理。原理就是让这个iframe载入一个与你想要通过ajax获取数据的目标页面处在相同域的页面，这个iframe中的页面是可以正常使用ajax去获取你要的数据的，然后通过修改document.domain的方法，通过js完全控制这个iframe，这样就可以让iframe去发送ajax请求，然后收到的数据我们也可以获取到。</p>
<p>  <strong>方式三、使用window.name来进行跨域</strong></p>
<p>  window.name属性有个特征，即在一个窗口(window)的生命周期内，窗口载入的所有的页面都是共享一个window.name的，即使这些页面是不同域的或url发生变化，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，不会因新页面的载入而进行重置。window.name的值只能是字符串的形式，最大能允许2M左右甚至更大的一个容量，具体取决于不同的浏览器，但一般是够用了。例如<code>www.example.com/a.html</code>页面里的js需要获取另一个位于不同域的页面<code>www.cnblogs.com/data.html</code>里的数据，示例代码如下：</p>
<p>  <code>www.cnblogs.com/data.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    window.name = &apos;我就是页面a.html想要的数据，所有可以转化成字符串来传递的数据都可以在这里使用！！！&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>  <code>www.example.com/a.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;window.name跨域&lt;/title&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            function getData() &#123;</div><div class="line">                var iframe = document.getElementById(&apos;proxy&apos;);</div><div class="line">                // 这个时候a.html与iframe已经是同源了，可以互相访问</div><div class="line">                iframe.onload = function() &#123;</div><div class="line">                    // 获取iframe里的window.name，也就是data.html页面给它设置的数据</div><div class="line">                    var data = iframe.contentWindow.name;</div><div class="line">                    alert(data);</div><div class="line">                &#125;;</div><div class="line">                // 这里的b.html为随便的一个页面，只要与a.html同源的就行</div><div class="line">                iframe.src = &apos;b.html&apos;;</div><div class="line">            &#125;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;iframe id=&quot;proxy&quot; src=&quot;http://www.cnblogs.com/data.html&quot; style=&quot;display:none&quot; onload=&quot;getData()&quot; /&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>  <strong>方式四、使用HTML5中新引进的window.postMessage方法来跨域传送数据</strong></p>
<p>  <code>window.postMessage(message, targetOrigin)</code>方法是html5新引进的特性，不支持IE6、7旧浏览器，可以向其它的window对象发送消息，无论这个window对象是属于同源或不同源，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 * 。接收消息的window对象，通过监听自身的message事件来获取传过来的消息，消息内容储存在该事件对象的data属性中。</p>
<p>  <code>test.com/a.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function onLoad() &#123;</div><div class="line">        var iframe = document.getElementById(&quot;iframe&quot;);</div><div class="line">        var win = iframe.contentWindow;</div><div class="line">        // 向不同域发送消息</div><div class="line">        win.postMessage(&apos;我是来自页面a的消息！&apos;, &apos;*&apos;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.test.com/b.html&quot; onload=&quot;onLoad()&quot; /&gt;</div></pre></td></tr></table></figure>
<p>  <code>www.test.com/b.html</code>中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    window.onmessage = function(e) &#123;</div><div class="line">        e = e || event;</div><div class="line">        alert(e.data);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>有分号和没分号的区别</p>
<p>  <a href="https://www.zhihu.com/question/20298345" target="_blank" rel="external">JavaScript 语句后应该加分号么？</a></p>
<p>  通常情况下，解释器会自动添加分号，但有些时候不加分号还是容易引起解析错误，特别是在代码压缩的情况下，所以出于严谨考虑，还是推荐在语句结束时添加分号。还有不要把分号单单认为只是用来结束某段代码，它还可以用来隔离某段代码和别人划清界限。</p>
<p>  如果遇到无法解析下去则javascript解析器会尝试给其添加一个分号，如果还是解析不了则报错。javascript解析器会尽可能多的去匹配，但也有几个例外，它们是retrun、break、continue，当javascript解析器解析到这几个关键字时，它不会把换行后的内容当成是自身的，而是直接在换行之前添加分号。</p>
<p>  JavaScript自动加分号规则，有3条：</p>
<blockquote>
<p>当有换行符（包括含有换行符的多行注释），并且下一个token没法跟前面的语法匹配时，会自动补分号。<br>当有<code>}</code>时，如果缺少分号，会补分号。<br>当程序源代码结束时，如果缺少分号，会补分号。</p>
</blockquote>
<p>  真正会导致上下行解析出问题的 token 有5个：括号，方括号，正则开头的斜杠，加号，减号。实际代码中几乎没有用正则、加号、减号作为行首的情况，所以一行开头是括号或者方括号的时候加上分号就可以了，其它时候全部不需要。</p>
<blockquote>
<p>在return、break、continue、后自增、后自减五种语句中，换行符可以完全替代分号的作用。<br>var if do while for continue break return with switch throw try debugger几种关键字开头的语句，以及空语句，上一行加不加分号影响不大。<br>凡表达式语句和函数表达式语句，后面不加分号非常危险，情况极其复杂。<br>凡<code>(</code>和<code>[</code>开头的语句，前面不加分号极度危险。</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 例子1</div><div class="line">var a = 10;</div><div class="line">var b = 5;</div><div class="line">var c = a + b</div><div class="line">(a + b).toString() // b is not a function，同 var c = a + b(a + b).toString();</div><div class="line"></div><div class="line">// 例子2</div><div class="line">function test()&#123;</div><div class="line">  return </div><div class="line">  123;</div><div class="line">&#125;</div><div class="line">console.log(test()); // undefined，同 return;</div></pre></td></tr></table></figure>
</li>
<li><p>变量提升基础</p>
<p>  注意js运行时先执行变量提升，然后在从上往下执行。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">相当于：</div><div class="line">var a;</div><div class="line">function a() &#123;&#125;</div><div class="line">a = 1;</div><div class="line">*/</div><div class="line">var a = 1;</div><div class="line">function a() &#123;&#125;</div><div class="line">console.log(a); // 输出 1</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">相当于：</div><div class="line">var a;</div><div class="line">a = &#123;</div><div class="line">    x: &apos;x&apos;,</div><div class="line">    a: a, // 此时a是undefined</div><div class="line">&#125;;</div><div class="line">*/</div><div class="line">var a = &#123;</div><div class="line">    x: &apos;x&apos;,</div><div class="line">    a: a,</div><div class="line">&#125;;</div><div class="line">console.log(a); // 输出 &#123;x: &quot;x&quot;, a: undefined&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &#123;x:&apos;x&apos;&#125;;</div><div class="line">a.a = a;</div><div class="line">console.log(a); // 输出 &#123;x: &quot;x&quot;, a: &#123;…&#125;&#125; a可以无限展开</div></pre></td></tr></table></figure>
</li>
<li><p>prototype基础</p>
<p>  任何对象都有<code>__proto__</code>，只有函数对象才有<code>prototype</code>，prototype.constructor指回自己，函数被当作构造函数创建实例时它的prototype将作为实例的<code>__proto__</code>。在定义prototype是显示的将constructor指向函数自己，否则constructor将指向Object，通过constructor已经无法确定对象的类型了。还有显示定义了constructor后在对象实例中是可枚举的。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function feed() &#123;</div><div class="line">    this.a = &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line">feed.a = &apos;word&apos;;</div><div class="line">var f = new feed();</div><div class="line">console.log(f.a); // 输出 &apos;hello&apos;</div><div class="line">console.log(f.__proto__.a); // 输出 undefined</div><div class="line">console.log(f.__proto__.constructor.a); // 输出 &apos;word&apos;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function feed() &#123;</div><div class="line">    this.a = &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line">feed.prototype = &#123;</div><div class="line">    b: &apos;www&apos;,</div><div class="line">&#125;;</div><div class="line">console.log(feed.prototype.constructor); // 输出 ƒunction Object() &#123; [native code] &#125;</div><div class="line">feed.prototype = &#123;</div><div class="line">    constructor: feed,</div><div class="line">    b: &apos;www&apos;,</div><div class="line">&#125;;</div><div class="line">console.log(feed.prototype.constructor); // 输出 ƒunction feed() &#123; this.a = &apos;hello&apos;; &#125;</div><div class="line">var f = new feed();</div><div class="line">for(var key in f) &#123;</div><div class="line">    console.log(key); // 依次输出 a、constructor、b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>左值和右值</p>
<p>  按字面意思，通俗地说，以赋值符号=为界，=左边的就是左值，=右边就是右值。更深一层，可以将L-value的L，理解成Location，表示定位、地址。将R-value的R理解成 Read，表示读取数据。现在的计算机数据放在内存。内存有两个很基本的属性：内存地址和内存里面放的数据。想象完全一样的箱子。每个箱子有个编号，用来区分到底是哪个箱子，箱子里面可以放东西。内存地址相当于箱子的编号，内存的数据，相当于箱子里面放的东西。变量名编译之后，会映射成内存地址。操作a=b的含义，其实就是将”b地址内存里面的数据”，放到”a地址内存”中。</p>
<p>  可以放在赋值符号左边的变量，即具有对应的可以由用户访问的存储单元，并且能够由用户去改变其值的量。左值表示存储在计算机内存的对象，而不是常量或计算的结果。或者说左值是代表一个内存地址值，并且通过这个内存地址，就可以对内存进行读并且写（主要是能写）操作；这也就是为什么左值可以被赋值的原因了。相对应的还有右值：当一个符号或者常量放在操作符右边的时候，计算机就读取他们的“右值”，也就是其代表的真实值。简单来说就是，左值相当于地址值，右值相当于数据值。右值指的是引用了一个存储在某个内存地址里的数据。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 = 2; // Uncaught ReferenceError: Invalid left-hand side in assignment</div><div class="line">const a; // Uncaught SyntaxError: Missing initializer in const declaration</div><div class="line">const b = 1;</div><div class="line">b = 2; // Uncaught TypeError: Assignment to constant variable</div></pre></td></tr></table></figure>
</li>
<li><p>undefined</p>
<p>  undefined 表示一个未声明的变量，或已声明但没有赋值的变量，或一个并不存在的对象属性，函数没有返回值时，默认返回undefined。这是undefined的几种典型用法，而判断一个变量是不是undefined，用typeof函数，typeof函数主要是返回的是字符串，主要有：”number”、”string”、”boolean”、”object”、”function”、”undefined”。注意对于未声明的变量，typeof 也会返回undefined。</p>
<p>  null 是一个空的对象引用，undefined是声明但没有被赋值的变量，利用这两个就可以区分空对象指针和未经初始化的变量。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(null == undefined); // true</div><div class="line">console.log(null === undefined); // false</div></pre></td></tr></table></figure>
</li>
<li><p>实现super</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Object.prototype.mysuper = function()&#123;</div><div class="line">    // 返回一个对函数的引用，该函数调用了当前函数，不能使用arguments.callee.name，arguments.callee.name的值为mysuper</div><div class="line">    var caller = arguments.callee.caller;</div><div class="line">    var name;</div><div class="line">    for(var key in this)&#123;</div><div class="line">        if(this[key] === caller)&#123;</div><div class="line">            name = key;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    __proto = this.__proto__ || this.constructor.prototype;</div><div class="line">    return __proto[name]();</div><div class="line">&#125;</div><div class="line">function Class()&#123;</div><div class="line">    this.name = &quot;class&quot;;</div><div class="line">    this.setName = function(name)&#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    this.getName = function()&#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;</div><div class="line">    this.method = function() &#123;</div><div class="line">        console.log(&quot;父类方法&quot;);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">function Test()&#123;</div><div class="line">    this.getName = function()&#123;</div><div class="line">        return &apos;sub-&apos; +  this.mysuper();</div><div class="line">    &#125;</div><div class="line">    this.method = function() &#123;</div><div class="line">        this.mysuper();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 实现继承</div><div class="line">Test.prototype = new Class();</div><div class="line">Test.prototype.constructor = Test;</div><div class="line"></div><div class="line">var a = new Test();</div><div class="line">console.log(a.getName()); // sub-class</div><div class="line">a.method(); // 父类方法</div></pre></td></tr></table></figure>
</li>
<li><p>如何使用CSS实现如图效果，其中矩形：width=200px height=100px，三角形：底为40px 高为50px，并垂直居中于矩形右侧。</p>
<img src="/2017/08/26/findjob-other/css1.png" title="效果图">
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        * &#123;</div><div class="line">            margin: 0;</div><div class="line">            padding: 0;</div><div class="line">        &#125;</div><div class="line">        .rec &#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: #000;</div><div class="line">        &#125;</div><div class="line">        /* 第一个 */</div><div class="line">        .main1 &#123;</div><div class="line">            position: relative;</div><div class="line">        &#125;</div><div class="line">        #triangle-right1 &#123;</div><div class="line">            width: 0;</div><div class="line">            height: 0;</div><div class="line">            border-top: 20px solid transparent;</div><div class="line">            border-left: 50px solid red;</div><div class="line">            border-bottom: 20px solid transparent;</div><div class="line">            position: absolute;</div><div class="line">            top: 50%;</div><div class="line">            left: 200px;</div><div class="line">            margin-top: -20px;</div><div class="line">        &#125;</div><div class="line">        /* 第二个 */</div><div class="line">        .main2 &#123;</div><div class="line">            margin-top: 10px;</div><div class="line">            display: -webkit-flex; </div><div class="line">            display: -o-flex;   // 欧鹏浏览器</div><div class="line">            display: -ms-flex;  // ie</div><div class="line">            display: -moz-flex; //火狐</div><div class="line">            display: flex;</div><div class="line">            align-items: center; // 侧轴，垂直方向</div><div class="line">        &#125;</div><div class="line">        #triangle-right2 &#123;</div><div class="line">            width: 0;</div><div class="line">            height: 0;</div><div class="line">            border-top: 20px solid transparent;</div><div class="line">            border-left: 50px solid red;</div><div class="line">            border-bottom: 20px solid transparent;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rec"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"triangle-right1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rec"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"triangle-right2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-基础知识]]></title>
      <url>https://zhulichao.github.io/2017/08/26/findjob-react1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>react的优缺点</p>
<p>  优点：</p>
<blockquote>
<p>虚拟dom加diff算法减少dom操作来提高渲染性能<br>虚拟dom也帮助我们解决了跨浏览器问题<br>使用声明式语法JSX来重新定义视图开发<br>代码更加模块化，重用代码更容易<br>单向数据流，灵活、可预计、可控制<br>将DOM操作抽象为状态的改变<br>只从this.props和this.state生成HTML，非常的函数式编程<br>能够快速上手react-native开发ios或者android项目</p>
</blockquote>
<p>  缺点：</p>
<blockquote>
<p>本身只是View，如果是大型项目基本都需要加上React Router和Redux<br>大多数坑没踩出来  </p>
</blockquote>
</li>
<li><p>AMD(Asynchronous Module Definition)、CMD(Common Module Definition)、CommonJS</p>
<p>  AMD、CMD、CommonJS是JS模块化开发的标准，CommonJS是用在服务器端的，同步的，如Node.js。AMD、CMD是用在浏览器端的，异步的，如RequireJS和SeaJS。其中，AMD先提出，CMD是根据CommonJS和AMD基础上提出的。 </p>
<p>  CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式，所以就有了AMD和CMD解决方案。 </p>
<p>  AMD和CMD的区别有以下几点： </p>
</li>
</ul>
<pre><code>&gt; **AMD推崇依赖前置，CMD推崇依赖就近。AMD和CMD最大的区别是对依赖模块的执行时机处理不同** 
&gt; 对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行。 
&gt; AMD的api默认是一个当多个用，CMD严格的区分推崇职责单一。例如：AMD里require分全局的和局部的。CMD里面没有全局的require，提供seajs.use()来实现模块系统的加载启动。CMD里每个API都简单纯粹。 

UMD(Universal Module Definition 通用模块规范)，因为AMD，CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范。于是，UMD规范诞生了。
</code></pre><ul>
<li><p>为什么不能改变原有state，需要使用setState并传入修改的部分state，执行setState后怎么更新</p>
<p>  是否调用render进行再次渲染是由state是否变化决定的。setState本质是通过一个队列机制实现state更新的，执行setState时，会将要更新的state合并后放入状态队列，而不会立刻更新state，队列机制可以批量更新state。如果不通过setState而直接修改this.state，那么这次state的变化不会放入状态队列中，下次调用setState再进行状态队列进行合并时，会忽略之前直接直接对state修改，这样就无法合并到这次变化，实际也就没有将想要的state更新上去。setState是异步的。</p>
<p>  只要调用了setState，就会在合并后生成一个新的state，只要判断state指向的是否是同一个内存地址就知道state是否发生了变化，以此来决定是否进行render重新渲染。如果不用这种方式都直接操作this.state，也就是同一块内存，要侦测state是否发生变化（如angular中的deepwatch）来决定是否重新渲染会非常复杂和低效。redux的reducer中返回新的对象也是同理。react状态管理库还有redux-sagas、redux-observable、MobX等。</p>
</li>
<li><p>为什么组件中定义的方法要bind(this)</p>
<p>  ES5里，function内部的this默认为window，在严格模式下，this为undefined。ES5的写法React.createClass会自动绑定每个方法的this到当前组件实例，ES6的写法class XXX extends Component则不会自动为方法绑定this。</p>
<p>  bind()方法会创建一个新函数，当这个新函数被调用时，它的this值是传递给bind()的第一个参数，它的参数是bind()的其它参数和原本参数，这个函数不论怎么调用都有同样的this，也就是当前类的实例，否则this为undefined。绑定this的几种方式：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 方式一</div><div class="line">&lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;save&lt;/div&gt;</div><div class="line">// 方式二</div><div class="line">constructor() &#123;</div><div class="line">    ...</div><div class="line">    this.handleClick = this.handleClick.bind(this);</div><div class="line">&#125;</div><div class="line">// 方式三</div><div class="line">&lt;div onClick=&#123;() =&gt; this.handleClick()&#125;&gt;save&lt;/div&gt;</div><div class="line">// 方式四</div><div class="line">handleClik = () =&gt; &#123;&#125;</div><div class="line">&lt;div onClick=&#123;this.handleClick&#125;&gt;save&lt;/div&gt;</div><div class="line">// 方式五</div><div class="line">ES6 Decorator,core-decorator.js提供了@autobind修饰器</div></pre></td></tr></table></figure>
<p>  方式一会在每次点击时通过bind创建一个新方法，一般使用方式二、方式三或方式四，其中方式三的箭头函数总是匿名的，如果打算移除监听事件可使用方式四。方式二在构造函数里绑定this后方法是属于实例的，而定义在类里的是非静态函数，在类的<code>prototype</code>上，实例的<code>__proto__</code>原型上。方式四使用箭头函数定义的方法也是这个效果。</p>
</li>
<li><p>数据获取为什么一定要在componentDidMount里面调用</p>
<p>  不建议在constructor和componentWillMount里写的原因是：会阻碍组件的实例化，阻碍组件的渲染；在componentWillMount里面触发setState不会重新渲染，在componentDidMount里面会触发setState会重新渲染，有副作用的代码都会集中在componentDidMount方法里。</p>
</li>
<li><p>webpack 打包常用</p>
<blockquote>
<p>webpack.optimize.CommonsChunkPlugin 分离应用和第三方</p>
<p>webpack.optimize.UglifyJsPlugin 清除打包后文件中的注释和copyright</p>
<p>webpack.optimize.DedupePlugin 保证重复的代码不被打包到bundle文件</p>
<p>extract-text-webpack-plugin 独立打包样式</p>
<p>optimize-css-assets-webpack-plugin css去重 </p>
<p>html-webpack-plugin 根据模板创建html入口文件，为引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题</p>
<p>require.ensure 代码分割，可跟react-router的getComponent配合使用</p>
</blockquote>
<p>  常用loader：style-loader、css-loader、less-loader、url-loader、file-loader、babel-loader、react-hot</p>
</li>
<li><p>redux-thunk源码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// ES6 写法</div><div class="line">function createThunkMiddleware(extraArgument) &#123;</div><div class="line">  return (&#123; dispatch, getState &#125;) =&gt; next =&gt; action =&gt; &#123;</div><div class="line">    if (typeof action === &apos;function&apos;) &#123;</div><div class="line">      return action(dispatch, getState, extraArgument);</div><div class="line">    &#125;</div><div class="line">    return next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ES5写法</div><div class="line">function createThunkMiddleware(extraArgument) &#123;</div><div class="line">  return function (_ref) &#123;</div><div class="line">    var dispatch = _ref.dispatch,</div><div class="line">        getState = _ref.getState;</div><div class="line">    return function (next) &#123;</div><div class="line">      return function (action) &#123;</div><div class="line">        if (typeof action === &apos;function&apos;) &#123;</div><div class="line">          return action(dispatch, getState, extraArgument);</div><div class="line">        &#125;</div><div class="line">        return next(action);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>web端路由react-router和react-native的navigator有什么区别</p>
<p>  纯属个人理解：web端路由是保证url和UI一致的，进行的是局部刷新；react-native的Navigator是管理导航堆栈的，让用户清楚的知道自己当前所处的页面和返回的页面，进行的是整屏刷新。</p>
</li>
<li><p>Vue，React，Angular</p>
<p>  Vue。轻量级框架，双向数据绑定，语法和原理所需要的学习成本不是很高。具有高覆盖率的文档，绝大部分操作已被记录在案。但是如果一个操作没有文档记录，能在线上找到解决方案的几率也很小，因为Vue不如Angular或React更流行。Vue也有被称为Flux架构实现的Vuex，移动端跨平台方案Weex使用Vue的语法，但是Weex并不太完善。</p>
<p>  React。React通过使用VirtualDOM获得高效，单向数据流，可以使用JSX语法。与框架相关的Redux是一个非常棒的类Flux架构的实现，掌握React的知识后，可以直接上手基于ReactNative的移动客户端开发。随着React将会有一个能够向后兼容的重写版React Fiber的消息放出，React的”第二春”很快就会到来。</p>
<p>  AngularJS。以HTML为中心，适配和扩展了传统的HTML来呈现动态内容，双向数据绑定，自定义指令，是一个比较完善的前端框架，适合大型项目。入门很容易，但框架复杂、深入后概念很多，学习中较难理解，文档例子非常少。使用脏检查，当watcher越来越多时会变得越来越慢。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> FJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emmet-基础]]></title>
      <url>https://zhulichao.github.io/2017/07/10/emmet-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前两天参加JavaScript培训，老师在写HTML的时候提到Zen Coding，我之前没有听到过这个东西，但写起来感觉跟Emmet一样，回来特意查了一下。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zen Coding 改名为 <a href="https://www.emmet.io/" target="_blank" rel="external">Emmet</a>，是一种快速编写HTML/CSS代码的方法。输入缩写代码，光标移到末尾，按扩展键（Tab键），即可得到代码片段。</p>
<h3 id="HTML基本用法"><a href="#HTML基本用法" class="headerlink" title="HTML基本用法"></a>HTML基本用法</h3><p>! —- 生成html页面结构如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    </div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>元素名如div —- 生成元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><code>#</code>如div#section1 —- 指定元素id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;section1&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><code>.</code>如div.className1 —- 元素类名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;className1&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><code>[]</code>如a[alt title=name] —- 指定元素属性，用空格分隔多个属性，属性值用=赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&quot; alt=&quot;&quot; title=&quot;name&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p><code>{}</code>如a{click me} —- 文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&quot;&gt;click me&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p><code>$</code>如 —- 自增符号，@-表示倒序，@指定开始序号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ul&gt;li.item$*3 --&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;!-- ul&gt;li.item$@3*3 --&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;!-- ul&gt;li.item$@-*3 --&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;!-- ul&gt;li.item$@-3*3 --&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p><code>&gt;</code>如ul&gt;li — 子元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p><code>*</code>如li*3 —- 指定个数的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<p><code>+</code>如div+div —- 兄弟元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><code>^</code>如div+div&gt;p&gt;span+em^bq —- 上级元素，多个表示向上几级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</div><div class="line">    &lt;blockquote&gt;&lt;/blockquote&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><code>()</code>如div&gt;(header&gt;ul&gt;li*3)+section+footer —- 群组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">    &lt;section&gt;&lt;/section&gt;</div><div class="line">    &lt;footer&gt;&lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="CSS基本用法"><a href="#CSS基本用法" class="headerlink" title="CSS基本用法"></a>CSS基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">    &lt;!-- m:20 --&gt;</div><div class="line">    margin: 20px;</div><div class="line">    &lt;!-- mt:20 mb、ml、mr同理 --&gt;</div><div class="line">    margin-top: 20px;</div><div class="line">    &lt;!-- m:20-30 --&gt;</div><div class="line">    margin: 20px 30px;</div><div class="line">    &lt;!-- pos:a --&gt;</div><div class="line">    position: absolute;</div><div class="line">    &lt;!-- fl:l --&gt;</div><div class="line">    float: left;</div><div class="line">    &lt;!-- bd+ --&gt;</div><div class="line">    border: 1px solid #000;</div><div class="line">    &lt;!-- bdrs:3 --&gt;</div><div class="line">    border-radius: 3px;</div><div class="line">    &lt;!-- -wmso-bdrs:3 --&gt;</div><div class="line">    -webkit-border-radius: 3px;</div><div class="line">    -moz-border-radius: 3px;</div><div class="line">    -ms-border-radius: 3px;</div><div class="line">    -o-border-radius: 3px;</div><div class="line">    border-radius: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-基础2]]></title>
      <url>https://zhulichao.github.io/2017/07/05/javascript-base2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近参加了一次为时两天的 JavaScript 培训，回顾课程内容并进行整理，其中参考了如下两篇老师的文章。</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE4NzM5MA==&amp;mid=2651782757&amp;idx=2&amp;sn=f7434ba3ed5f2e78eabb4f307f15f4ef&amp;chksm=8cb3bff4bbc436e2cab4f5df12988ee01d52723b640612c6830b15b292ec2b23accc932db7ca#rd" target="_blank" rel="external">JavaScript 编程技法入门</a><br><a href="http://mp.weixin.qq.com/s/suTn-IpXzPXHvw1OZQso7w" target="_blank" rel="external">JS 编程道场</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>函数是第一等公民。<br>JavaScript 的核心是 函数 和 对象 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span> <span class="comment">// 'function'</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">String</span> <span class="comment">// 'function'</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span> <span class="comment">// 'function'</span></div></pre></td></tr></table></figure>
<h2 id="简化版-jquery-选择器实现"><a href="#简化版-jquery-选择器实现" class="headerlink" title="简化版 jquery 选择器实现"></a>简化版 jquery 选择器实现</h2><p>通过对 javascript 原生操作的封装，实现简化版的 jquery 类库。这里的代码并不复杂，个人感觉主要是要有类库的概念和实现思路，考虑将项目中使用的工具类逐步封装成类库。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> domObj = <span class="built_in">document</span>.querySelector(selector);</div><div class="line">    <span class="keyword">var</span> result = &#123;</div><div class="line">        <span class="string">'0'</span>: domObj,</div><div class="line">        show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; domObj.style.display = <span class="string">'none'</span>; &#125;,</div><div class="line">        hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; domObj.style.display = <span class="string">'block'</span>; &#125;,</div><div class="line">        append: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            domObj.innerHTML += str;</div><div class="line">        &#125;,</div><div class="line">        val: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (value === <span class="literal">undefined</span>) &#123;</div><div class="line">                <span class="keyword">return</span> domObj.value;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                domObj.value = value;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        on: <span class="function"><span class="keyword">function</span>(<span class="params">action, callback</span>) </span>&#123;</div><div class="line">            <span class="comment">// 特定浏览器，这里是针对Chrome的写法</span></div><div class="line">            <span class="keyword">if</span> (domObj.addEventListener) &#123;</div><div class="line">                domObj.addEventListener(action, callback);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>js 是解释型动态语言，可随时添加属性或方法，很灵活。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj1.name = <span class="string">'object1'</span>;</div><div class="line">obj1.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>推荐使用如下字面量形式的定义方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">    name: <span class="string">'object2'</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>遍历对象的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj2) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key + <span class="string">'='</span> + obj2[key]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的三种定义方式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匿名函数，通过一个变量来指向一个匿名函数，当这个函数不再需要时，JS的运行时环境会自动收集内存垃圾</span></div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hello,'</span> + name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 具名函数，有变量提升，也就是在这段代码的前面是可以调用func2方法的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hello,'</span> + name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 函数对象，这也表明了函数其实是Function类型的对象</span></div><div class="line"><span class="keyword">var</span> func3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'name'</span>, <span class="string">'return "hello," + name'</span>);</div></pre></td></tr></table></figure>
<p>函数体的内部只有在函数被调用时才会进入，下面 demo 的运行结果是先后输出 1、2、3、4、5。使用 Chrome 调试断点进入时，打开 Sources 注意观察 Scope 的变化，可以看到运行到 func1()时 Scope 只有 Globle，当进入到调用的方法时，会有 Local，里面是函数内部定义的变量或方法，当函数内部用到了外面的变量时，会有 Closure，里面是引用的外部变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 进来之后有Local</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 进来之后有Closure</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">        <span class="keyword">var</span> f = a + <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">    func2();</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line"><span class="keyword">debugger</span>;</div><div class="line">func1(); <span class="comment">// 这时只有Global</span></div></pre></td></tr></table></figure>
<img src="/2017/07/05/javascript-base2/运行顺序.png" width="400" title="运行顺序">
<img src="/2017/07/05/javascript-base2/调试.gif" title="Chrome调试">
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>this 取决于在哪调用，而不是在哪定义，通过“对象.”调用的，this 都是这个对象，直接调用的 this 都是 window。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line">func(<span class="string">'jobs'</span>); <span class="comment">// 进入func，this是window</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    setName: func</div><div class="line">&#125;;</div><div class="line">o.setName(<span class="string">'jobs'</span>); <span class="comment">// 进入func，this是o</span></div><div class="line"><span class="keyword">var</span> method = o.setName;</div><div class="line">method(<span class="string">'jobs'</span>); <span class="comment">// 进入func，this是window</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> func(<span class="string">'jobs'</span>);<span class="comment">// 进入func，this是obj</span></div></pre></td></tr></table></figure>
<p>通过函数的 call、apply、bind 方法进行调用可改变作用域，call 和 apply 只是传递参数的方式不同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">func.call(o, <span class="string">'jobs'</span>); <span class="comment">// 绑定作用域为o</span></div><div class="line">func.apply(o, [<span class="string">'jobs'</span>]);</div><div class="line">func.bind(o)(<span class="string">'jobs'</span>);</div></pre></td></tr></table></figure>
<h2 id="模拟类"><a href="#模拟类" class="headerlink" title="模拟类"></a>模拟类</h2><p>函数名的第一个字母大写，表示是用来构造对象的，不是用来执行的。</p>
<p>用方式一模拟类，o1 和 o2 有自己的 name 属性，但第三个输出结果为 false，这说明 o1.sayHello 和 o2.sayHello 指向不同内存，这样存在内存的浪费。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> o1 = &#123;&#125;, o2 = &#123;&#125;;</div><div class="line">Person.call(o1, <span class="string">'jobs'</span>);</div><div class="line">Person.call(o2, <span class="string">'gates'</span>);</div><div class="line"><span class="built_in">console</span>.log(o1.name); <span class="comment">// 输出jobs</span></div><div class="line"><span class="built_in">console</span>.log(o2.name); <span class="comment">// 输出gates</span></div><div class="line"><span class="built_in">console</span>.log(o1.sayHello === o2.sayHello); <span class="comment">// 输出false</span></div></pre></td></tr></table></figure>
<p>用方式一模拟类，第三个输出结果为 true，这时不存在内存浪费了，但破坏了封装，在外部也可以调用 sayHello 方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sayHello = sayHello;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> o1 = &#123;&#125;, o2 = &#123;&#125;;</div><div class="line">Person.call(o1, <span class="string">'jobs'</span>);</div><div class="line">Person.call(o2, <span class="string">'gates'</span>);</div><div class="line"><span class="built_in">console</span>.log(o1.name); <span class="comment">// 输出jobs</span></div><div class="line"><span class="built_in">console</span>.log(o2.name); <span class="comment">// 输出gates</span></div><div class="line"><span class="built_in">console</span>.log(o1.sayHello === o2.sayHello); <span class="comment">// 输出true</span></div></pre></td></tr></table></figure>
<p>用方式三模拟类，通过即时函数封装作用域后，可以比较好的模拟类了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式三</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// private，在外部无法直接调用</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayHello = sayHello;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// public</span></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">&#125;(); <span class="comment">// 即时函数，封装作用域</span></div><div class="line"><span class="keyword">var</span> o1 = &#123;&#125;, o2 = &#123;&#125;;</div><div class="line">Person.call(o1, <span class="string">'jobs'</span>);</div><div class="line">Person.call(o2, <span class="string">'gates'</span>);</div><div class="line"><span class="built_in">console</span>.log(o1.sayHello === o2.sayHello); <span class="comment">// 输出true</span></div></pre></td></tr></table></figure>
<p>用方式四模拟类，在即时函数封装作用域的基础上，又添加了命名空间。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式四</span></div><div class="line"><span class="comment">// 模仿命名空间，可封装类库给别人使用</span></div><div class="line"><span class="keyword">var</span> cplh = cplh || &#123;&#125;;</div><div class="line"><span class="comment">// 模仿封装</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>) </span>&#123;</div><div class="line">    <span class="comment">// 模仿private，没有加到Person上</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sayHello = sayHello;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 模仿public</span></div><div class="line">    g.Person = Person;</div><div class="line">&#125;)(cplh); <span class="comment">// 加上括号来说明这是一个表达式</span></div><div class="line"><span class="comment">// 模仿初始化</span></div><div class="line"><span class="keyword">var</span> o1 = &#123;&#125;, o2 = &#123;&#125;;</div><div class="line">cplh.Person.call(o1, <span class="string">'jobs'</span>);</div><div class="line">cplh.Person.call(o2, <span class="string">'gates'</span>);</div><div class="line"><span class="built_in">console</span>.log(o1.sayHello === o2.sayHello); <span class="comment">// 输出true</span></div></pre></td></tr></table></figure>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>所有对象都有原型对象<code>__proto__</code>，只有函数对象有原型属性<code>prototype</code>，当这个函数被用作构造函数来创建实例时，该函数的原型属性(prototype)将被作为原型赋值给所有对象实例，也就达到了重用方法的作用，<strong>即所有实例的原型引用的是函数的原型属性</strong>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 所有对象都有原型对象</span></div><div class="line">i.__proto__ <span class="comment">// 有 [Number: 0]</span></div><div class="line">str.__proto__ <span class="comment">// 有 [String: '']</span></div><div class="line">Person.__proto__ <span class="comment">// 有 [Function]</span></div><div class="line"><span class="comment">// 只有函数对象有原型属性</span></div><div class="line">i.prototype <span class="comment">// undefined</span></div><div class="line">str.prototype <span class="comment">// undefined</span></div><div class="line">Person.prototype <span class="comment">// 有 [Object]</span></div><div class="line"><span class="comment">// 所有实例的原型引用的是函数的原型属性</span></div><div class="line"><span class="built_in">console</span>.log(i.__proto__ === <span class="built_in">Number</span>.prototype) <span class="comment">// 输出true</span></div><div class="line"><span class="built_in">console</span>.log(str.__proto__ === <span class="built_in">String</span>.prototype) <span class="comment">// 输出true</span></div><div class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype) <span class="comment">// 输出true</span></div></pre></td></tr></table></figure>
<p>在执行完 <code>var Person = function() {};</code> 语句时，会分配三块内存，Person 变量的内存、function 函数的内存、protptype 指向对象的内存，这个对象的 constructor 又指向 Person 指向的函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(Person);</div><div class="line"><span class="built_in">console</span>.log(Person.prototype); <span class="comment">// 输出一个Object，有constructor属性</span></div><div class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<img src="/2017/07/05/javascript-base2/内存.png" title="内存">
<p>JavaScript 是动态语言，取决于运行时，不是定义时，因此下面的代码中示例一的对象 o 是有 sayHello 方法的。通过如示例二、示例三、示例四的方式给 Function、String、jquery 等全局函数的 prototype 添加方法来实现共有的新功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例一</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">o.__proto__ = Person.prototype;</div><div class="line"><span class="built_in">console</span>.log(o <span class="keyword">instanceof</span> Person); <span class="comment">// 输出 true</span></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(o.sayHello); <span class="comment">// 输出 function() &#123;&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例二</span></div><div class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name,fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.prototype[name] = fn;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line">Person.method(<span class="string">'sayHello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="string">'Hello,'</span> + <span class="keyword">this</span>.name;</div><div class="line">&#125;).method(<span class="string">'show'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="string">'show'</span>;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> jobs = <span class="keyword">new</span> Person(<span class="string">'jobs'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello,jobs'</span> === jobs.sayHello()); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'show'</span> === jobs.show()); <span class="comment">// 输出 true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例三</span></div><div class="line"><span class="built_in">String</span>.prototype.fill = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="comment">// var sql = "select * from " + this;</span></div><div class="line">    $.getJSON(<span class="string">'/'</span> + <span class="keyword">this</span>, <span class="literal">null</span> functon(json, textStatus)&#123;</div><div class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(json);</div><div class="line">        $(id).append(data);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 给id为wellTable01的元素添加从wells表中或接口中查出的数据</span></div><div class="line"><span class="string">"wells"</span>.fill(<span class="string">'#wellTable01'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例四</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'自定义方法'</span>);</div><div class="line">    &#125;;</div><div class="line">    $.prototype.myMethod = myMethod;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>利用原型实现类，注意下面方式一到方式四的区别，方式一到方式三的 o 对象已经有了 sayHello 方法，达到了重用方法的目的，但使用了<code>__proto__</code>，理论上 JavaScript 中是不让用的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 方法体</span></div><div class="line"><span class="keyword">var</span> proto = &#123;</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="comment">// 赋值方法</span></div><div class="line">o.__proto__ = proto;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line">Person.call(o, <span class="string">'jobs'</span>);</div><div class="line"><span class="built_in">console</span>.log(o.sayHello);</div></pre></td></tr></table></figure>
<p>方式二只是将 proto 作为 Person 的属性使用的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式二</span></div><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 方法体</span></div><div class="line">Person.proto = &#123;</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="comment">// 赋值方法</span></div><div class="line">o.__proto__ = Person.proto;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line">Person.call(o, <span class="string">'jobs'</span>);</div><div class="line"><span class="built_in">console</span>.log(o.sayHello);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式三</span></div><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 方法体</span></div><div class="line">Person.prototype = &#123;</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="comment">// 赋值方法</span></div><div class="line">o.__proto__ = Person.prototype;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line">Person.call(o, <span class="string">'jobs'</span>);</div><div class="line"><span class="built_in">console</span>.log(o.sayHello);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式四</span></div><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 方法体</span></div><div class="line">Person.prototype = &#123;</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Person(<span class="string">'jobs'</span>);</div><div class="line"><span class="built_in">console</span>.log(Person.prototype.sayHello);</div></pre></td></tr></table></figure>
<p>方式四使用 new 创建的对象，也就是说函数 Person 被用作构造函数来创建实例了，这时该函数 prototype 将被作为原型<code>__proto__</code>赋值给对象的实例，也就相当于如下代码。注意当函数名的第一个字母大写时，表示是用来构造对象的，不是用来执行的，该函数的 prototype 是给构造出来的对象用的，函数自己用不了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var o = new Person('jobs'); 等同于以下代码</span></div><div class="line"><span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="comment">// 赋值方法</span></div><div class="line">o.__proto__ = Person.prototype;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line">Person.call(o, <span class="string">'jobs'</span>);</div></pre></td></tr></table></figure>
<p>当定义一个当函数被用作构造函时，这个函数会默认在函数体开头和结尾添加如下代码，如果函数 return 的不是对象，在使用 new 实例化对象时这个 return 语句会被忽略，因为需要返回一个对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 默认添加</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">this</span> = &#123;&#125;;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 会被忽略，因为需要返回对象</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 默认添加</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h3><p>封装自己的框架，要有类、方法、复用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Klass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 如果Class有初始化</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.initialize === <span class="string">'function'</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> options) &#123;</div><div class="line">        Klass.prototype[attr] = options[attr];</div><div class="line">    &#125;</div><div class="line">    Klass.extends = <span class="function"><span class="keyword">function</span>(<span class="params">proto</span>) </span>&#123;</div><div class="line">        <span class="comment">// 定义子类</span></div><div class="line">        <span class="keyword">var</span> Child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            Klass.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// var f = &#123;&#125;;</span></div><div class="line">        <span class="comment">// f.__proto__ = this.prototype;</span></div><div class="line">        <span class="comment">// // 相当于上面的，不能使用__proto__</span></div><div class="line">        <span class="comment">// var f = new Klass();</span></div><div class="line"></div><div class="line">        <span class="comment">// Child.prototype = f;</span></div><div class="line"></div><div class="line">        <span class="comment">// 继承基类</span></div><div class="line">        <span class="comment">// 不能使用 Child.prototype = this.prototype; 这样extends添加的方法会影响到基类</span></div><div class="line">        <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            这是定义F函数的原因，如果不显示定义constructor的指向，constructor将指向Object，通过constructor已经无法确定对象的类型了。</div><div class="line">            这样显示定义constructor属性的在实例中是可枚举的。</div><div class="line">            */</div><div class="line">            <span class="keyword">this</span>.constructor = Child;</div><div class="line">        &#125;;</div><div class="line">        F.prototype = <span class="keyword">this</span>.prototype;<span class="comment">// 继承</span></div><div class="line">        <span class="keyword">var</span> f = <span class="keyword">new</span> F();</div><div class="line">        Child.prototype = f;</div><div class="line"></div><div class="line">        <span class="comment">// 类的实例方法</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr2 <span class="keyword">in</span> proto) &#123;</div><div class="line">            Child.prototype[attr2] = proto[attr2];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Child;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> Klass;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 方式一</span></div><div class="line"><span class="keyword">var</span> Person1 = <span class="keyword">new</span> Class();<span class="comment">// 函数对象可以执行</span></div><div class="line"><span class="keyword">var</span> jobs1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 方式二</span></div><div class="line"><span class="keyword">var</span> Person2 = <span class="keyword">new</span> Class(&#123;</div><div class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> jobs2 = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 方式三</span></div><div class="line"><span class="keyword">var</span> Person3 = <span class="keyword">new</span> Class(&#123;</div><div class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> Actor = Person3.extends(&#123;</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> jobs3 = <span class="keyword">new</span> Actor();</div></pre></td></tr></table></figure>
<img src="/2017/07/05/javascript-base2/继承.png" title="我对继承的理解">
<p>封装商业框架，有 Model 和 View。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> Adobe = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="comment">// 实例方法</span></div><div class="line">    Model.prototype = &#123;</div><div class="line">        <span class="keyword">constructor</span>: Model,</div><div class="line">        get: function() &#123;&#125;,</div><div class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 绑定作用域，在context作用域上执行func函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">func, context</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            func.apply(context, <span class="built_in">arguments</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> View = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//Hack: 绑定事件，这段代码不明白</span></div><div class="line">        <span class="keyword">var</span> events = <span class="keyword">this</span>.events || &#123;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> events)&#123;</div><div class="line">            <span class="keyword">var</span> func = proxy(<span class="keyword">this</span>[events[item]], <span class="keyword">this</span>);</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/(.+)\s+(.+)/</span>;</div><div class="line">            <span class="keyword">var</span> result = reg.exec(item);</div><div class="line">            $(result[<span class="number">2</span>]).bind(result[<span class="number">1</span>], func);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    View.extend = Model.extend = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> Parent = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">// 构造函数</span></div><div class="line">        <span class="keyword">var</span> Klass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.initialize === <span class="string">'function'</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">            &#125;</div><div class="line">            Parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// 继承</span></div><div class="line">        <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.constructor = Klass;</div><div class="line">        &#125;;</div><div class="line">        F.prototype = <span class="keyword">this</span>.prototype;</div><div class="line">        Klass.prototype = <span class="keyword">new</span> F();</div><div class="line">        Klass.prototype.__super__ = <span class="keyword">this</span>.prototype;</div><div class="line">        <span class="comment">// 扩展</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> options)&#123;</div><div class="line">            Klass.prototype[name] = options[name];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Klass;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        Model: Model,</div><div class="line">        View: View</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 使用代码</span></div><div class="line"><span class="keyword">var</span> Todo = Adobe.Model.extend(&#123;</div><div class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> title === <span class="string">'string'</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.set(&#123;title: title&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> todo = <span class="keyword">new</span> Todo(<span class="string">'Test'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> todo.get === <span class="string">'function'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> todo.set === <span class="string">'function'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> todo.initialize === <span class="string">'function'</span>);</div></pre></td></tr></table></figure>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fun();</div><div class="line"></div><div class="line">f.__proto__; <span class="comment">// fun.prototype</span></div><div class="line">f.__proto__.__proto__; <span class="comment">// Object.prototype</span></div><div class="line">f.__proto__.__proto__.__proto__; <span class="comment">// null</span></div><div class="line">f.__proto__.__proto__.__proto__.__proto__; <span class="comment">// 报错</span></div><div class="line">fun.__proto__; <span class="comment">// Function.prototype</span></div><div class="line">fun.__proto__.__proto__; <span class="comment">// Object.prototype</span></div><div class="line">f.prototype; <span class="comment">// undefined</span></div><div class="line">fun.prototype; <span class="comment">// &#123; constructor: fun &#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">  a = <span class="number">1</span>;</div><div class="line">  m1() &#123;&#125;</div><div class="line">  m2 = () =&gt; &#123;&#125;;</div><div class="line">  <span class="keyword">static</span> s2 = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>.m2 = () =&gt; &#123;&#125;;</div><div class="line">&#125;</div><div class="line">Demo.prototype.m1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Demo.s2 = <span class="number">2</span>;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-BackAndroid]]></title>
      <url>https://zhulichao.github.io/2017/07/03/react-native-BackAndroid/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BackAndroid-物理返回键的使用"><a href="#BackAndroid-物理返回键的使用" class="headerlink" title="BackAndroid 物理返回键的使用"></a>BackAndroid 物理返回键的使用</h2><p>在android上，点击物理返回键时，通常会进行返回上个页面的操作，如果已经回到主页、没有上一级页面，则会弹出是否退出应用的提示。在RN中，对物理返回键的监听尽量放在最上层的组件中，示例代码如下。如果哪个页面单独定义了点击返会的操作，如给出提示是否保存当前页面，可在这个组件中再进行物理返回键的监听，注意最后要return true，这样就不会进入到全局的监听方法了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  ...</div><div class="line">  Platform,</div><div class="line">  BackAndroid,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">class App extends Component &#123;</div><div class="line">  constructor(props)&#123;</div><div class="line">    super(props);</div><div class="line">  &#125;</div><div class="line">  componentWillMount() &#123;</div><div class="line">    if (Platform.OS === &apos;android&apos;) &#123;</div><div class="line">      BackAndroid.addEventListener(&apos;hardwareBackPress&apos;, this.onBackAndroid);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    if (Platform.OS === &apos;android&apos;) &#123;</div><div class="line">      BackAndroid.removeEventListener(&apos;hardwareBackPress&apos;, this.onBackAndroid);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  onBackAndroid = () =&gt; &#123;</div><div class="line">    const navigator = this.refs.navigator;</div><div class="line">    const routers = navigator.getCurrentRoutes();</div><div class="line">    if (routers.length &gt; 1) &#123;</div><div class="line">      navigator.pop(); // 没到主页，直接弹出到上一个页面</div><div class="line">      return true; // 接管默认行为</div><div class="line">    &#125; else &#123;</div><div class="line">      // 到了主页了，最近2秒内按过back键，退出应用；否则弹出提示</div><div class="line">      if (this.lastBackPressed &amp;&amp; this.lastBackPressed + 2000 &gt;= Date.now()) &#123;</div><div class="line">        return false;</div><div class="line">      &#125;</div><div class="line">      this.lastBackPressed = Date.now();</div><div class="line">      Toast.info(&apos;再按一次退出应用&apos;);</div><div class="line">      return true;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">        &lt;Navigator</div><div class="line">            ref=&quot;navigator&quot;</div><div class="line">            initialRoute=&#123;initialRoute&#125;</div><div class="line">            shadowHidden=&#123;true&#125;</div><div class="line">            translucent=&#123;true&#125;</div><div class="line">            configureScene=&#123;this.configureScene&#125;</div><div class="line">            renderScene=&#123;this.renderScene&#125;</div><div class="line">          /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Diff算法]]></title>
      <url>https://zhulichao.github.io/2017/06/28/react-diff/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><p>React.js 相对于直接操作原生DOM有很大的性能优势，很大程度上都要归功于virtual DOM的batching和diff。batching把所有的DOM操作搜集起来，一次性提交给真实的DOM。diff算法时间复杂度也从标准的的Diff算法的O(n^3)降到了O(n)。React.js将标准的的Diff算法复杂度O(n^3)直接降低到O(n)基于的假设：</p>
<ul>
<li>两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构</li>
<li>对于同一层次的一组子节点，它们可以通过唯一的id进行区分</li>
</ul>
<p>在比较两个React节点树时，React首先比较根元素，随后的行为取决于根元素类型：</p>
<ul>
<li>只要根节点类型不同，React就会销毁旧节点树，创建新节点树</li>
<li>当节点类型相同时，React比较两者的属性，不改变DOM节点，只更新当前节点需要改变的属性</li>
<li>如果节点需要更新样式属性，React仅会更新当前节点需要改变的样式属性</li>
</ul>
<p>React的Diff算法实际上只会对树进行逐层比较。在实现自己的组件时，保持稳定的DOM结构会有助于性能的提升。例如，我们有时可以通过CSS隐藏或显示某些节点，而不是真的移除或添加DOM节点。</p>
<img src="/2017/06/28/react-diff/传统算法O(n^3).png" title="传统Diff算法O(n^3)">
<img src="/2017/06/28/react-diff/React算法O(n).png" width="500" title="React Diff算法O(n)">
<h2 id="key属性在diff算法中的作用"><a href="#key属性在diff算法中的作用" class="headerlink" title="key属性在diff算法中的作用"></a>key属性在diff算法中的作用</h2><p>使用浏览器的MutationObserver的功能，对页面上元素的改变进行监听，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;script src=&quot;react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;babel.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;style&gt;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;</div><div class="line">        var observeMutationSupport = !!MutationObserver;</div><div class="line">        var changedNodes = [];</div><div class="line">        if(observeMutationSupport) &#123;</div><div class="line">            var observer = new MutationObserver(function(mutations) &#123;</div><div class="line">                changedNodes = mutations;</div><div class="line">                mutations.forEach(function(mutation)&#123;</div><div class="line">                    console.log(mutation);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">            var options = &#123;</div><div class="line">                &apos;childList&apos;: true, // 子节点的变动</div><div class="line">                &apos;attributes&apos;: true, // 属性的变动</div><div class="line">                &apos;characterData&apos;: true, // 节点内容或节点文本的变动</div><div class="line">                &apos;subtree&apos;: true, // 所有后代节点的变动</div><div class="line">                &apos;attributeOldValue&apos;: true, // 表示观察attributes变动时，是否需要记录变动前的属性值</div><div class="line">                &apos;characterDataOldValue&apos;: true // 表示观察characterData变动时，是否需要记录变动前的值</div><div class="line">            &#125;;</div><div class="line">            observer.observe(document.body, options);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">        function LifeCycle(name) &#123;</div><div class="line">            var obj = &#123;</div><div class="line">                name: name</div><div class="line">            &#125;;</div><div class="line">            for(var n in Cycle)&#123;</div><div class="line">                obj[n] = Cycle[n];</div><div class="line">            &#125;</div><div class="line">            return obj;</div><div class="line">        &#125;</div><div class="line">        var Cycle = &#123;</div><div class="line">            getInitialState: function() &#123;</div><div class="line">                console.log(this.name, &apos;getInitialState&apos;);</div><div class="line">                return &#123;&#125;;</div><div class="line">            &#125;,</div><div class="line">            getDefaultProps: function() &#123;</div><div class="line">                console.log(this.name, &apos;getDefaultProps&apos;);</div><div class="line">                return &#123;&#125;;</div><div class="line">            &#125;,</div><div class="line">            componentWillMount: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentWillMount&apos;);</div><div class="line">            &#125;,</div><div class="line">            componentDidMount: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentDidMount&apos;);</div><div class="line">            &#125;,</div><div class="line">            componentWillReceiveProps: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentWillReceiveProps&apos;);</div><div class="line">            &#125;,</div><div class="line">            shouldComponentUpdate: function() &#123;</div><div class="line">                console.log(this.name, &apos;shouldComponentUpdate&apos;);</div><div class="line">                return true;</div><div class="line">            &#125;,</div><div class="line">            componentWillUpdate: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentWillUpdate&apos;);</div><div class="line">            &#125;,</div><div class="line">            componentDidUpdate: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentDidUpdate&apos;);</div><div class="line">            &#125;,</div><div class="line">            componentWillUnmount: function() &#123;</div><div class="line">                console.log(this.name, &apos;componentWillUnmount&apos;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        // 定义Ctrip组件</div><div class="line">        var Ctrip = React.createClass(&#123;</div><div class="line">            mixins: [LifeCycle(&apos;Ctrip&apos;)],</div><div class="line">            render: function() &#123;</div><div class="line">                console.log(&apos;Ctrip&apos;, &apos;render&apos;);</div><div class="line">                return (</div><div class="line">                    &lt;ul&gt;</div><div class="line">                        &lt;li&gt;ctrip&lt;/li&gt;</div><div class="line">                        &lt;li&gt;</div><div class="line">                            &lt;ul&gt;</div><div class="line">                                &#123;this.props.children&#125;</div><div class="line">                            &lt;/ul&gt;</div><div class="line">                        &lt;/li&gt;</div><div class="line">                    &lt;/ul&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 定义Elong组件</div><div class="line">        var Elong = React.createClass(&#123;</div><div class="line">            mixins: [LifeCycle(&apos;Elong&apos;)],</div><div class="line">            render: function() &#123;</div><div class="line">                console.log(&apos;Elong&apos;, &apos;render&apos;);</div><div class="line">                return (</div><div class="line">                    &lt;li&gt;elong&lt;/li&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 定义Qunar组件</div><div class="line">        var Qunar = React.createClass(&#123;</div><div class="line">            mixins: [LifeCycle(&apos;Qunar&apos;)],</div><div class="line">            render: function() &#123;</div><div class="line">                console.log(&apos;Qunar&apos;, &apos;render&apos;);</div><div class="line">                return (</div><div class="line">                    &lt;li&gt;qunar&lt;/li&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 定义Ly组件</div><div class="line">        var Ly = React.createClass(&#123;</div><div class="line">            mixins: [LifeCycle(&apos;Ly&apos;)],</div><div class="line">            render: function () &#123;</div><div class="line">                console.log(&apos;Ly&apos;, &apos;render&apos;);</div><div class="line">                return (</div><div class="line">                    &lt;li&gt;ly&lt;/li&gt;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        console.log(&apos;------------first------------&apos;);</div><div class="line">        ReactDOM.render(</div><div class="line">            &lt;Ctrip&gt;&lt;Elong&gt;&lt;/Elong&gt;&lt;Qunar&gt;&lt;/Qunar&gt;&lt;/Ctrip&gt;,</div><div class="line">            document.getElementById(&apos;container&apos;)</div><div class="line">        );</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            console.log(&apos;------------second------------&apos;);</div><div class="line">            ReactDOM.render(</div><div class="line">                &lt;Ctrip&gt;&lt;Elong&gt;&lt;/Elong&gt;&lt;Ly&gt;&lt;/Ly&gt;&lt;Qunar&gt;&lt;/Qunar&gt;&lt;/Ctrip&gt;,</div><div class="line">                document.getElementById(&apos;container&apos;)</div><div class="line">            );</div><div class="line">        &#125;, 1000);</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<img src="/2017/06/28/react-diff/withoutKey.png" title="运行结果如图">
<p>常规的做法就是将Elong和Qunar组件先删除，然后一次创建和插入Elong、Ly和Qunar组件。通过运行结果可以看出，在React中，Elong组件不变，先将Qunar组件进行删除，然后在创建并插入Ly组件，最后再创建并插入Qunar组件，比常规的做法省去了对Elong组件的删除操作。下面再将主逻辑代码稍作调整，给每个组件添加key属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">console.log(&apos;------------first------------&apos;);</div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Ctrip&gt;&lt;Elong key=&quot;Elong&quot;&gt;&lt;/Elong&gt;&lt;Qunar key=&quot;Qunar&quot;&gt;&lt;/Qunar&gt;&lt;/Ctrip&gt;,</div><div class="line">    document.getElementById(&apos;container&apos;)</div><div class="line">);</div><div class="line">setTimeout(function() &#123;</div><div class="line">    console.log(&apos;------------second------------&apos;);</div><div class="line">    ReactDOM.render(</div><div class="line">        &lt;Ctrip&gt;&lt;Elong key=&quot;Elong&quot;&gt;&lt;/Elong&gt;&lt;Ly key=&quot;Ly&quot;&gt;&lt;/Ly&gt;&lt;Qunar key=&quot;Qunar&quot;&gt;&lt;/Qunar&gt;&lt;/Ctrip&gt;,</div><div class="line">        document.getElementById(&apos;container&apos;)</div><div class="line">    );</div><div class="line">&#125;, 1000);</div><div class="line">...</div></pre></td></tr></table></figure>
<img src="/2017/06/28/react-diff/withKey.png" title="运行结果如图">
<p>这次的Diff算法与之前有很大不同，Elong组件不变，Qunar组件不变，只是在Qunar组件之前创建并插入了Ly组件。可见使用key属性可提高渲染性能。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redux-saga-基础(未完成)]]></title>
      <url>https://zhulichao.github.io/2017/06/20/redux-saga-base1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考<br><a href="http://leonshi.com/redux-saga-in-chinese/index.html" target="_blank" rel="external">Redux-saga 中文文档</a><br><a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="external">redux-saga</a><br><a href="https://github.com/redux-saga/redux-saga-beginner-tutorial" target="_blank" rel="external">redux-saga-beginner-tutorial</a> 有点简单<br><a href="https://github.com/kuy/redux-saga-chat-example" target="_blank" rel="external">redux-saga-chat-example</a> 有点复杂<br><a href="https://github.com/kuy/redux-saga-examples" target="_blank" rel="external">redux-saga-examples</a> 有好几个例子</p>
<h2 id="Redux-saga简介"><a href="#Redux-saga简介" class="headerlink" title="Redux-saga简介"></a>Redux-saga简介</h2><p>redux-saga 是一个用于管理 Redux 应用异步操作的中间件。Sagas 是通过 Generator 函数来创建的，因为使用了 Generator，redux-saga 让你可以用同步的方式写异步代码。</p>
<p>Sagas 不同于 Thunks，Thunks 是在 action 被创建时调用，而 Sagas 只会在应用启动时调用（但初始启动的 Sagas 可能会动态调用其他 Sagas）。 Sagas 可以被看作是在后台运行的进程。<strong>Sagas 监听发起的 action，然后决定基于这个 action 来做什么：是发起一个异步调用（比如一个 Ajax 请求），还是发起其他的 action 到 Store，甚至是调用其他的 Sagas。</strong></p>
<p>在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（译注：Effect 可以看作是 redux-saga 的任务单元）。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>当 Saga 启动了（不管是初始启动或是稍后动态启动），middleware 会自动将它的 take / put 连接至 store。 这 2 个 Effect 可以被看作是一种 Saga 的输入/输出（Input/Output）。</p>
<p><strong>call</strong></p>
<p>call 创建了一条描述结果的信息，不立即执行异步调用，还有apply，像js的call和apply，也可以使用 call Effect 进行同步调用，call 不仅可以用来调用返回 Promise 的函数。我们也可以用它来调用其他 Generator 函数，同步的<br>call 和 apply 非常适合返回 Promise 结果的函数</p>
<p><strong>cps</strong></p>
<p>cps 可以用来处理 Node 风格的函数，表示的是延续传递风格</p>
<p><strong>take</strong></p>
<p>take 就像 call 和 put，它创建另一个命令对象，告诉 middleware 等待一个特定的 action，它将会暂停 Generator 直到一个匹配的 action 被发起了</p>
<p><strong>fork</strong></p>
<p>fork 任务会在后台启动，调用者也可以继续它自己的流程，而不用等待被 fork 的任务结束，异步的</p>
<p><strong>cancel</strong></p>
<p> 如果任务仍在运行，它会被中止，如果任务已完成，那什么也不会发生。一旦任务被 fork，可以使用 yield cancel(task) 来中止任务执行。取消正在运行的任务，将抛出 SagaCancellationException 错误。未被捕获的 SagaCancellationException 不会向上冒泡。yield cancel(task) 不会等待被取消的任务完成（即执行其 catch 区块）。<br>  /<em><br>  const [users, repos] = yield [<br>    call(fetch, ‘/users’),<br>    call(fetch, ‘/repos’)<br>  ];<br>  generator 会被阻塞直到所有的 effects 都执行完毕，或者当一个 effect 被拒绝 （就像 Promise.all 的行为）
  </em>/</p>
<p><strong>race</strong></p>
<p> race 同时启动多个任务，但又不想等待所有任务完成，只希望拿到胜利者，即第一个被 resolve（或 reject）的任务；它会自动取消那些失败的 Effects<br>  yield call(delay, 1000)</p>
<p><strong>put</strong></p>
<p>put 这个函数用于创建 dispatch Effect</p>
<p>  使用 take 组织代码有一个小问题。在 takeEvery 的情况中，被调用的任务无法控制何时被调用， 它们将在每次 action 被匹配时一遍又一遍地被调用。并且它们也无法控制何时停止监听。<br>而在 take 的情况中，控制恰恰相反。与 action 被 推向（pushed） 任务处理函数不同，Saga 是自己主动 拉取（pulling） action 的。 看起来就像是 Saga 在执行一个普通的函数调用 action = getNextAction()，这个函数将在 action 被发起时 resolve。</p>
<p><strong>takeEvery</strong></p>
<p>takeEvery 在每个 action 来到时派生一个新的任务</p>
<p><strong>takeLatest</strong></p>
<p><strong>isCancelError</strong></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用redux-saga写todo</p>
]]></content>
      
        <categories>
            
            <category> Redux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-基础3]]></title>
      <url>https://zhulichao.github.io/2017/06/17/react-native-base3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>已经用react-native开发过3个项目，经过这段时间的使用，对react-native总结如下。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>个人感觉react-native的主要优点还是快速构建页面，无论是使用antd-mobile的组件库还是使用react-native官方提供的组件，都能相对快速的搭建页面，但是，无论使用哪种方式也都存在着同一个问题，就是样式问题，如果要完全按照UI设计做出一套页面，还是不太容易。</li>
<li>个人感觉react-native在页面交互上还是比较方便的，可以通过组件、组件提供的方法进行事件的控制，如页面跳转、点击、关联刷新等，目前很少发现有不支持的事件。</li>
<li>个人感觉，在android上开发的react-native项目，调试出一版ios的困难并不大，如果开发中使用的第三方依赖都是兼容ios的且不考虑ios适配问题，预计一周时间是可以调出一版兼容ios的。</li>
<li>开源的第三方组件比较多，目前使用过的第三方依赖可参考<a href="/2017/04/02/react-native-dependencies/">React-Native-依赖</a>，而且已经确认友盟、bugtags都可以支持react-native。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="项目名称修改不方便"><a href="#项目名称修改不方便" class="headerlink" title="项目名称修改不方便"></a>项目名称修改不方便</h3><p>react-native项目名称修改不方便，个人认为目前就是不能修改项目名称。使用react-native-cli初始化的项目，android目录和ios目录中都有很多地方使用了项目名称，不是修改根目录文件夹的名称就能修改项目名称的，因此如果想使用已有的稳定项目生成新的项目，只能先初始化一个新的项目，再手动移代码，很不方便。</p>
<p>目前已经试验过针对android的项目名称修改的方法，参见<a href="/2016/11/30/react-native-base/">React-Native-基础1</a>中“项目名称修改”部分，但针对ios的项目名称修改还没有找到解决办法，因此还不敢使用这种方法。</p>
<h3 id="不支持web端"><a href="#不支持web端" class="headerlink" title="不支持web端"></a>不支持web端</h3><p>直接使用react-native开发的项目，可以做到兼容android和ios，但不能运行在web端。react-native-web声称能将react-native开发的项目运行在web端，个人只试验过将直接初始化的项目运行在web端，但对于已经使用了很多第三方依赖的项目运行在web端报错了，想要将react-native开发的项目运行在web端不是那么容易的。京东是自己实现了从React Native向React JS进行转换的方案。</p>
<h3 id="开发中常见错误"><a href="#开发中常见错误" class="headerlink" title="开发中常见错误"></a>开发中常见错误</h3><p>开发中常见两个错误，截图如下，目前只在开发环境有，打包后的生产环境暂时还没发现。开发环境下OOM错误非常频繁，查找react-native在github上的<a href="https://github.com/facebook/react-native/issues/13379" target="_blank" rel="external">issues列表</a>建议将使用图片的ListView换成FlatList。</p>
<img src="/2017/06/17/react-native-base3/langPressIn.jpg" width="300" title="RESPONDER_ACTIVE_LONG_PRESS_IN错误">
<img src="/2017/06/17/react-native-base3/oom.png" width="300" title="OOM错误">
<h3 id="多个异步请求-redux-saga"><a href="#多个异步请求-redux-saga" class="headerlink" title="多个异步请求 redux-saga"></a>多个异步请求 redux-saga</h3><p>在业务逻辑比较复杂、需要多次网络请求及本地数据库操作的情况下，例如下面的业务，写出来的代码会很复杂，原因就是使用redux发起了多个异步action，除了图片上传，个人感觉应该是使用同步请求的逻辑会容易些，因为后面的处理是基于前一个请求结果进行的，但fetch没有同步请求方法，所以逻辑写起来就复杂些。目前已知的解决发起多个异步请求的方法有redux-sequence-action和redux-sage，redux-sequence-action在web端使用过，但感觉还是有些局限，redux-sage应该是比较好的解决方案，但目前还没研究过怎么使用。</p>
<p>“带有图片的本地数据进行web端提交后，无论提交是否成功，都需要进行本地保存；如果提交成功，根据请求返回结果删除本地业务数据、更新图片关系表，再将图片上传到web端，并根据图片上传成功的返回结果更新本地图片关系表。”</p>
<h3 id="打包耗时"><a href="#打包耗时" class="headerlink" title="打包耗时"></a>打包耗时</h3><p>打包问题，就像react-native项目有时需要很多次启动才能启动成功（最多一次启动了6、7次），打包通常也是需要多次，几乎没有一次就能打包成功的时候，这时候代码不能修改，只能干等，后期希望引入持续集成解决这个问题，也能解决使用不同机器打的包可能不一致的问题。</p>
<h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h3><ul>
<li>样式不好调整，如果要完全按照UI设计做出一套页面，还是不太容易，而且目前还做过屏幕适配，不知道好不好处理</li>
<li>react-native版本升级有时变动较大，如0.44去掉了Navigator和BackAndroid，最主要的是许多第三方依赖对高版本rn支持的不好</li>
<li>react-native或其它组件可能存在手机适配问题，目前发现的是在工程机“VT5000”上，ListView的Item如果包装了滑动删除，几乎无法触发Item的onPress事件</li>
<li>开发环境和打包后的生产环境可能不一致，具体原因还不清楚，怀疑是开发时打开浏览器调试能使用了一些浏览器的解析功能，导致离开浏览器的打包后的生产环境可能存在问题</li>
<li>数据库操作使用的<a href="https://github.com/andpor/react-native-sqlite-storage" target="_blank" rel="external">react-native-sqlite-storage</a>，个人感觉还是不太好用，多个查询的嵌套看上去很乱，写起来也不方便</li>
<li>本人没有做过原生开发，不了解更新升级，京东在GMTC会议演讲中提到更新升级需要依赖第三方框架，在我目前的项目中更新升级时本地库的处理还没有查找解决方案</li>
<li>Small等插件化框架是支持原生的，目前没有看到支持react-native的文档，有没有支持react-native插件化的框架还不清楚</li>
<li>复杂场景下内存性能有瓶颈，页面跳转可能卡顿，有些偶发问题很难复现也不好定位原因，目前发现的是ListView中数据重复的问题，还没定位原因</li>
<li>react-native项目运行时有时需要android studio先编译，这就需要保持开发人员android studio环境的一致，有时候我运行项目没问题，但其它人运行就有问题，需要打开android studio看一下编译信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-Android使用百度地图]]></title>
      <url>https://zhulichao.github.io/2017/06/17/react-native-baidu-map-android/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="百度地图key值"><a href="#百度地图key值" class="headerlink" title="百度地图key值"></a>百度地图key值</h2><ul>
<li><a href="http://developer.baidu.com/，注册开发者帐号" target="_blank" rel="external">http://developer.baidu.com/，注册开发者帐号</a></li>
<li>进入百度地图-&gt;API控制台，创建应用，应用类型选择Android SDK，输入发布版SHA1和包名提交即可</li>
</ul>
<img src="/2017/06/17/react-native-baidu-map-android/key.png" title="申请百度地图key">
<h2 id="显示地图及定位"><a href="#显示地图及定位" class="headerlink" title="显示地图及定位"></a>显示地图及定位</h2><p>使用<a href="https://github.com/lovebing/react-native-baidu-map" target="_blank" rel="external">react-native-baidu-map</a>依赖。</p>
<ul>
<li><p><code>NPM install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-native-baidu-map --save</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/setting.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include &apos;:react-native-baidu-map&apos;</div><div class="line">project(&apos;:react-native-baidu-map&apos;).projectDir = new File(settingsDir, &apos;../node_modules/react-native-baidu-map/android&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/app/build.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(&apos;:react-native-baidu-map&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>MainApplication.java</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import org.lovebing.reactnative.baidumap.BaiduMapPackage;</div><div class="line"></div><div class="line">      return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          ...</div><div class="line">          , new BaiduMapPackage(getApplicationContext())</div><div class="line">          ...</div></pre></td></tr></table></figure>
</li>
<li><p><code>AndroidManifest.xml</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!--用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问GPS定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--获取运营商信息，用于支持提供运营商信息相关的接口--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问网络，网络定位需要上网--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于读取手机当前的状态--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line"></div><div class="line">&lt;application</div><div class="line">  android:name=&quot;.MainApplication&quot;</div><div class="line">  android:allowBackup=&quot;true&quot;</div><div class="line">  android:label=&quot;@string/app_name&quot;</div><div class="line">  android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class="line">  &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</div><div class="line">  &lt;meta-data</div><div class="line">    android:name=&quot;com.baidu.lbsapi.API_KEY&quot;</div><div class="line">    android:value=&quot;baidu-key&quot;/&gt;&lt;!--百度地图key值--&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>Usage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  TouchableHighlight,</div><div class="line">  StyleSheet,</div><div class="line">  InteractionManager,</div><div class="line">  Dimensions,</div><div class="line">  Platform,</div><div class="line">  StatusBar,</div><div class="line">  NativeAppEventEmitter,</div><div class="line">  Alert,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import &#123; Button &#125; from &apos;antd-mobile&apos;;</div><div class="line">import &#123; MapView, MapTypes, MapModule, Geolocation &#125; from &apos;react-native-baidu-map&apos;;</div><div class="line"></div><div class="line">class BaiduLocationTest extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      mayType: MapTypes.NORMAL,</div><div class="line">      zoom: 15,</div><div class="line">      center: &#123;</div><div class="line">        longitude: 113.981718,</div><div class="line">        latitude: 22.542449</div><div class="line">      &#125;,</div><div class="line">      trafficEnabled: false,</div><div class="line">      baiduHeatMapEnabled: false,</div><div class="line">      markers: [&#123;</div><div class="line">        longitude: 113.981718,</div><div class="line">        latitude: 22.542449,</div><div class="line">        title: &quot;Window of the world&quot;</div><div class="line">      &#125;,&#123;</div><div class="line">        longitude: 113.995516,</div><div class="line">        latitude: 22.537642,</div><div class="line">        title: &quot;&quot;</div><div class="line">      &#125;]</div><div class="line">    &#125;;</div><div class="line">    this.timer = null;</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  componentWillUnmount () &#123;</div><div class="line">    this.timer &amp;&amp; clearInterval(this.timer);</div><div class="line">  &#125;</div><div class="line">  getLocation = () =&gt; &#123;</div><div class="line">    this.timer = setInterval(</div><div class="line">      () =&gt; &#123;</div><div class="line">        Geolocation.getCurrentPosition()</div><div class="line">          .then(data =&gt; &#123;</div><div class="line">            console.log(JSON.stringify(data));</div><div class="line">            this.setState(&#123;</div><div class="line">              marker: &#123;</div><div class="line">                latitude: data.latitude,</div><div class="line">                longitude: data.longitude,</div><div class="line">                title: &apos;Your location&apos;</div><div class="line">              &#125;,</div><div class="line">              center: &#123;</div><div class="line">                latitude: data.latitude,</div><div class="line">                longitude: data.longitude,</div><div class="line">                rand: Math.random()</div><div class="line">              &#125;</div><div class="line">            &#125;);</div><div class="line">          &#125;)</div><div class="line">          .catch(e =&gt;&#123;</div><div class="line">            console.warn(e, &apos;error&apos;);</div><div class="line">          &#125;)</div><div class="line">      &#125;,</div><div class="line">      2000</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;MapView</div><div class="line">          trafficEnabled=&#123;this.state.trafficEnabled&#125;</div><div class="line">          baiduHeatMapEnabled=&#123;this.state.baiduHeatMapEnabled&#125;</div><div class="line">          zoom=&#123;this.state.zoom&#125;</div><div class="line">          mapType=&#123;this.state.mapType&#125;</div><div class="line">          center=&#123;this.state.center&#125;</div><div class="line">          marker=&#123;this.state.marker&#125;</div><div class="line">          markers=&#123;this.state.markers&#125;</div><div class="line">          style=&#123;styles.map&#125;</div><div class="line">          onMarkerClick=&#123;(e) =&gt; &#123;</div><div class="line">            console.warn(JSON.stringify(e));</div><div class="line">          &#125;&#125;</div><div class="line">          onMapClick=&#123;(e) =&gt; &#123;</div><div class="line">          &#125;&#125;</div><div class="line">        &gt;</div><div class="line">        &lt;/MapView&gt;</div><div class="line">        &lt;View style=&#123;styles.row&#125;&gt;</div><div class="line">          &lt;Button style=&#123;styles.btn&#125; onClick=&#123;this.getLocation&#125;&gt;获取位置信息&lt;/Button&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  button: &#123;</div><div class="line">    margin: 20,</div><div class="line">  &#125;,</div><div class="line">  row: &#123;</div><div class="line">    flexDirection: &apos;row&apos;,</div><div class="line">    height: 40</div><div class="line">  &#125;,</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;flex-start&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  map: &#123;</div><div class="line">    width: Dimensions.get(&apos;window&apos;).width,</div><div class="line">    height: Dimensions.get(&apos;window&apos;).height - 200,</div><div class="line">    marginBottom: 16</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default BaiduLocationTest;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2017/06/17/react-native-baidu-map-android/map.gif" width="300" title="百度地图">
<img src="/2017/06/17/react-native-baidu-map-android/location.png" width="500" title="位置信息">]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fetch-Timeout-Wrapper]]></title>
      <url>https://zhulichao.github.io/2017/06/17/fetch-timeout-wrapper/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在使用react-native进行开发时，用到网络请求的地方，如果服务端未启动或存在网络问题，会弹出Network request failed，想自己设置客户端超时时间及超时提示信息，在react-native问题列表和网上查找后，已确认react-native用的fetch没有直接提供timeout设置的。</p>
<p>在网上查到了使用ES6的promise封装fetch的方式，自己修改成如下timeout_fetch.js工具类，经过验证可以解决使用fetch时timeout的设置问题，将项目所有使用fetch的地方替换成使用timeout_fetch即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">config中配置了系统默认的请求超时时间，方便后期统一修改</div><div class="line">*/</div><div class="line">import &#123; default as config &#125; from &apos;../config/base&apos;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @param &#123;Promise&#125; fetch_promise fetch请求返回的Promise</div><div class="line"> * @param &#123;number&#125; timeout 超时时间，单位为毫秒</div><div class="line"> * @return 返回Promise</div><div class="line"> */</div><div class="line">function promise_fetch(fetch_promise, timeout) &#123;</div><div class="line">  let timeout_fn = null;</div><div class="line">  // 这是一个可以被reject的promise</div><div class="line">  let timeout_promise = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    timeout_fn = () =&gt; &#123;</div><div class="line">      const error = new Error(&apos;网络请求超时&apos;);</div><div class="line">      reject(error);</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">  /*</div><div class="line">  这里使用Promise.race，以先返回的 resolve 或 reject 的结果来传入后续绑定的回调。</div><div class="line">  timeout不是请求连接超时的含义，它表示请求的response时间，fetch的timeout即使超时发生了，本次请求也不会被abort丢弃掉，它在后台仍然会发送到服务器端，只是本次请求的响应内容被丢弃而已。</div><div class="line">  */</div><div class="line">  const abortable_promise = Promise.race([</div><div class="line">    fetch_promise,</div><div class="line">    timeout_promise</div><div class="line">  ]);</div><div class="line">  setTimeout(function() &#123;</div><div class="line">    timeout_fn();</div><div class="line">  &#125;, timeout);</div><div class="line">  return abortable_promise;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @param &#123;string&#125; url 请求地址</div><div class="line"> * @param &#123;object&#125; params 请求参数，其中timeout是超时设置，如果没有取全局配置的默认值</div><div class="line"> * @return 返回Promise</div><div class="line"> */</div><div class="line">export function timeout_fetch(url, params) &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    promise_fetch(fetch(url, params), params.timeout ? params.timeout : config.clientTimeout * 1000)</div><div class="line">      .then((responseData) =&gt; &#123;</div><div class="line">          resolve(responseData);</div><div class="line">      &#125;)</div><div class="line">      .catch((err) =&gt; &#123;</div><div class="line">          reject(err);</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-目录结构]]></title>
      <url>https://zhulichao.github.io/2017/05/22/react-native-floder/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">jxtrq_rn                                </div><div class="line">  ├── /_test_                  # RN生成，测试目录</div><div class="line">  ├── /android                 # RN生成，android代码目录，具体见下图</div><div class="line">  ├── /ios                     # RN生成，代码目录，具体见下图</div><div class="line">  ├── /node_modules            # 自动生成，安装依赖的目录，不会被提交</div><div class="line">  ├── .babelrc                 # RN生成，Babel配置文件</div><div class="line">  ├── .buckconfig              # RN生成，Buck是Mac OS X和Linux使用的构建工具</div><div class="line">  ├── .flowconfig              # RN生成，Flow是一个静态的类型检查工具</div><div class="line">  ├── .gitattributes           # RN生成，配置Git对一个特定的子目录或子文件集运用那些设置项</div><div class="line">  ├── .gitignore               # RN生成，配置Git忽略提交的文件</div><div class="line">  ├── .watchmanconfig          # RN生成，Watchman用于监控文件变化，辅助实现工程修改所见即所得</div><div class="line">  ├── yarn.lock                # RN生成，Yarn是node包管理器，yarn.lock文件使程序在不同的机器上以同样的方式安装依赖</div><div class="line">  ├── package.json             # RN生成，用于描述项目的基本信息以及需要的依赖信息</div><div class="line">  ├── index.android.js         # RN生成，android入口文件</div><div class="line">  ├── index.ios.js             # RN生成，ios入口文件</div><div class="line">  |</div><div class="line">  ├── index.web.js             # 自定义，web入口文件</div><div class="line">  ├── CHANGELOG.md             # 自定义，版本更新日志</div><div class="line">  ├── README.md                # 自定义，项目运行说明</div><div class="line">  ├── /docs                    # 自定义，项目相关的说明目录</div><div class="line">  |     ├── /dev                    # 开发相关目录</div><div class="line">  |     |     ├── api                   # 接口相关目录</div><div class="line">  |     ├── /work                   # 工作内容、计划目录</div><div class="line">  |     └── /training               # 培训相关文档</div><div class="line">  └── /app                     # 自定义，项目主体RN代码</div><div class="line">        ├── config                  # 项目相关的配置信息，配置后台接口等</div><div class="line">        ├── resources               # 项目资源目录，目前主要是图片资源</div><div class="line">        ├── actions                 # redux的action的目录</div><div class="line">        ├── reducers                # redux的reducer的目录，一般与actions对应</div><div class="line">        ├── components              # 组件目录，这些组件在项目中属于展示组件，不直接关联redux</div><div class="line">        ├── containers              # 组件目录，这些组件在项目中属于智能组件，直接关联redux，里面再返回展示组件</div><div class="line">        ├── store                   # 初始化redux的目录</div><div class="line">        ├── utils                   # 相当于工具类</div><div class="line">        ├── styles                  # 项目公共样式、主题相关的目录</div><div class="line">        └── App.js                  # 平台无关的项目入口文件，通常根据条件决定显示欢迎页、登录页或主页</div></pre></td></tr></table></figure>
<img src="/2017/05/22/react-native-floder/android.png" width="300" title="android目录截图">
<img src="/2017/05/22/react-native-floder/ios.png" width="300" title="ios目录截图">
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ant Design Mobile 组件注意]]></title>
      <url>https://zhulichao.github.io/2017/05/21/ant-design-mobile-notice/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>Popover、Progress外面如果没有View并且给高度的话可能不显示，外层是ScrollView应该也可以显示</li>
<li>Tabs最好指定activeKey否则可能有奇怪的返回第一个TabPane问题</li>
<li>SwipeAction放在TouchableHighlight外，否则会报 undefined is not an object (evaluation ‘this.refs.swipeoutContent.measure’) 错误</li>
</ul>
<h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ul>
<li>PickerView 编辑不了，官方也没有给出RN上的demo</li>
<li>Range 使用不了，直接红屏报错<code>Expected a component class,got [object Object]</code></li>
<li>Steps 不能水平方向</li>
<li>ListView中使用SwipeAction时效果不好，左右滑动会触发上下滑动，造成ListView滚动，不容易出现删除按钮，在部分Android机型上，目前已知的是“VT5000”上，点击时触发的是SwipeAction的onOpen方法，很少会触发ListView的onPress方法</li>
<li>Tabs.TabPane 在官网上写的tab属性支持 React.Element，目前经过确认是不支持的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Ant Design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ant Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android-Small框架-基础]]></title>
      <url>https://zhulichao.github.io/2017/05/06/android-small-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small github地址</a><br><a href="http://code.wequick.net/Small/cn/quickstart" target="_blank" rel="external">Small官方教程</a><br><a href="http://www.jianshu.com/p/cd152c75b0e0?nomobile=yes" target="_blank" rel="external">使用Small进行Android模块化开发</a><br><a href="http://www.jianshu.com/p/8eca24846445" target="_blank" rel="external">small的插件化的基本使用</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>插件模块是Small特有的插件化与IDE完美结合的产物，做到了“模块即组件，组件即插件”。 组件是工程的角度，插件是应用的角度。只有做到了清晰的组件解耦，才能更好的拆分插件模块。</p>
<p>出于业务需求考虑，Small定义了两类插件：公共库插件与应用插件。应用插件相对简单，就是用来把大应用拆分成一个个小的业务单元，公共库插件则是为这些业务单元提供公共的代码与资源。</p>
<p>通过设定 URI，宿主、本地化应用插件、本地化web插件、在线网页，以及任何自定义的插件之间能够相互调起与传递参数。</p>
<p>目前已支持 Android 、iOS 以及 HTML5 插件。并且三者之间可以通过同一套 JavaScript 接口进行通信。</p>
<h2 id="开发基础"><a href="#开发基础" class="headerlink" title="开发基础"></a>开发基础</h2><ul>
<li><p>通过 build.gradle 集成 Small，项目的build.gradle文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line">        classpath &apos;net.wequick.tools.build:gradle-small:1.2.0-beta3&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">apply plugin: &apos;net.wequick.small&apos;</div><div class="line">small &#123;</div><div class="line">    aarVersion = &apos;1.2.0-beta3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过 自定义Application 初始化 Small，app &gt; java &gt; com.example.mysmall &gt; SmallApp中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SmallApp extends Application &#123;</div><div class="line">    public SmallApp() &#123;</div><div class="line">        // Small框架初始化</div><div class="line">        Small.preSetUp(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  AndroidManifest.xml中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line">    android:name=&quot;.SmallApp&quot;</div><div class="line">    ...&gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建插件模块 App.main，注意包名为com.example.app.main</p>
</li>
<li><p>通过 buildLib，buildBundle 编译 Small 插件，命令后面可添加 -Dbundle.arch=x86</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradlew buildLib -q</div><div class="line">gradlew buildBundle -q</div></pre></td></tr></table></figure>
</li>
<li><p>通过 bundle.json 配置插件路由，右键 app 模块，New &gt; Folder &gt; Assets Folder 新建 assets 目录，在新建配置文件bundle.json内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;bundles&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;main&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;com.example.appmain&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过 Small.openUri 启动插件，宿主的 app &gt; java &gt; com.example.mysmall &gt; MainActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onStart() &#123;</div><div class="line">    super.onStart();</div><div class="line">    // Small插件初始化</div><div class="line">    Small.setUp(this, new Small.OnCompleteListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onComplete() &#123;</div><div class="line">            // 通过uri启动插件</div><div class="line">            Small.openUri(&quot;main&quot;, MainActivity.this);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建公共库插件模块 Lib.style，注意包名为com.example.lib.style，将app.main/src/main/res/values 下除了strings.xml的文件移动到lib.style/src/main/res/values 目录下，修改 lib.style/src/main/res/colors.xml中colorPrimary值为#2FA739</p>
</li>
<li><p>添加公共库引用，修改 app.main/build.gradle，增加对 lib.style 的依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile project(&apos;:lib.style&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加插件路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;bundles&quot;: [</div><div class="line">    ...</div><div class="line">    &#123;</div><div class="line">        &quot;pkg&quot;: &quot;com.example.libstyle&quot;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>重新运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradlew cleanLib -q</div><div class="line">gradlew buildLib -q</div><div class="line">gradlew buildBundle -q</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="工程结构图"><a href="#工程结构图" class="headerlink" title="工程结构图"></a>工程结构图</h2><img src="/2017/05/06/android-small-base/small.png" title="工程目录结构">
<ul>
<li><p>宿主：工程中的app模块，不能依赖lib.xxx</p>
<ul>
<li>assets目录下的bundle.json声明宿主使用的插件，每个bundle可定义一些rule去启动特定的Activity</li>
<li>可增加签名配置和共享的依赖库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">        storeFile file(&apos;../sign/release.jks&apos;)</div><div class="line">        storePassword &quot;5mall@ndro!d&quot;</div><div class="line">        keyAlias &quot;small&quot;</div><div class="line">        keyPassword &quot;5mall@ndro!d&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        signingConfig signingConfigs.release</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[...]</div><div class="line"></div><div class="line">compile &apos;com.android.support:design:23.1.1&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>公共库插件：工程中的lib.xxx模块，是标准的Android库工程</p>
<ul>
<li>第三方依赖合并到lib.vendor中管理</li>
<li>样式相关的资源放在lib.style中管理</li>
<li>其它工具类，以及网络、存储等跨业务模块的底层代码可以在lib.utils中管理</li>
<li>可以通过compile project(‘:插件模块名’)来被应用插件模块所引用</li>
<li>编译时(buildLib)会被打包成为一个可独立更新的插件</li>
</ul>
</li>
<li>业务插件：工程中的app.xxx模块，是标准的Android应用工程<ul>
<li>app.main一般是程序的入口，并控制业务逻辑的主线</li>
<li>其他app.xxx一般是业务逻辑的支线，插件内的业务逻辑之间关联性较强</li>
<li>app.xxx可以依赖多个lib.xxx</li>
<li>可独立运行、独立更新</li>
</ul>
</li>
<li>宿主分身模块：工程中的app+xxx模块，是标准的Android应用工程<ul>
<li>分身是宿主的一部分，最终编译到宿主中，不可被独立更新</li>
<li>具备占坑(stub)的功能，即在宿主中预留特定的(无法插件化的)资源、代码或manifest项目，使系统可以正常识别，任何稳定的资源、代码、第三方库也可使用分身下沉到宿主中，以减少插件体积</li>
<li>它提供了可以让插件模块自由访问其中的资源与代码的能力，并为所有插件模块添加该依赖</li>
<li>需要占坑的项目为<ul>
<li>必须在宿主Manifest注册的项目，包括：所有权限，受限 Activity，任何 Provider、Service、BroadcastReceiver</li>
<li>必须在宿主占坑的资源，包括：转场动画、通知栏图标、自定义视图、桌面快捷方式图标</li>
</ul>
</li>
</ul>
</li>
<li>web插件工程：工程中的web.xxx模块，本地网页组件</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>gradlew samll          # 查看编译情况</li>
<li>gradlew buildLib -q    # 编译公共库插件，不仅编译了lib.xxx，还编译了宿主模块</li>
<li>gradlew buildBundle -q # 编译业务插件 </li>
<li>gradlew -p app.main assembleRelease # 单独编译一个插件app.main</li>
<li>gradlew cleanLib -q    # 清除公共库</li>
<li>gradlew cleanBundle -q # 清除业务库</li>
</ul>
<p>其中-q是安静模式，可以让输出更好看，也可以不加。对插件的编译，会在app/smallLibs/生成对应的so文件，这些so文件本质上就是独立的apk包。</p>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p>// 框架初始化<br>Small.preSetUp(this);</p>
<p>// 浏览器跳转url<br>Small.setBaseUri(“<a href="http://code.wequick.net/small-sample/" target="_blank" rel="external">http://code.wequick.net/small-sample/</a>“);</p>
<p>// 在宿主的 Application 里指定是否从 assets 读取插件，有build.gradle 中 buildToAssets的值指定<br>Small.setLoadFromAssets(BuildConfig.LOAD_FROM_ASSETS);</p>
<p>// 设定基本的跳转地址<br>Small.openUri(“<a href="https://github.com/wequick/Small/issues" target="_blank" rel="external">https://github.com/wequick/Small/issues</a>“, MainActivity.this);</p>
<p>// 更新bundles.json和version信息<br>Small.updateManifest(info.manifest, false)</p>
<p>// 获取补丁文件目录<br>net.wequick.small.Bundle bundle = Small.getBundle(u.packageName);<br>File file = bundle.getPatchFile();</p>
<p>// 使更新后的插件生效<br>bundle.upgrade();</p>
<p>// 暗度插件意图<br>Small.wrapIntent(intent);</p>
<p>// 创建远程fragment<br>Small.createObject(“fragment-v4”, sUris[position], MainActivity.this);</p>
<p>// 设置网页的基本回调<br>Small.setWebViewClient(new MyWebViewClient());</p>
<p>// TODO<br>Small.getBundleVersions()</p>
<p>// TODO<br>Small.setWebActivityTheme(R.style.AppTheme);</p>
<p>// TODO<br>Small.getIsNewHostApp()</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>对插件的编译，会在app/smallLibs/生成对应的so文件，这些so文件本质上就是独立的apk包，所以修改某个模块之后，要在运行时生效，必须先编译对应的插件，更新smallLibs下的.so文件</li>
<li>编译后的lib，如果删除资源再编译就会出现错误“No support deleting resources on lib.* now!”，所以在删除lib中的资源后，需要删除lib.xxx模块下的public.txt再通过cleanLib, buildLib, cleanBundle, buildBundle重新编译</li>
<li>从插件初始化，到初始化完成会耗费几百毫秒，甚至更多可以考虑将欢迎页放入宿主工程之中，如果欢迎页有比较复杂的广告逻辑或统计相关的逻辑，则可以考虑在主插件中做一个透明的Activity来处理</li>
<li>关于插件的Manifest，可以在插件的Manifest中指定application，每个插件的Application都会在Small.setup时被创建；对于需要处理android:configChanges的Activity需要在宿主中注册；如果要通过uri启动Activity，则对应Activity应该Manifest中进行注册，如果需app插件可以独立运行，但在Manifest中至少要注册一个主Activity</li>
</ul>
<h2 id="热更新？"><a href="#热更新？" class="headerlink" title="热更新？"></a>热更新？</h2><p>打开项目的app工程也就是入口工程，文件夹里有一个smallLibs文件夹，里面有一个armeabi文件，里面是.so文件，这些文件就是通过buildLib和buildBundle来把非宿主的app中的文件打包成的.so文件。最终安装到手机上的apk其实就是只有宿主的apk和其内部的.so文件，通过加载.so文件来实现加载插件中的文件。热更新就是更新bundle.json文件和插件.so文件的过程。</p>
<h2 id="增量更新？"><a href="#增量更新？" class="headerlink" title="增量更新？"></a>增量更新？</h2><p>增量更新的原理是：在服务器端先拿新版本安装包和旧版本安装包进行对比，在生成差异包之后下发，之后客户端根据对应的差异包和本地旧版本安装包合成，便生成了新版本安装包。</p>
<p>对于Small框架，它把每个插件都编译成.so文件，然后存放到app的native目录下，不过，如果它发现自己的download目录有新的插件，那么就会去加载download目录下的插件，并且这种加载优先权是最大的，也就是说它会优先加载download目录下的插件。所以，如果我们要做增量更新，旧文件就从app的native目录进行读取，然后从服务器端下载增量包，最后合成的文件存放到download目录下，这样每次插件启动都会到download目录下加载新的插件。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-嵌入到android]]></title>
      <url>https://zhulichao.github.io/2017/05/04/react-native-insert-android/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://reactnative.cn/docs/0.44/integration-with-existing-apps.html#content" target="_blank" rel="external">嵌入到现有原生应用</a><br><a href="http://www.jianshu.com/p/22aa14664cf9" target="_blank" rel="external">史上最详细的Android原生APP中添加ReactNative 进行混合开发教程</a></p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="创建android项目"><a href="#创建android项目" class="headerlink" title="创建android项目"></a>创建android项目</h3><ul>
<li>打开Android studio，Start a new Android Studio project 新建项目</li>
<li>其中 Application name: ReactNativeAppDemo，Company Domain: example.com，Minimum SDK: API 16:Android 4.1(Jelly Bean)</li>
<li>添加Empty Activity，其中 Activity Name: MainActivity，Layout Name: activity_main</li>
<li>在Android视图下，右键com.example.reactnativeappdemo，New -&gt; Java Class，其中 Name：MyReactActivity</li>
</ul>
<p>MainActivity.java完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.example.reactnativeappdemo;</div><div class="line"></div><div class="line">import android.content.Intent;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.Button;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123;</div><div class="line">    private Button btn;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        btn = (Button)findViewById(R.id.reactive_button);</div><div class="line">        btn.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void onClick(View view) &#123;</div><div class="line">        switch (view.getId())&#123;</div><div class="line">            case R.id.reactive_button:</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyReactActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyReactActivity完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package com.example.reactnativeappdemo;</div><div class="line"></div><div class="line">import android.app.Activity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.view.KeyEvent;</div><div class="line"></div><div class="line">import com.facebook.react.ReactInstanceManager;</div><div class="line">import com.facebook.react.ReactRootView;</div><div class="line">import com.facebook.react.common.LifecycleState;</div><div class="line">import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;</div><div class="line">import com.facebook.react.shell.MainReactPackage;</div><div class="line"></div><div class="line">public class MyReactActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler&#123;</div><div class="line">    private ReactRootView mReactRootView;</div><div class="line">    private ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        mReactRootView = new ReactRootView(this);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(&quot;index.android.bundle&quot;)</div><div class="line">                .setJSMainModuleName(&quot;index.android&quot;)</div><div class="line">                .addPackage(new MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        // 注意这里的HelloWorld必须对应“index.android.js”中的</div><div class="line">        // “AppRegistry.registerComponent()”的第一个参数</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager, &quot;HelloWorld&quot;, null);</div><div class="line">        setContentView(mReactRootView);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void invokeDefaultOnBackPressed() &#123;</div><div class="line">        super.onBackPressed();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onPause() &#123;</div><div class="line">        super.onPause();</div><div class="line"></div><div class="line">        if (mReactInstanceManager != null) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(this);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line"></div><div class="line">        if (mReactInstanceManager != null) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(this, this);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line"></div><div class="line">        if (mReactInstanceManager != null) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void onBackPressed() &#123;</div><div class="line">        if (mReactInstanceManager != null) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; else &#123;</div><div class="line">            super.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public boolean onKeyUp(int keyCode, KeyEvent event) &#123;</div><div class="line">        if (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != null) &#123;</div><div class="line">            mReactInstanceManager.showDevOptionsDialog();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return super.onKeyUp(keyCode, event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="React-Native集成到android项目中"><a href="#React-Native集成到android项目中" class="headerlink" title="React Native集成到android项目中"></a>React Native集成到android项目中</h2><ul>
<li>cmd进入在ReactNativeAPPDemo的根目录，执行 npm init</li>
<li>执行 npm install –save react react-native</li>
<li>执行 curl -o .flowconfig <a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig，作用是下载.flowconfig配置文件，用于约束js代码的写法，也可以手动创建文件在浏览器打开这个网址复制内容，这一步非必需" target="_blank" rel="external">https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig，作用是下载.flowconfig配置文件，用于约束js代码的写法，也可以手动创建文件在浏览器打开这个网址复制内容，这一步非必需</a></li>
<li><p>package.json文件如下，注意react和react native的版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;reactnativeappdemo&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.android.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;react&quot;: &quot;~15.4.1&quot;,</div><div class="line">    &quot;react-native&quot;: &quot;0.42.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加index.android.js文件到项目中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">class HelloWorld extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">                &lt;Text style=&#123;styles.hello&#125;&gt;React Native:Hello, World&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    hello: &#123;</div><div class="line">        fontSize: 20,</div><div class="line">        textAlign: &apos;center&apos;,</div><div class="line">        margin: 10,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(&apos;HelloWorld&apos;, () =&gt; HelloWorld);</div></pre></td></tr></table></figure>
</li>
<li><p>app/build.gradle配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;com.facebook.react:react-native:+&quot; // From node_modules.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>整个工程build.gradle配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        ...</div><div class="line">        maven &#123;</div><div class="line">            // All of React Native (JS, Android binaries) is installed from npm</div><div class="line">            url &quot;$rootDir/node_modules/react-native/android&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>app/src/main/AndroidManifest.xml配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</div><div class="line">&lt;application</div><div class="line">    ...</div><div class="line">    &lt;activity</div><div class="line">        android:name=&quot;.MyReactActivity&quot;</div><div class="line">        android:label=&quot;@string/app_name&quot;</div><div class="line">        android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line">    &lt;/activity&gt;</div><div class="line">    &lt;activity</div><div class="line">        android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot;&gt;</div><div class="line">    &lt;/activity&gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><ul>
<li>先运行android项目</li>
<li>cmd进入在ReactNativeAPPDemo的根目录，执行 npm start</li>
</ul>
<img src="/2017/05/04/react-native-insert-android/insert-android.gif" width="300" title="运行结果">
<h2 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h2><p>如果点击按钮后应用崩溃了，同时Android Studio中报错 permission denied for this window type ，需要开启悬浮窗(overlay)权限。<br>解决方法一，修改MainActivity.java中代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@Override</div><div class="line">public void onClick(View view) &#123;</div><div class="line">    switch (view.getId())&#123;</div><div class="line">        case R.id.reactive_button:</div><div class="line">            // 修改了这里的代码</div><div class="line">            if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">                if(!Settings.canDrawOverlays(this)) &#123;</div><div class="line">                    Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">                    startActivity(intent);</div><div class="line">                    return;</div><div class="line">                &#125; else &#123;</div><div class="line">                    //绘ui代码, 这里说明6.0系统已经有权限了</div><div class="line">                    Intent intent = new Intent(MainActivity.this,MyReactActivity.class);</div><div class="line">                    startActivity(intent);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                //绘ui代码,这里android6.0以下的系统直接绘出即可</div><div class="line">                Intent intent = new Intent(MainActivity.this,MyReactActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解决方法二，修改MyReactActivity.java中代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MyReactActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler&#123;</div><div class="line">    private static final int OVERLAY_PERMISSION_REQ_CODE =10005 ;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            if (!Settings.canDrawOverlays(this)) &#123;</div><div class="line">                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</div><div class="line">                        Uri.parse(&quot;package:&quot; + getPackageName()));</div><div class="line">                startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">        if (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123;</div><div class="line">            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">                if (!Settings.canDrawOverlays(this)) &#123;</div><div class="line">                    // SYSTEM_ALERT_WINDOW permission not granted...</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2017/05/04/react-native-insert-android/insert-android2.gif" width="300" title="运行结果">]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-android-apk]]></title>
      <url>https://zhulichao.github.io/2017/05/03/react-native-android-apk/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RN项目打包"><a href="#RN项目打包" class="headerlink" title="RN项目打包"></a>RN项目打包</h2><ul>
<li>cmd下执行 cd .android 进入系统android目录</li>
<li>执行 keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000 ，它会在android目录(C:/Users/Administrator/.android/)下生成一个叫做my-release-key.keystore的密钥库文件</li>
<li>把my-release-key.keystore文件放到工程中的android/app文件夹下</li>
<li><p>编辑~/.gradle/gradle.properties，~表示用户目录，比如windows上可能是C:\Users\用户名，而mac上可能是/Users/用户名，没有就创建一个，添加如下的代码，把其中的<em>**</em>替换为相应密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</div><div class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=*****</div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=*****</div></pre></td></tr></table></figure>
</li>
<li><p>编辑你项目目录下的android/app/build.gradle，添加如下的签名配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123; ... &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>cmd进入项目android目录，执行 gradlew installRelease，生成的APK文件位于项目的android/app/build/outputs/apk/app-release.apk</p>
</li>
</ul>
<h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><p>执行<code>gradlew installRelease</code> 如果报错<code>Unable to process incoming event &#39;ProcessComplete&#39; &lt;ProgressCompleteEvent&gt;</code>，这种错误<br>需要在在混淆文件/android/app/proguard-rules.pro末尾中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-keep class android.text &#123;* ;&#125;</div><div class="line">-dontwarn android.text.*</div></pre></td></tr></table></figure></p>
<h2 id="修改安装文件图标及显示名称"><a href="#修改安装文件图标及显示名称" class="headerlink" title="修改安装文件图标及显示名称"></a>修改安装文件图标及显示名称</h2><p>将 /android/app/src/main/res/values/strings.xml 中 app_name 的值改成想要的app名称</p>
<p>将 /android/app/src/main/res/ 路径下，mipmap-开头的目录中的图片替换为同名的其它图片</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP-基础]]></title>
      <url>https://zhulichao.github.io/2017/05/02/tcp-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ul>
<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认。</li>
<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态。</li>
<li><p>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>
  <img src="/2017/05/02/tcp-base/connect.png" title="三次握手">
<p>  第一个包，即Client发给Server的SYN中途被丢，Client会周期性超时重传，直到收到Server的确认；<br>  第二个包，即Server发给Client的SYN+ACK中途被丢，Server会周期性超时重传，直到收到Client的确认；<br>  第三个包，即Client发给Server的ACK中途被丢：<br>&emsp; a）假定此时双方都没有数据发送，Server会周期性超时重传SYN+ACK，直到收到Client的确认收到之后Server的TCP连接业也为established状态；<br>&emsp; b）假定此时Client有数据发送，Server收到Client的Data+ACK，自然会切换为established状态，并接受Client的Data；<br>&emsp; c）假定Server有数据发送，数据发送不了，会一直周期性超时重传SYN+ACK，直到收到Client的确认才可以发送数据。</p>
</li>
</ul>
<p><strong>为什么连接的时候需要三次握手？</strong></p>
<p>在谢希仁的《计算机网络》中是这样说的：“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。”书中举例：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<p>网上查到：“这个问题的本质是，信道不可靠，但是通信双发需要就某个问题达成一致，而要解决这个问题，无论你在消息中包含什么信息，三次通信是理论上的最小值。所以三次握手不是TCP本身的要求，而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的。这可视为对“三次握手”目的的另一种解答思路。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul>
<li>第一次挥手：主机1（<strong>可以使客户端，也可以是服务器端</strong>），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了。</li>
<li>第二次挥手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求。</li>
<li>第三次挥手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态。</li>
<li><p>第四次挥手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p>
  <img src="/2017/05/02/tcp-base/close.png" title="四次挥手">
</li>
</ul>
<p><strong>为什么断开的时候需要四次挥手？</strong></p>
<p>因为TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p>
]]></content>
      
        <categories>
            
            <category> TCP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表单-设计]]></title>
      <url>https://zhulichao.github.io/2017/04/30/form-design/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>别人评论《Web表单设计：点石成金的艺术》这本书非常好，ANT DESING 官网的资源中也提到了这本书，于是买了一本看看。这本书已经绝版了，我买的是影印版的，图片大多数都看不清，我个人对这本书并没有什么特别好的感觉，没感觉到对自己有什么帮助。现在把每章的最佳实践记录下来，希望能够加深些理解，后期需要时能够想到这本书。</p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li><strong>尽量减少痛苦</strong>    人们要的是填完表单之后的东西，所以填写过程应尽量简洁、容易。</li>
<li><strong>说明填写完成路径</strong>    几乎每个表单的目标就是填完，表单应清晰告诉人们如何完成这一目标。</li>
<li><strong>考虑情景</strong>    表单并非凭空存在。它们几乎都是更广泛情境（受众群众、应用、业务）的组成部分，这些情境决定了如何使用表单。</li>
<li><strong>确保一致沟通</strong>    表单是顾客和公司之间对话的中间人。多个团队参与对话（市场营销、隐私部门、工程部、设计部、商业部等），但表单只能用一种声音说话。</li>
</ul>
<h2 id="表单的组织"><a href="#表单的组织" class="headerlink" title="表单的组织"></a>表单的组织</h2><ul>
<li>应当花时间评估表单中的问题。应当提高警觉，去除一切不必要的问题。</li>
<li>表单所提问题（标签）应当尽量简洁。</li>
<li>如果人们会误解简洁标签，应当寻找使用自然语言的机会，澄清表单要求人们回答的问题。</li>
<li>表单所提问题来自多个不同人或部门，应当确保表单统一口径。</li>
<li>可以将表单内容组织成逻辑组，有助于浏览和完成填写。</li>
<li>如果可能，应当以对话形式构建表单。主题间的自然间断有助于组织表单。</li>
<li>如果表单可自然分成若干主题，一个网页可能就足够组织表单。</li>
<li>如果表单包含大量问题，同时有若干主题，可能需要多个网页来组织表单。</li>
<li>如果表单包含大量问题，而只和一个主题相关，可能需要多个网页来组织表单。</li>
<li>可以考虑在表单填完之后提出可选问题。可能会比在初始表单中就提出这些问题能获得更多答案。</li>
<li>可以考虑采用Web惯例调查发现特定类型网站如何组织表单。</li>
<li>应当采用最少的必要视觉信息来区分内容组。</li>
<li>首字母应当大写，使内容组更容易浏览。</li>
</ul>
<h2 id="完成之路"><a href="#完成之路" class="headerlink" title="完成之路"></a>完成之路</h2><ul>
<li>确保表单名称符合人们的期望，并简洁解释每个表单的用途。</li>
<li>如果表单需要时间或者查询信息才能填写那么可以采用起始页来设定人们的期望。</li>
<li>由始至终采用清晰浏览线和有效视觉步伐来引导人们，确保说明清晰的填写完成路径。</li>
<li>对于关键任务表单，比如结算表单或者注册表单，应当去除会分散注意力的部分、任何导致人们放弃填写的连接或内容。</li>
<li>如果表单分为多个已知的有序网页，可以采用进程指示来传达范围、状态和位置等信息。</li>
<li>如果表单没有清晰的有序网页，不要采用进程指示，应当采用更笼统的进程指示，而不要设置错误期望。</li>
<li>设计表单布局时，应考虑使用Tab键的“跳转”体验。</li>
<li>采用“tabindex”HTML属性来控制表单的跳转顺序。</li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li>表单标签应当使用简洁的自然语言，大小写一致，所提问题应当尽量直观，容易理解。</li>
<li>如果要减少填写时间，或者出于本地化原因，标签长度需要灵活多变，可采用顶对齐标签。</li>
<li>如果与上述目标类似，但垂直屏幕空间有限，可采用右对齐标签。</li>
<li>如要求人们浏览表单标签，知道必填问题或者回答多个问题中的若干特定问题，可采用左对齐标签。</li>
<li>如果表单非常短，屏幕空间极度有限，可采用输入框内标签，同时应当确保合适的交互和情境。</li>
<li>确保清晰区分标签和数据，特别是对于输入框内标签。</li>
<li>如果考虑在同一应用工具的不同表单采用不同标签对齐方式，应当平衡情境和一致性。</li>
<li>单一表格中采用不同标签对齐方式会破坏明确完成路径，人们会觉得迷惑。</li>
</ul>
<h2 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h2><ul>
<li>应当为所提问题提供合适的输入框：属于是否问题？还是需要从多个互斥选项中选择一项？等等。</li>
<li>如有可能，应当确保输入框长度能提供有意义的暗示，以帮助人们有效回答问题。</li>
<li>如果不是上述情况，输入框长度应当保持一致，为答案提供足够空间。</li>
<li>尽量避免出现可选输入框。</li>
<li>如果表单大部分输入是必填项，标明可选项即可。</li>
<li>如果表单中大部分是可选项，表名必填项即可。</li>
<li>标明表单必填或可选项，文字是最清晰的办法。但“*”代表必填项相对容易理解。</li>
<li>将必填项或者可选项标识器与输入标签相关联，便于人们知道需要回答哪些问题。</li>
<li>如果输入框存在自然结构，能为人们回答问题提供有价值线索，应当通过视觉方式将输入框进行分组，并清晰传达自然结构。</li>
<li>如果答案明显有多种格式，应当考虑使用弹性输入框。</li>
<li>确保弹性输入框不会导致填写简单问题变得复杂。</li>
</ul>
<h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><ul>
<li>尽量避免表单中出现次动作，当向人们提供完成表单的单一路径。</li>
<li>如果需要使用次动作，应当确保主动作和次动作视觉差异清晰。</li>
<li>如果表单所提问题分布在多个网页，主动作应当让人们更接近完成表单，而次动作应当允许人们返回。</li>
<li>主动作与输入框对齐，能提供明确路径完成表单。</li>
<li>如果的确需要采用具有潜在破坏性的次动作，比如重置或者清除，应当提供简便的撤销方法。</li>
<li>处理表单时，应当明确表达，避免重复提交。</li>
<li>不要依赖帮助文字来提醒人们不要两次点击主动作，而应当通过禁用主动作按钮来阻止人们这样做。</li>
<li>思考组合服务条款和主动作的机会，以确保法律要求合理化。</li>
</ul>
<h2 id="帮助文字"><a href="#帮助文字" class="headerlink" title="帮助文字"></a>帮助文字</h2><ul>
<li>不要依赖帮助文字来弥补表单缺点，尽量减少表单中的帮助文字，以促成更好的设计方案。</li>
<li>帮助文字最合适解释人们不熟悉的数据，例如，为什么要问这些问题、安全和隐私、建议回答问题的方式及说明可填项。</li>
<li>简洁的帮助文字毗邻问题是最清晰的方式。</li>
<li>输入框内的帮助文字只能用于提供回答问题的方式。</li>
<li>如果人们知道表单问题答案，但不确定如何回答或者为什么回答，可以考虑使用自动即时帮助系统。</li>
<li>如果表单问题人们不熟悉或者复杂，而且可能同样的人会多次使用，可以考虑采用用户激活的帮助系统。</li>
<li>除非每个问题都需要很多帮助文字或者内容（图像、图表），使用即时系统可以避免网页跳动拉伸。</li>
<li>如果帮助内容很多，可以使用一致的帮助区域，不要使用即时帮助。</li>
<li>帮助文字应当尽可能具体。如果帮助文字适用于一组相关输入框，而不是一个输入框，考虑采用网页一部分显示帮助内容，清晰表明输入框组和帮助文字之间的关系。</li>
<li>图标、链接或按钮用于用户激活的帮助文字触发器，应放在标签旁，不要放在输入框旁。</li>
<li>如果要求用户填入敏感资料，考虑使用有操作含义的帮助文字，允许人们确认资料安全。</li>
</ul>
<h2 id="错误与成功"><a href="#错误与成功" class="headerlink" title="错误与成功"></a>错误与成功</h2><ul>
<li>如果有错误阻碍人们完成填写表单，应该明确告诉人们。错误消息可以说是表单中最重要元素。确保以最重要的形式表现错误。</li>
<li>应当在情境中显示错误消息，以便快速解决。</li>
<li>应当提供可操作的补救措施，帮助人们能够轻松解决错误。</li>
<li>顶部错误消息应当用来说明有错误发生以及相应的解决方案。如果发生多个错误，应当都罗列在顶部消息中。</li>
<li>如果有输入框发生错误，应当采用双重视觉强调清晰标示，确保人们能看到。</li>
<li>从视觉上将表单出错元素与顶部错误消息联系起来，清晰传达需要解决错误才能继续。</li>
<li>红色文字和警告图标应当用于错误消息。</li>
<li>短表单可不采用顶部错误消息或者指示标明发生错误的输入框。如果要采用这种方式，一定要谨慎。</li>
<li>如果表单填写成功，应当用成功消息清晰传达并通过成功消息显示结果。</li>
<li>根据情境提供成功消息，不要阻止进程。</li>
<li>考虑采用动态成功消息突出表单提交成功的结果。</li>
<li>避免成功消息页面成为死胡同。</li>
</ul>
<h2 id="即时验证"><a href="#即时验证" class="headerlink" title="即时验证"></a>即时验证</h2><ul>
<li>考虑使用即时验证，以确认或者建议有效答案，并帮助人们在限制范围内输入。</li>
<li>即时确认最适合用于错误率高、或者有特定格式要求的问题。</li>
<li>即时建议最适合用于大量可供选择有效答案的情况。</li>
<li>即时质量指示条能引导人们更好地回答复杂问题。</li>
<li>如果需要即时验证答案，应当在人们输完答案之后进行，不要在输入过程中进行。</li>
<li>如果需要将答复转成特定格式，应当确保在人们提供答案后转换，不要在填写过程中转换。</li>
<li>如果有输入限制，应当采用实时、动态更新的方法传递输入限制。</li>
</ul>
<h2 id="多余输入"><a href="#多余输入" class="headerlink" title="多余输入"></a>多余输入</h2><ul>
<li>仔细检查表单所有问题，千方百计去除多余的问题。</li>
<li>寻找人们回答问题的模式，准确推断答案。</li>
<li>注意，不要为了去除问题而使问题复杂化。</li>
<li>通过恰当设置满足多数人需要的默认选择，智能默认可以帮助人们回答问题。</li>
<li>人们会忽视默认选项，所以要确保默认选项符合多数人目标。</li>
<li>只要有可能，单选按钮都应当设置默认选项。如果没有明确的默认选项，人们仍可能会明白需要做出选择。但如果他们不明白，就会发生错误。</li>
<li>设置个性化默认选择，客户能更快完成表单，因为答案具有“粘性”。</li>
<li>考虑个性化默认选择发挥作用的地方。并不是表单每项输入都能设为个性化默认选项。</li>
</ul>
<h2 id="额外输入"><a href="#额外输入" class="headerlink" title="额外输入"></a>额外输入</h2><ul>
<li>额外输入可以提供更多选项或者高级选项，满足有需要的用户，同时不妨碍不需要的用户。</li>
<li>应当根据客户需求的优先顺序，安排额外输入。主要用例应当总是直接而且可见；次要用例应当点击一次鼠标即可见。</li>
<li>如果允许人们激活额外输入，额外输入会比自动浮现更受欢迎。</li>
<li>确保触发额外选项的操作措辞明确。如果额外选项自动触发，应当提供线索（图标和文字）来预设期望。</li>
<li>对于单一表单，应当保持一致的额外输入方式。</li>
<li>如果需要显示大量额外输入，可以考虑采用层叠方式代替即时显示方式，避免网页跳动以及用户迷失方向。</li>
<li>确保叠层不会遮住帮助人们填写的输入框，确保人们仍然可以自行填写。</li>
<li>如果额外选项需要单独考虑，应当使用模式叠层。</li>
<li>确保提供用户明确办法关闭或者取消模式叠层并返回表单。</li>
<li>返回表单时，应当显示在叠层中所选选项。</li>
<li>如果吸引客户是主要目标，额外输入可以采用通过选择来引导人们的迷人方试。</li>
</ul>
<h2 id="基于选择的输入"><a href="#基于选择的输入" class="headerlink" title="基于选择的输入"></a>基于选择的输入</h2><ul>
<li>如果每个初始选项的额外输入选项数量很多，那么网页级别的基于选择的输入选项可能是最佳方案。虽然需要两个网页来拆分表单，但动态隐藏和显示额外输入选项不会让人们产生困惑，人们也无需怀疑选项之间是否互斥。</li>
<li>在综合可用性、满意度和眼动跟踪指标方面，垂直选项卡和水平选项卡的表现都不错，但存在选择互斥问题。关于两种方案哪个能更好解决互斥问题，我手上的数据截然相反，因此两种方案似乎都有问题。如果能通过巧妙的交互设计或者视觉设计避开互斥问题，这两个方案就会表现良好。</li>
<li>如果初始选项列表较长（4或者5个以上），而且每个选项都自带一套基于选择的输入，最好能针对额外选项采用下拉列表和视觉分组。</li>
<li>如果每个初始项只有几个额外的输入选项，单选按钮下方显示或者单选按钮内显示是最佳方案。我见过两种方法由于过多页面跳动造成混乱，额外输入项与初始选择之间的关联丧失，因此要谨慎使用。但如果每个选择只有1到3个额外输入项，我会使用单选按钮即时显示。如果可能，应当确定使用清晰的视觉联系和过渡。</li>
<li>所有非活动选项显示或者全部选项都显示基本不能接受，因为选项太多，人们马上会被打昏，而且其中太多选项与人们的目标无关。</li>
<li>整体而言，隐藏无关的表单控件能减轻表单对眼睛的压力，人们能迅速完成表单，除非人们需要。</li>
<li>整体而言，将初始选项及其基于选项的输入靠近显示，能达到最高的满意度。</li>
<li>任何情况下，应当保持初始选项之间的联系清晰。不要让人们看不到顶级初始选项。</li>
<li>任何情况下，清晰显示基于选择的输入项和触发控件之间的关系。</li>
<li>任何情况下，应避免页面过多跳动，页面跳动会中断基于选择的输入项和初始选项之间的关联。</li>
</ul>
<h2 id="循序渐进"><a href="#循序渐进" class="headerlink" title="循序渐进"></a>循序渐进</h2><ul>
<li>规划客户对Web服务的最初体验时，可以考虑采用循序渐进的方式以避免出现注册表单。</li>
<li>如果要采用循序渐进方案，应当确保潜在客户能明白如何使用以及为什么要使用你提供的服务。</li>
<li>如果要为潜在客户自动生成账户，应当确保客户有清晰访问账户的方式。人们可能会忽视或者不看账户生成的提醒邮件，还可能不确定他们是否已经拥有账户。</li>
<li>如果只是将注册表单的输入框分布到多个页面，则不要使用循序渐进方案。因为这可能会降低效率，也使人们感到不快。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> UI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-依赖]]></title>
      <url>https://zhulichao.github.io/2017/04/28/react-dependencies/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a> 初始化空的react项目</p>
<p><a href="http://leonshi.com/redux-saga-in-chinese/index.html" target="_blank" rel="external">redux-saga</a> 处理异步利器</p>
<p><a href="https://github.com/jasonslyvia/redux-sequence-action" target="_blank" rel="external">redux-sequence-action</a> 按序发起action</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-打开文件]]></title>
      <url>https://zhulichao.github.io/2017/04/07/react-native-open/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="本地应用打开文件-react-native-file-opener"><a href="#本地应用打开文件-react-native-file-opener" class="headerlink" title="本地应用打开文件  react-native-file-opener"></a>本地应用打开文件  <a href="https://github.com/huangzuizui/react-native-file-opener" target="_blank" rel="external">react-native-file-opener</a></h2><ul>
<li><p><code>NPM install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react-native-file-opener</div></pre></td></tr></table></figure>
</li>
<li><p><code>IOS install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在Xcode中，将node_modules/react-native-file-opener/ios/RNFileOpener.xcodeproj添加到项目的Libraries目录；</div><div class="line">将Libraries/RNFileOpener.xcodeproj/Products/libRNFileOpener.a拖拽到Build Phases -&gt; Link Binary With Libraries中。</div></pre></td></tr></table></figure>
</li>
<li><p><code>Android install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// file: android/settings.gradle</div><div class="line">...</div><div class="line">include &apos;:react-native-file-opener&apos;</div><div class="line">project(&apos;:react-native-file-opener&apos;).projectDir = new File(settingsDir, &apos;../node_modules/react-native-file-opener/android&apos;)</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// file: android/app/build.gradle</div><div class="line">...</div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile project(&apos;:react-native-file-opener&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// file: MainActivity.java</div><div class="line">...</div><div class="line">import com.fileopener.FileOpenerPackage;//&lt;- import package</div><div class="line"></div><div class="line">public class MainActivity extends ReactActivity &#123;</div><div class="line">    @Override</div><div class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">        return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">            new MainReactPackage(),</div><div class="line">            new FileOpenerPackage() //&lt;- Add package</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Usage</code><br>在上一篇<a href="/2017/04/03/react-native-upload/">React-Native-上传下载</a>例子的基础上，添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">import FileOpener from &apos;react-native-file-opener&apos;;</div><div class="line">...</div><div class="line">class TestFileStream extends Component &#123;</div><div class="line">  ...</div><div class="line">  openFile(fileName) &#123;</div><div class="line">    const FilePath = Platform.OS === &apos;android&apos; ? dirs.DCIMDir + &apos;/&apos; + fileName : dirs.DocumentDir + &apos;/&apos; + fileName;</div><div class="line">    const FileMimeType = &apos;image/jpg&apos;;</div><div class="line">    FileOpener.open(</div><div class="line">        FilePath,</div><div class="line">        FileMimeType</div><div class="line">    ).then((msg) =&gt; &#123;</div><div class="line">        console.log(&apos;success!!&apos;)</div><div class="line">    &#125;,(err) =&gt; &#123;</div><div class="line">        console.log(&apos;打开失败:&apos;, err)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">export default TestFileStream;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2017/04/07/react-native-open/open.gif" width="300" title="运行结果">]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http-基础]]></title>
      <url>https://zhulichao.github.io/2017/04/03/http-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（WWW）服务器传输超文本到本地浏览器的传送协议。它基于TCP/IP通信协议来传递数据，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。HTTP协议是无状态协议，无状态是指协议对于事务处理没有记忆能力，如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间。HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<ul>
<li>首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。</li>
<li>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</li>
<li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</li>
<li>客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</li>
</ul>
<p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<ul>
<li>GET      – 请求指定的页面信息，并返回实体主体。</li>
<li>HEAD     – 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li>
<li>POST     – 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</li>
<li>PUT      – 从客户端向服务器传送的数据取代指定的文档的内容。</li>
<li>DELETE   – 请求服务器删除指定的页面。</li>
<li>CONNECT  – HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li>
<li>OPTIONS  – 允许客户端查看服务器的性能。</li>
<li>TRACE    – 回显服务器收到的请求，主要用于测试或诊断。</li>
</ul>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="external">状态码</a></h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：</p>
<ul>
<li>1xx：指示信息–表示请求已接收，继续处理</li>
<li>2xx：成功–表示请求已被成功接收、理解、接受</li>
<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>
<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>
<li>5xx：服务器端错误–服务器未能实现合法的请求</li>
</ul>
<p>常见状态代码、状态描述、说明：</p>
<p>1**(信息类)：表示接收到请求并且继续处理<br>100——客户必须继续发出请求<br>101——客户要求服务器根据请求转换HTTP协议版本，只能切换到更高级的协议</p>
<p>2**(响应成功)：表示动作被成功接收、理解和接受<br>200——表明该请求被成功地完成，所请求的资源发送回客户端<br>201——提示知道新文件的URL<br>202——接受和处理、但处理未完成<br>203——返回信息不确定或不完整<br>204——请求收到，但返回信息为空<br>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>206——服务器已经完成了部分用户的GET请求</p>
<p>3**(重定向类)：为了完成指定的动作，必须接受进一步处理<br>300——请求的资源可在多处得到<br>301——本网页被永久性转移到另一个URL<br>302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request<br>303——建议客户访问其他URL或访问方式<br>304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>305——请求的资源必须从服务器指定的地址得到<br>306——前一版本HTTP中使用的代码，现行版本中不再使用<br>307——申明请求的资源临时性删除</p>
<p>4**(客户端错误类)：请求包含错误语法或不能正确执行<br>400——客户端请求有语法错误，不能被服务器所理解<br>401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>402——保留有效ChargeTo头响应<br>403——禁止访问，服务器收到请求，但是拒绝提供服务<br>404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL<br>405——用户在Request-Line字段定义的方法不允许<br>406——根据用户发送的Accept拖，请求资源不可访问<br>407——类似401，用户必须首先在代理服务器上得到授权<br>408——客户端没有在用户指定的饿时间内完成请求<br>409——对当前资源状态，请求不能完成<br>410——服务器上不再有此资源且无进一步的参考地址<br>411——服务器拒绝用户定义的Content-Length属性请求<br>412——一个或多个请求头字段在当前请求中错误<br>413——请求的资源大于服务器允许的大小<br>414——请求的资源URL长于服务器允许的长度<br>415——请求资源不支持请求项目格式<br>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p>
<p>5**(服务端错误类)：服务器不能正确执行一个正确的请求<br>500——服务器遇到错误，无法完成请求<br>501——未实现<br>502——网关错误<br>503——由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常<br>504——充当网关或代理的服务器，未及时从远端服务器获取请求<br>505——服务器不支持请求的 HTTP 协议的版本，无法完成处 理</p>
<h2 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h2><ul>
<li>内容安全，基于 https</li>
<li>提升访问速度</li>
<li>允许多路复用</li>
<li>二进制分帧</li>
<li>首部压缩</li>
<li>服务器端推送</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-基础概念]]></title>
      <url>https://zhulichao.github.io/2017/04/03/base-concept/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>柯里化（Currying）是<strong>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数</strong>，并且返回接受余下的参数且返回结果的新函数的技术。柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。如对于有两个变量的函数 yx，如果固定了 y = 2，则得到有一个变量的函数 2x。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通的add函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Currying后</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curryingAdd</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></div><div class="line">curryingAdd(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h2 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h2><p>不可变数据（Immutable Data）的思想就是，一旦创建就不能被修改的数据，所有对 Immutable Data 的改变，最终都会返回一份新复制的数据，各自的数据并不会互相影响。</p>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>函数式编程是一种编程范式，和面向对象的编程方式一样，是一种编程思想。它属于”结构化编程”的一种，<strong>主要思想是把运算过程尽量写成一系列嵌套的函数调用</strong>。它的原理将电脑运算视为函数的计算，它的基础是 λ 演算，λ 演算的函数可以接受函数当作输入和输出。最主要的特征是，函数是第一等公民。和指令式编程相比，函数式编程强调函数的计算比指令的执行重要。和过程化编程相比，函数式编程里函数的计算可随时调用。函数式编程认为，只有纯的没有副作用的函数，才是合格的函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span> - <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// 传统的过程式编程，可能这样写：</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> b = a * <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> c = b - <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// 函数式编程，可能这样写：</span></div><div class="line"><span class="keyword">var</span> result = subtract(multiply(add(<span class="number">1</span>,<span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-上传下载]]></title>
      <url>https://zhulichao.github.io/2017/04/03/react-native-upload/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件的上传下载-react-native-fetch-blob"><a href="#文件的上传下载-react-native-fetch-blob" class="headerlink" title="文件的上传下载 react-native-fetch-blob"></a>文件的上传下载<a href="https://github.com/wkh237/react-native-fetch-blob" target="_blank" rel="external"> react-native-fetch-blob</a></h2><ul>
<li><p><code>NPM install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react-native-fetch-blob</div></pre></td></tr></table></figure>
</li>
<li><p><code>Automatically Link Native Modules</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native link react-native-fetch-blob</div></pre></td></tr></table></figure>
</li>
<li><p><code>AndroidManifest.xml</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;                                               </div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; </div><div class="line">...</div><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class="line">    &lt;action android:name=&quot;android.intent.action.DOWNLOAD_COMPLETE&quot;/&gt;         </div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Notice</code><br>对于下载路径 RNFetchBlob.fs.dirs 的结论如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CacheDir:&quot;/data/user/0/com.gps/cache&quot; ---- ios需越狱；android需root权限才能看</div><div class="line">DocumentDir:&quot;/data/user/0/com.gps/files&quot; ---- ios需越狱；android需root权限才能看</div><div class="line">MainBundleDir:&quot;/data/user/0/com.gps&quot; ---- ios系统app才能用；android需root权限才能看</div><div class="line">DCIMDir:&quot;/storage/emulated/0/DCIM&quot; ---- 不支持ios；android的DCIM目录</div><div class="line">DownloadDir:&quot;/storage/emulated/0/Download&quot; ---- 不支持ios；android的Download目录</div><div class="line">MovieDir:&quot;/storage/emulated/0/Movies&quot; ---- 不支持ios；android的Download目录</div><div class="line">MusicDir:&quot;/storage/emulated/0/Music&quot; ---- 不支持ios；android的Download目录</div><div class="line">PictureDir:&quot;/storage/emulated/0/Pictures&quot; ---- 不支持ios；android的Download目录</div><div class="line">SDCardDir:&quot;/storage/emulated/0&quot; ---- 不支持ios；android的Download目录</div></pre></td></tr></table></figure>
<p>  <strong>个人感觉下载时应该下载到DocumentDir或CacheDir中，这两个个目录是用户不可见的，只用当用户显示发出了保存到相册的动作时才应该把下载的图片放到相册，通过调用React Native 提供的CameraRoll可以达到这个效果，这样用户对相册中图片的任何操作才不会对系统产生影响。</strong></p>
</li>
<li><code>Usage</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; View, Text, StyleSheet, ScrollView, Image, Platform, CameraRoll, TouchableHighlight, Dimensions &#125; from &apos;react-native&apos;;</div><div class="line">import &#123; Button &#125; from &apos;antd-mobile&apos;;</div><div class="line">import RNFetchBlob from &apos;react-native-fetch-blob&apos;;</div><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line"></div><div class="line">import Global from &apos;../styles/Global&apos;;</div><div class="line">import NavBar from &apos;./NavBar&apos;;</div><div class="line">import &#123; default as config &#125; from &apos;../config/base&apos;;</div><div class="line">import &#123; getCommonHeaders &#125; from &apos;../utils/fetchUtil&apos;;</div><div class="line"></div><div class="line">const dirs = RNFetchBlob.fs.dirs;</div><div class="line">const WINDOW_WIDTH = Dimensions.get(&apos;window&apos;).width;</div><div class="line">const WINDOW_HEIGHT = Dimensions.get(&apos;window&apos;).height;</div><div class="line"></div><div class="line">class TestFileStream extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      downImageView: null,</div><div class="line">      fileList: [],</div><div class="line">    &#125;;</div><div class="line">    this.uploadFile = this.uploadFile.bind(this);</div><div class="line">    this.downloadFile = this.downloadFile.bind(this);</div><div class="line">    this.getFilesInfo = this.getFilesInfo.bind(this);</div><div class="line">    this.goBack = this.goBack.bind(this);</div><div class="line">  &#125;</div><div class="line">  goBack() &#123;</div><div class="line">    this.props.navigator.pop();</div><div class="line">  &#125;</div><div class="line">  uploadFile() &#123;</div><div class="line">    const data = &apos;&#123;\&quot;SERV_ID\&quot;:\&quot;&apos;+&apos;OPMS_EVENTATTACH_RECORD_PAGE&apos;+&apos;\&quot;,&apos;</div><div class="line">              + &apos;\&quot;FILE_CAT\&quot;:\&quot;&apos;+&apos;ATTACH_IMG&apos;+&apos;\&quot;,&apos;</div><div class="line">              + &apos;\&quot;DATA_ID\&quot;:\&quot;&apos;+&apos;0S8iwECYm1d68jb4FElvoKDb&apos;+&apos;\&quot;,&apos;</div><div class="line">              + &apos;\&quot;FILE_SORT\&quot;:&apos; + 0 +&apos;&#125;&apos;;</div><div class="line">    const commonHeader = getCommonHeaders();</div><div class="line">    const header = &#123;</div><div class="line">      &apos;ACCESS_TOKEN&apos;: commonHeader.ACCESS_TOKEN,</div><div class="line">      &apos;Content-Type&apos;: &apos;multipart/form-data&apos;,</div><div class="line">    &#125;;</div><div class="line">    RNFetchBlob.fetch(&apos;POST&apos;, `$&#123;config.applicationIpAndPort&#125;/file?data=$&#123;encodeURIComponent(data)&#125;`,</div><div class="line">      header,</div><div class="line">      [&#123;</div><div class="line">        name : &apos;Filedata&apos;,</div><div class="line">        filename : &apos;cdpImage.png&apos;,</div><div class="line">        data: RNFetchBlob.wrap(Platform.OS === &apos;android&apos; ? &apos;file://&apos;+ dirs.DCIMDir + &apos;/cdpImage.png&apos; : dirs.DocumentDir + &apos;/cdpImage.png&apos;)</div><div class="line">      &#125;]</div><div class="line">    ).then((res) =&gt; &#123;</div><div class="line">      console.log(&apos;上传成功：&apos;, res.text());</div><div class="line">      alert(&quot;上传成功,浏览器中有信息&quot;);</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">      console.log(&apos;上传失败：&apos;, err);</div><div class="line">      alert(&quot;上传失败,浏览器中有信息&quot;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  downloadFile() &#123;</div><div class="line">    RNFetchBlob.config(&#123;</div><div class="line">      fileCache : true,</div><div class="line">      path : Platform.OS === &apos;android&apos; ? dirs.DCIMDir + &apos;/logo.png&apos; : dirs.DocumentDir + &apos;/logo.png&apos;,</div><div class="line">    &#125;).fetch(&apos;GET&apos;, `https://facebook.github.io/react/img/logo_og.png`, &#123;</div><div class="line">      //some headers ..</div><div class="line">    &#125;).then((res) =&gt; &#123;</div><div class="line">      // 下载成功： /storage/emulated/0/Download/logo.png</div><div class="line">      console.log(&apos;下载成功：&apos;, res.path());</div><div class="line">      const imageStyle = &#123;</div><div class="line">        borderWidth: 1,</div><div class="line">        width: 100,</div><div class="line">        height: 100</div><div class="line">      &#125;;</div><div class="line">      const downImageView = (</div><div class="line">        &lt;View style=&#123;&#123;justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">          &lt;Image source=&#123;&#123; uri : Platform.OS === &apos;android&apos; ? &apos;file://&apos; + res.path()  : &apos;&apos; + res.path() &#125;&#125; style=&#123;imageStyle&#125;/&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      );</div><div class="line">      this.setState(&#123;</div><div class="line">        downImageView,</div><div class="line">      &#125;);</div><div class="line">      // 如果是 ios,同时下载到相册</div><div class="line">      if (Platform.OS === &apos;ios&apos;) &#123;</div><div class="line">        CameraRoll.saveToCameraRoll(res.path(), &apos;photo&apos;);</div><div class="line">      &#125;</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">      console.log(&quot;下载失败：&quot;, err);</div><div class="line">      alert(&quot;下载失败,浏览器中有信息&quot;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  getFilesInfo() &#123;</div><div class="line">    // 显示文件，返回数组</div><div class="line">    RNFetchBlob.fs.ls(Platform.OS === &apos;android&apos; ? dirs.DCIMDir : dirs.DocumentDir)</div><div class="line">    .then((files) =&gt; &#123;</div><div class="line">        console.log(&quot;dirs.DocumentDir目录中的文件：&quot;, files);</div><div class="line">        this.setState(&#123;</div><div class="line">          fileList: files,</div><div class="line">        &#125;);</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">      console.log(&quot;获取失败：&quot;, err);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  openFile(fileName) &#123;</div><div class="line">    alert(`打开文件：$&#123;fileName&#125;`);</div><div class="line">  &#125;</div><div class="line">  showFileList() &#123;</div><div class="line">    return this.state.fileList.map((item, index) =&gt; &#123;</div><div class="line">      return (</div><div class="line">        &lt;TouchableHighlight</div><div class="line">          style=&#123;styles.container&#125;</div><div class="line">          underlayColor=&quot;rgba(34, 26, 38, 0.1)&quot;</div><div class="line">          onPress=&#123;() =&gt; this.openFile(item)&#125;</div><div class="line">          key=&#123;index&#125;</div><div class="line">        &gt;</div><div class="line">          &lt;View style=&#123;&#123;flexDirection:&apos;row&apos;&#125;&#125;&gt;</div><div class="line">            &lt;View style=&#123;styles.icon&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.iconText&#125;&gt;&#123;index&#125;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">            &lt;View style=&#123;styles.textContent&#125;&gt;</div><div class="line">              &lt;Text style=&#123;[styles.title, ]&#125;&gt;&#123;item&#125;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        &lt;/TouchableHighlight&gt;</div><div class="line">      );</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;[Global.flex1, &#123;width: WINDOW_WIDTH&#125;]&#125;&gt;</div><div class="line">        &lt;NavBar</div><div class="line">          title=&#123;this.props.route.params.title&#125;</div><div class="line">          goBack=&#123;this.goBack&#125;</div><div class="line">        /&gt;</div><div class="line">        &lt;ScrollView style=&#123;styles.temporaryTask&#125;&gt;</div><div class="line">          &lt;View style=&#123;[Global.containerCenter, styles.marginBottom20]&#125;&gt;</div><div class="line">            &lt;Text style=&#123;&#123;fontSize: 15&#125;&#125;&gt;测试上传、下载的服务为：&lt;/Text&gt;</div><div class="line">            &lt;Text style=&#123;&#123;fontSize: 15&#125;&#125;&gt;OPMS_EVENTATTACH_RECORD_PAGE&lt;/Text&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">          &lt;View style=&#123;Global.flex1&#125;&gt;</div><div class="line">            &#123;this.state.downImageView&#125;</div><div class="line">            &lt;Button</div><div class="line">              type=&quot;primary&quot;</div><div class="line">              onClick=&#123;this.downloadFile&#125;</div><div class="line">              style=&#123;styles.marginBottom20&#125;</div><div class="line">            &gt;</div><div class="line">              &lt;Icon name=&quot;cloud-download&quot; size=&#123;20&#125; /&gt;  下载文件</div><div class="line">            &lt;/Button&gt;</div><div class="line">            &lt;Button</div><div class="line">              type=&quot;primary&quot;</div><div class="line">              onClick=&#123;this.uploadFile&#125;</div><div class="line">              style=&#123;styles.marginBottom20&#125;</div><div class="line">            &gt;</div><div class="line">              &lt;Icon name=&quot;plus&quot; size=&#123;20&#125; /&gt;  上传文件</div><div class="line">            &lt;/Button&gt;</div><div class="line">            &lt;Button</div><div class="line">              type=&quot;primary&quot;</div><div class="line">              onClick=&#123;this.getFilesInfo&#125;</div><div class="line">              style=&#123;styles.marginBottom20&#125;</div><div class="line">            &gt;</div><div class="line">              &lt;Icon name=&quot;folder-open&quot; size=&#123;20&#125; /&gt;  获取文件列表</div><div class="line">            &lt;/Button&gt;</div><div class="line">            &#123;this.showFileList()&#125;</div><div class="line">          &lt;/View&gt;</div><div class="line">        &lt;/ScrollView&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  temporaryTask: &#123;</div><div class="line">    marginTop: 20,</div><div class="line">    marginBottom: 10,</div><div class="line">    marginHorizontal: 20,</div><div class="line">    // alignItems: &apos;stretch&apos;,</div><div class="line">    flex: 1,</div><div class="line">    width: WINDOW_WIDTH - 40,</div><div class="line">  &#125;,</div><div class="line">  marginBottom20: &#123;</div><div class="line">    marginBottom: 20,</div><div class="line">  &#125;,</div><div class="line">  container: &#123;</div><div class="line">    width: WINDOW_WIDTH - 40,</div><div class="line">    flexDirection:&apos;row&apos;,</div><div class="line">    backgroundColor: &apos;#BFEFFF&apos;,</div><div class="line">    borderRadius: 7,</div><div class="line">    alignItems: &apos;flex-start&apos;,</div><div class="line">    marginBottom: 10,</div><div class="line">  &#125;,</div><div class="line">  content: &#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">  icon: &#123;</div><div class="line">    width: 35,</div><div class="line">    height: 35,</div><div class="line">    margin: 10,</div><div class="line">    backgroundColor: &apos;#108ee9&apos;,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    flexDirection: &apos;row&apos;,</div><div class="line">  &#125;,</div><div class="line">  iconText: &#123;</div><div class="line">    fontSize: 28,</div><div class="line">    color: &apos;#fff&apos;,</div><div class="line">    fontWeight: &apos;400&apos;,</div><div class="line">  &#125;,</div><div class="line">  textContent: &#123;</div><div class="line">    flex: 1,</div><div class="line">    padding: 10</div><div class="line">  &#125;,</div><div class="line">  title: &#123;</div><div class="line">    color: &apos;#101010&apos;,</div><div class="line">    fontSize: 17,</div><div class="line">    fontWeight: &quot;400&quot;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default TestFileStream;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2017/04/03/react-native-upload/file.gif" width="300" title="运行结果">
<img src="/2017/04/03/react-native-upload/file.png" title="打印结果">
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-依赖]]></title>
      <url>https://zhulichao.github.io/2017/04/02/react-native-dependencies/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用过的react-native依赖"><a href="#使用过的react-native依赖" class="headerlink" title="使用过的react-native依赖"></a>使用过的react-native依赖</h2><p><a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">react-native-vector-icons</a> 图标<br><img src="/2017/04/02/react-native-dependencies/icon.jpg" width="300" title="图标"><br><a href="https://github.com/marcshilling/react-native-image-picker" target="_blank" rel="external">react-native-image-picker</a> 相机、相册<br><img src="/2017/04/02/react-native-dependencies/image.jpg" width="300" title="相机、相册"><br><a href="https://github.com/bgryszko/react-native-circular-progress" target="_blank" rel="external">react-native-circular-progress</a> 原型进度条<br><img src="/2017/04/02/react-native-dependencies/circle.jpg" width="300" title="原型进度条"><br><a href="https://github.com/jeanregisser/react-native-slider" target="_blank" rel="external">react-native-slider</a> 水平滑动条<br><img src="/2017/04/02/react-native-dependencies/slider.jpg" width="300" title="水平滑动条"><br><a href="https://github.com/react-native-component/react-native-smart-amap" target="_blank" rel="external">react-native-smart-amap</a> 高德地图<br><img src="/2017/04/02/react-native-dependencies/ios-map.jpg" width="300" title="高德地图"><br><a href="https://github.com/react-native-component/react-native-smart-amap-location" target="_blank" rel="external">react-native-smart-amap-location</a> 高德定位<br><img src="/2017/04/02/react-native-dependencies/location.jpg" width="300" title="高德定位"><br><a href="https://github.com/huangzuizui/react-native-file-opener" target="_blank" rel="external">react-native-file-opener</a> 打开文件<br><img src="/2017/04/02/react-native-dependencies/open.jpg" width="300" title="打开文件"><br><a href="https://github.com/wkh237/react-native-fetch-blob" target="_blank" rel="external">react-native-fetch-blob</a> 文件上传下载<br><img src="/2017/04/02/react-native-dependencies/file.gif" width="300" title="文件上传下载"><br><a href="https://github.com/rebeccahughes/react-native-device-info" target="_blank" rel="external">react-native-device-info</a> 获取设备信息<br><a href="https://github.com/SimenCodes/react-native-imei" target="_blank" rel="external">react-native-imei</a> 获取设备IMEI码<br><a href="https://github.com/yamill/react-native-orientation" target="_blank" rel="external">react-native-orientation</a> 监听设备方向变化、设置屏幕方向锁定<br><a href="https://github.com/andpor/react-native-sqlite-storage" target="_blank" rel="external">react-native-sqlite-storage</a> SQLite数据库<br><a href="https://github.com/luggit/react-native-config" target="_blank" rel="external">react-native-config</a> 配置环境变量<br><a href="https://www.npmjs.com/package/react-native-push-notification" target="_blank" rel="external">react-native-push-notification</a> 消息提醒</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-IOS使用高德地图]]></title>
      <url>https://zhulichao.github.io/2017/03/24/react-native-amap-ios/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="高德地图key值"><a href="#高德地图key值" class="headerlink" title="高德地图key值"></a>高德地图key值</h2><ul>
<li><a href="http://lbs.amap.com/，注册帐号" target="_blank" rel="external">http://lbs.amap.com/，注册帐号</a></li>
<li>登录后，进入控制台，应用管理-&gt;我的应用，添加新key<ul>
<li>Bundle ID值为 Xcode 切换到 General 标签，查看 Bundle Identifier的值</li>
</ul>
</li>
</ul>
<img src="/2017/03/24/react-native-amap-ios/ios-key.png" title="申请高德地图key">
<h2 id="地图及定位"><a href="#地图及定位" class="headerlink" title="地图及定位"></a>地图及定位</h2><p>在github上找了好几个使用React Native封装基于ios的高德地图的依赖，但是大多数依赖无论手动连接还是自动连接都会有报错，个人感觉最大的可能就是不兼容现在的react-native^0.42.0，最后找到两个可以在IOS上显示的高德地图依赖和一个可以定位的依赖。</p>
<h3 id="react-native-maps"><a href="#react-native-maps" class="headerlink" title="react-native-maps"></a><a href="https://github.com/airbnb/react-native-maps" target="_blank" rel="external">react-native-maps</a></h3><p>可以显示高德地图，配置过程也非常简单，只需执行如下两个命令，运行时模拟器中地图显示的是英文，真机上地图显示的汉字，但是样式看上去有点奇怪，不知道是不是版本老的原因。</p>
<ul>
<li><code>npm install react-native-maps --save</code></li>
<li><code>react-native link react-native-maps</code></li>
</ul>
<img src="/2017/03/24/react-native-amap-ios/map1.jpg" width="300" title="高德地图">
<p>虽然这个依赖显示了高德地图，但是经过这些安装高德地图的试验，我感觉这个依赖很奇怪。（1）没有看到高德地图相关的文件<code>MAMapKit.framework、AMapFoundationKit.framework、AMapSearchKit.framework</code>；（2）没有进行高德key值的配置，个人感觉在<code>react-native-maps/ios/AirMaps/AIRMapManager.m</code>文件中，31行应该是输入高德key值的地方。</p>
<h3 id="react-native-smart-amap"><a href="#react-native-smart-amap" class="headerlink" title="react-native-smart-amap"></a><a href="https://github.com/react-native-component/react-native-smart-amap" target="_blank" rel="external">react-native-smart-amap</a></h3><p>在ios上，可以按照说明文档进行配置，也就是手动链接。我是先执行<code>react-native link react-native-smart-amap</code>进行自动链接，然后再按照说明文件进行配置，需要注意的地方有两点：</p>
<ul>
<li>拖进项目的RCTAMap.xcodeproj是在\node_modules\react-native-smart-amap\ios\RCTAMap路径下的，不是\node_modules\react-native-smart-amap\RCTAMap下的。</li>
<li>“点击在Libraries下已拖进来的RCTAMap.xcodeproj, 选择Build Settings, 找到Framework Search Paths, 将$(SRCROOT)/../../../ios/Frameworks替换成$(SRCROOT)/../../../../ios/Frameworks”这个步骤在每次重装依赖后都要重新执行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; StyleSheet, Dimensions, Platform, StatusBar &#125; from &apos;react-native&apos;;</div><div class="line">import AMap from &apos;react-native-smart-amap&apos;;</div><div class="line"></div><div class="line">const WINDOW_WIDTH = Dimensions.get(&apos;window&apos;).width;</div><div class="line">const WINDOW_HEIGHT = Dimensions.get(&apos;window&apos;).height;</div><div class="line">const StatusBar_HEIGHT = StatusBar.currentHeight;</div><div class="line"></div><div class="line">class SmartAmap extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      latitude: 39.889725,</div><div class="line">      longitude: 116.357357,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    const options = &#123;</div><div class="line">      frame: &#123;</div><div class="line">        width: WINDOW_WIDTH,</div><div class="line">        height: Platform.OS === &apos;ios&apos; ? WINDOW_HEIGHT - 55 : WINDOW_HEIGHT - StatusBar_HEIGHT - 55,</div><div class="line">      &#125;,</div><div class="line">      showsUserLocation: true,</div><div class="line">      userTrackingMode: Platform.OS === &apos;ios&apos; ? AMap.constants.userTrackingMode.none : null,</div><div class="line">      centerCoordinate: &#123;</div><div class="line">        latitude: this.props.centerCoordinate ? this.props.centerCoordinate.latitude : this.state.latitude,</div><div class="line">        longitude: this.props.centerCoordinate ? this.props.centerCoordinate.longitude : this.state.longitude,</div><div class="line">      &#125;,</div><div class="line">      zoomLevel: 18.1,</div><div class="line">      centerMarker: Platform.OS === &apos;ios&apos; ? &apos;icon_location&apos; : &apos;poi_marker&apos;,</div><div class="line">    &#125;;</div><div class="line">    return (</div><div class="line">      &lt;AMap</div><div class="line">        ref=&#123; component =&gt; this._amap = component &#125;</div><div class="line">        style=&#123;&#123;...StyleSheet.absoluteFillObject&#125;&#125;</div><div class="line">        options=&#123;options&#125;</div><div class="line">        radius=&#123;100&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时的运行结果如下图所示，地图上并没有标注出坐标的位置，查了issuse列表看到别也提了这个问题，估计是依赖的问题，我就查了一下依赖的源码，试着找了一下，发现将<strong>react-native-smart-amap/ios/RCTAMap/RCTAMap/RCTAMapManager.m文件中422、423、424行的NO改为YES</strong>，地图上的位置标注就出来了，如下图所示。<br><img src="/2017/03/24/react-native-amap-ios/ios-map.png" title="ios高德地图"></p>
<p>以上都是在ios上的配置，在android端也有需要注意的地方。上一篇<a href="/2017/03/24/react-native-amap-android/">React-Native-Android使用高德地图</a>已经讲了在android上使用高德地图，如果想在android端也使用react-native-smart-amap这个依赖来保持一致的话，需要先将android/setting.gradle、android/app/build.gradle、MainApplication.java中关于react-native-amap-android的配置去掉，然后再按照说明文档配置react-native-smart-amap，否则会报两个错误。</p>
<p>第一个错误如下图所示，解决办法是将gradle.properties文件中被注释的<code>org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</code>放开。<br><img src="/2017/03/24/react-native-amap-ios/jvmargs.png" title="报错1"><br>第二个错误如下图所示，是由于包冲突，因为已经存在一个高德地图的依赖了，解决办法就是将android/setting.gradle、android/app/build.gradle、MainApplication.java中关于react-native-amap-android的配置去掉，只保留一个高德地图的配置。<br><img src="/2017/03/24/react-native-amap-ios/transformClassesWithDexForDebug.png" title="报错2"></p>
<p>而且android也是存在位置标注不显示的问题，需要将<strong>react-native-smart-amap/android/src/main/reactnativecomponent/amap/RCTAMapView.java文件的202行注释放开</strong>，地图上的位置标注就出来了，如下图所示。<br><img src="/2017/03/24/react-native-amap-ios/android-map.png" title="android高德地图"></p>
<h3 id="react-native-smart-amap-location"><a href="#react-native-smart-amap-location" class="headerlink" title="react-native-smart-amap-location"></a><a href="https://github.com/react-native-component/react-native-smart-amap-location" target="_blank" rel="external">react-native-smart-amap-location</a></h3><p>在ios上，还是执行<code>react-native link react-native-smart-amap-location</code>进行自动链接，然后再按照说明文件进行配置，只有下面这一条需要注意：</p>
<ul>
<li>“点击在Libraries下已拖进来的RCTAMapLocation.xcodeproj, 选择Build Settings, 找到Framework Search Paths, 将$(SRCROOT)/../../../ios/Frameworks替换成$(SRCROOT)/../../../../ios/Frameworks”这个步骤在每次重装依赖后都要重新执行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; View, StyleSheet, Dimensions, Platform, StatusBar, NativeAppEventEmitter, Alert &#125; from &apos;react-native&apos;;</div><div class="line">import &#123; Button &#125; from &apos;antd-mobile&apos;;</div><div class="line">import AMapLocation from &apos;react-native-smart-amap-location&apos;;</div><div class="line">import AppEventListenerEnhance from &apos;react-native-smart-app-event-listener-enhance&apos;;</div><div class="line"></div><div class="line">const WINDOW_WIDTH = Dimensions.get(&apos;window&apos;).width;</div><div class="line">const WINDOW_HEIGHT = Dimensions.get(&apos;window&apos;).height;</div><div class="line">const StatusBar_HEIGHT = StatusBar.currentHeight;</div><div class="line"></div><div class="line">class SmartAmap extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      latitude: 39.889725,</div><div class="line">      longitude: 116.357357,</div><div class="line">    &#125;;</div><div class="line">    this.info = &apos;&apos;;</div><div class="line">    this._onLocationResult = this._onLocationResult.bind(this);</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    let viewAppearCallBack = (event) =&gt; &#123;</div><div class="line">      AMapLocation.init(null); //使用默认定位配置</div><div class="line">    &#125;</div><div class="line">    this.addAppEventListener(</div><div class="line">        this.props.navigator.navigationContext.addListener(&apos;didfocus&apos;, viewAppearCallBack),</div><div class="line">        NativeAppEventEmitter.addListener(&apos;amap.location.onLocationResult&apos;, this._onLocationResult)</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount () &#123;</div><div class="line">    //停止并销毁定位服务</div><div class="line">    AMapLocation.cleanUp()</div><div class="line">  &#125;</div><div class="line">  getLocation() &#123;</div><div class="line">    AMapLocation.getLocation();</div><div class="line">  &#125;</div><div class="line">  getReGeocode() &#123;</div><div class="line">    AMapLocation.getReGeocode();</div><div class="line">  &#125;</div><div class="line">  _onLocationResult(result) &#123;</div><div class="line">    if(result.error) &#123;</div><div class="line">      Alert.alert(`错误代码: $&#123;result.error.code&#125;, 错误信息: $&#123;result.error.localizedDescription&#125;`)</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line"></div><div class="line">      if(result.formattedAddress) &#123;</div><div class="line">        console.log(&quot;定位逆地理编码信息：&quot;, result)</div><div class="line">        Alert.alert(`格式化地址 = $&#123;result.formattedAddress&#125;`);</div><div class="line">      &#125;</div><div class="line">      else &#123;</div><div class="line">        console.log(&quot;定位地理编码信息：&quot;, result)</div><div class="line">        Alert.alert(`纬度 = $&#123;result.coordinate.latitude&#125;, 经度 = $&#123;result.coordinate.longitude&#125;`)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Button type=&quot;primary&quot; onClick=&#123;this.getLocation&#125;&gt;</div><div class="line">            定位地理编码信息</div><div class="line">        &lt;/Button&gt;</div><div class="line">        &lt;Button type=&quot;primary&quot; onClick=&#123;this.getReGeocode&#125;&gt;</div><div class="line">            定位逆地理编码信息</div><div class="line">        &lt;/Button&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default AppEventListenerEnhance(SmartAmap);</div></pre></td></tr></table></figure>
<img src="/2017/03/24/react-native-amap-ios/location.png" title="高德地图定位">
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-Android使用高德地图]]></title>
      <url>https://zhulichao.github.io/2017/03/24/react-native-amap-android/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="高德地图key值"><a href="#高德地图key值" class="headerlink" title="高德地图key值"></a>高德地图key值</h2><ul>
<li><a href="http://lbs.amap.com/，注册帐号" target="_blank" rel="external">http://lbs.amap.com/，注册帐号</a></li>
<li>登录后，进入控制台，应用管理-&gt;我的应用，添加新key<ul>
<li>PackageName为<code>/android/app/src/main/AndroidManifest.xml</code>中package的值</li>
<li>发布版安全码SHA1，在cmd下执行如下命令会生成SHA1值<br>  <code>cd .android</code><br>  <code>keytool -list -v -keystore debug.keystore</code></li>
</ul>
</li>
</ul>
<img src="/2017/03/24/react-native-amap-android/android-key.png" title="申请高德地图key">
<h2 id="显示地图"><a href="#显示地图" class="headerlink" title="显示地图"></a>显示地图</h2><p>使用<a href="https://github.com/dwd-fe/react-native-amap" target="_blank" rel="external">react-native-amap</a>依赖。</p>
<ul>
<li><p><code>NPM install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-native-amap --save</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/setting.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include &apos;:react-native-amap-view&apos;</div><div class="line">project(&apos;:react-native-amap-view&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-amap-view/android&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/app/build.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(&quot;:react-native-amap-view&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>MainApplication.java</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import com.dianwoba.rctamap.AMapPackage;</div><div class="line"></div><div class="line">      return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          ...</div><div class="line">          , new AMapPackage()</div><div class="line">          ...</div></pre></td></tr></table></figure>
</li>
<li><p><code>AndroidManifest.xml</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!--用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问GPS定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--获取运营商信息，用于支持提供运营商信息相关的接口--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问网络，网络定位需要上网--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于读取手机当前的状态--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line"></div><div class="line">&lt;application</div><div class="line">  android:name=&quot;.MainApplication&quot;</div><div class="line">  android:allowBackup=&quot;true&quot;</div><div class="line">  android:label=&quot;@string/app_name&quot;</div><div class="line">  android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class="line">  &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</div><div class="line">  &lt;meta-data</div><div class="line">   android:name=&quot;com.amap.api.v2.apikey&quot;</div><div class="line">   android:value=&quot;e55ba4f9a563450e0e63f0493f01c323&quot;/&gt;&lt;!--高德地图key值--&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>Usage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; View, Text, TouchableHighlight, StyleSheet, InteractionManager, MapView &#125; from &apos;react-native&apos;;</div><div class="line">import AMapView from &apos;react-native-amap-view&apos;;</div><div class="line"></div><div class="line">class Amap extends Component &#123;</div><div class="line">  render()&#123;</div><div class="line">    return (</div><div class="line">        &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#f00&apos;&#125;&#125;&gt;</div><div class="line">            &lt;AMapView initialRegion=&#123;&#123;latitude: 30.315888, longitude: 120.165817&#125;&#125; showsUserLocation&gt;</div><div class="line">                &lt;AMapView.Marker pinColor=&quot;green&quot; draggable title=&apos;xxx&apos; description=&quot;这是一个好地方&quot; coordinate=&#123;&#123;latitude: 30.315888, longitude: 120.165817&#125;&#125; /&gt;</div><div class="line">            &lt;/AMapView&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default Amap;</div></pre></td></tr></table></figure>
</li>
<li><p>启动<br>react-native run-android 启动后，报如下错误，将<code>node_modules\react-native-amap-view\android\src\main\java\com\dianwoba\rctamap\RegionChangeEvent.java</code>的17行 改为<code>super(id);</code>就不报这个错了。<strong>之后可能需要重启6、7次才能正常启动起来。</strong></p>
<img src="/2017/03/24/react-native-amap-android/mapError.png" title="报错如图">
</li>
</ul>
<h2 id="地图定位"><a href="#地图定位" class="headerlink" title="地图定位"></a>地图定位</h2><p>使用<a href="https://github.com/xiaobuu/react-native-amap-location" target="_blank" rel="external">react-native-amap-location
</a>依赖，该依赖仅用于android。</p>
<ul>
<li><p><code>NPM install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-native-amap-location --save</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/setting.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include &apos;:reactamaplocation&apos;</div><div class="line">project(&apos;:reactamaplocation&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-amap-location&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>android/app/build.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(&apos;:reactamaplocation&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>MainApplication.java</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import com.xiaobu.amap.AMapLocationReactPackage;</div><div class="line">      </div><div class="line">      return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          ...</div><div class="line">          , new AMapLocationReactPackage()</div><div class="line">          ...</div></pre></td></tr></table></figure>
</li>
<li><p><code>AndroidManifest.xml</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!--用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问GPS定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--获取运营商信息，用于支持提供运营商信息相关的接口--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于访问网络，网络定位需要上网--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--用于读取手机当前的状态--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;!--写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;</div><div class="line"></div><div class="line">&lt;application</div><div class="line">  android:name=&quot;.MainApplication&quot;</div><div class="line">  android:allowBackup=&quot;true&quot;</div><div class="line">  android:label=&quot;@string/app_name&quot;</div><div class="line">  android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class="line">  &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</div><div class="line">  &lt;meta-data</div><div class="line">   android:name=&quot;com.amap.api.v2.apikey&quot;</div><div class="line">   android:value=&quot;e55ba4f9a563450e0e63f0493f01c323&quot;/&gt;&lt;!--高德地图key值--&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>Usage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; View, Text, TouchableHighlight, StyleSheet, InteractionManager, MapView &#125; from &apos;react-native&apos;;</div><div class="line">import AMapView from &apos;react-native-amap-view&apos;;</div><div class="line">import AMapLocation from &apos;react-native-amap-location&apos;;</div><div class="line"></div><div class="line">class Amap extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      latitude: 39.888396427164594,</div><div class="line">      longitude: 116.35112870293183,</div><div class="line">    &#125;;</div><div class="line">    this.clearInterval = null;</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.listener = AMapLocation.addEventListener((data) =&gt; &#123;</div><div class="line">      console.log(&apos;data&apos;, data);</div><div class="line">      this.setState(&#123;</div><div class="line">        latitude: data.latitude,</div><div class="line">        longitude: data.longitude,</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    AMapLocation.startLocation(&#123;</div><div class="line">      accuracy: &apos;HighAccuracy&apos;,</div><div class="line">      killProcess: true,</div><div class="line">      needDetail: true,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    AMapLocation.stopLocation();</div><div class="line">    this.listener.remove();</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;height: 500, width: 500,&#125;&#125;&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;#f00&apos;&#125;&#125;&gt;</div><div class="line">        &lt;AMapView initialRegion=&#123;&#123;latitude: this.state.latitude, longitude: this.state.longitude&#125;&#125; showsUserLocation&gt;</div><div class="line">          &lt;AMapView.Marker pinColor=&quot;green&quot; draggable title=&apos;当前位置&apos; description=&quot;这是一个好地方&quot; coordinate=&#123;&#123;latitude: this.state.latitude, longitude: this.state.longitude&#125;&#125; /&gt;</div><div class="line">        &lt;/AMapView&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default Amap;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2017/03/24/react-native-amap-android/map.jpg" width="300" title="地图">
<img src="/2017/03/24/react-native-amap-android/locationText.png" title="位置信息">
<p>注意，如果是在模拟器上可能由于缺少定位权限报如下错误。</p>
<img src="/2017/03/24/react-native-amap-android/mapError3.png" width="300" title="报错">
<img src="/2017/03/24/react-native-amap-android/mapError4.png" title="缺少定位权限">
<h2 id="配置签名后key值问题"><a href="#配置签名后key值问题" class="headerlink" title="配置签名后key值问题"></a>配置签名后key值问题</h2><p>如果项目中配置了签名，参考RN官网，也就是在android/app/build.gradle中添加了如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123; ... &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这时生成环境的高德key值需要根据签名中的SHA1值生成，打开cmd，切换到签名keystore文件所在目录，输入 <code>keytool -list -v -keystore xxx.keystore</code>命令即可查看SHA1值。由这个SHA1值生成的高德key值在发布环境是好使的。</p>
<p>但是在开发环境会报key值不正确，首先的感觉是SHA1值是生成环境的，那再根据开发环境SHA1值生成key值试一次，打开出cmd，<code>cd .android</code> 进入到 .android下，输入<code>keytool -v -list -keystore debug.keystore</code>命令即可查看开发SHA1值，但仍然报key值不正确。在网上查原因是由于配置了发布签名导致的，需要修改android/app/build.gradle文件让开发环境使用相同的签名配置，这样可以开发和生成环境使用同一个高德key值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">        storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line">        storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">        keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">        keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">    &#125;</div><div class="line">    debug &#123;</div><div class="line">        storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line">        storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">        keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">        keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-IOS开发]]></title>
      <url>https://zhulichao.github.io/2017/03/23/react-native-ios/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在入门用React Native进行IOS开发，由于开始的时候没有设备，是在Android上开发的，开发出一部分功能后又在IOS上调试的，其中遇到的问题整理如下。</p>
<h2 id="mac常用"><a href="#mac常用" class="headerlink" title="mac常用"></a>mac常用</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>Command+M             最小化当前窗口</li>
<li>Command+Option+M      最小化当前应用程序所有窗口</li>
<li>Command+H             隐藏除当前应用程序之外所有程序</li>
<li>Command+Option+M+H    隐藏所有应用程序窗口</li>
<li>Command+Q             关闭当前应用程序</li>
<li>Command+S             将模拟器屏幕截图保存到桌面</li>
<li>Command+Tab 选中程序，松开Tab，按住Command不放的同时按住Opt，松开Command 将最小化的窗口恢复回来</li>
<li>Command+Shift+K       Xcode中clean项目</li>
<li>Simulator -&gt; window -&gt; Scale 调整模拟器窗口大小</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li>xcodebuild -version   查看Xcode版本号</li>
</ul>
<h3 id="真机运行报错"><a href="#真机运行报错" class="headerlink" title="真机运行报错"></a>真机运行报错</h3><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><img src="/2017/03/23/react-native-ios/ios-start-err.jpg" title="真机运行报错1">
<p>需修改一下Bundle Identifier的值。</p>
<h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><img src="/2017/03/23/react-native-ios/Team.jpg" title="真机运行报错2">
<p>需在Xcode的<code>Select a project or target</code>中选择以Tests结尾的项目，然后选择Team。</p>
<h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.BDVRClientSample requires a provisioning profile. Select a provisioning profile for the &quot;Debug&quot; build configuration in the project editor.</div><div class="line">2.Code signing is required for product type ‘Application‘ in SDK ‘iOS 10.0‘</div></pre></td></tr></table></figure>
<p>需先取消Generate中Automatically manage signing的勾选，然后将Build Settings中Code Signing Identity下的4个值都改为iOS Developer（这之后可能需要关闭Xcode重新打开），在恢复Generate中Automatically manage signing的勾选。</p>
<h2 id="React-Native-IOS模拟器调试"><a href="#React-Native-IOS模拟器调试" class="headerlink" title="React Native IOS模拟器调试"></a>React Native IOS模拟器调试</h2><ul>
<li>Command+R 刷新</li>
<li>Command+D 菜单</li>
<li>Shift+Command+H 返回主界面</li>
</ul>
<h2 id="React-Native-兼容问题"><a href="#React-Native-兼容问题" class="headerlink" title="React Native 兼容问题"></a>React Native 兼容问题</h2><ul>
<li>Text组件，要有backgroundColor，如果只设置color，会连背景都为color的颜色，就看不到字了</li>
<li>WingBlank、WhiteSpace组件，背景色为透明色，需要显示设置为白色，否则可能有穿透效果</li>
<li>Tabs在IOS需要paddingTop样式，原因如图</li>
</ul>
<img src="/2017/03/23/react-native-ios/tabs.png" title="Tabs在Android和IOS的不同">
<ul>
<li>TabBar的图标非常大，需要添加scale属性，表示图标缩小的比例，如<code>128*128</code>的图标，sacle为4，则显示效果为<code>32*32</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;TabBar</div><div class="line">    unselectedTintColor=&quot;#8a8a8a&quot;</div><div class="line">    tintColor=&quot;#108ee9&quot;</div><div class="line">    barTintColor=&quot;white&quot;</div><div class="line">&gt;</div><div class="line">    &lt;TabBar.Item</div><div class="line">        icon=&#123;&#123; uri: Icons.task, scale: 4 &#125;&#125;</div><div class="line">        selectedIcon=&#123;&#123; uri: Icons.taskActive, scale: 4 &#125;&#125;</div><div class="line">        title=&quot;任务&quot;</div><div class="line">        key=&quot;task&quot;</div><div class="line">        selected=&#123;this.state.selectedTab === &apos;task&apos;&#125;</div><div class="line">        onPress=&#123;this.onPress.bind(this, &apos;task&apos;)&#125;</div><div class="line">    &gt;</div><div class="line">        &lt;Tasks navigator=&#123;this.props.navigator&#125; /&gt;</div><div class="line">    &lt;/TabBar.Item&gt;</div><div class="line">&lt;/TabBar&gt;</div></pre></td></tr></table></figure>
<ul>
<li>根据平台使用不同样式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const Global = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    ...Platform.select(&#123;</div><div class="line">      ios: &#123;</div><div class="line">        height: WINDOW_HEIGHT-TABBAR_HEIGHT-TABS_HEIGHT-20,</div><div class="line">      &#125;,</div><div class="line">      android: &#123;</div><div class="line">        height: WINDOW_HEIGHT-TABBAR_HEIGHT-TABS_HEIGHT-StatusBar_HEIGHT,</div><div class="line">      &#125;,</div><div class="line">    &#125;),</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>NetInfo.fetch() 为unknown</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">componentWillMount() &#123;</div><div class="line">  //如果不侦听网络状态变化，NetInfo.fetch()一直是unknown</div><div class="line">  NetInfo.isConnected.addEventListener(&apos;change&apos;, () =&gt; &#123;&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="React-Native-连接原生"><a href="#React-Native-连接原生" class="headerlink" title="React Native 连接原生"></a>React Native 连接原生</h2><p>由于之前是使用Windows在Android上开发的，使用到的依赖<br>react-native-vector-icons、react-native-image-picker需要与IOS原生连接，此时如果执行<code>react-native link</code>自动连接，担心会影响到已有的Android端的配置，因为Android是进行手动连接的，执行自动连接没有生效，而且也会将不需要连接的依赖一起连接了。所以想按照说明文档进行手动连接，但试过后并没有好使，即使是新初始化的项目，react-native-vector-icons在IOS上进行手动连接也是不好使的。后来我是新初始化了一个同名项目，安装完react-native-vector-icons、react-native-image-picker依赖后进行自动连接，运行好使了，我就把新项目与原项目ios目录中的文件进行了对比，将配置移到原项目中，运行后好使了。</p>
<p>过了两天发现这种方式有点傻，因为那时不知道<code>react-native link</code>可以指定手动连接的依赖。虽然没有试验，但是感觉只需要单独执行<code>react-native link react-native-vector-icons</code>和<code>react-native link react-native-image-picker</code>，再将android目录下变化的文件恢复，应该就可以了。</p>
<h2 id="打包ipa"><a href="#打包ipa" class="headerlink" title="打包ipa"></a>打包ipa</h2><p>在Xcode中，修改好Version和Build后，运行设备选择 Generic iOS Device， Product -&gt; archive，等待 Window -&gt; Organizer 弹出，点击Export，Select a method for export 选择 Save for Enterprise Deployment，Device Support 选择 Export one app for all compatible devices，Summary 不勾选，next 导出 ipa。</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-Android原生]]></title>
      <url>https://zhulichao.github.io/2017/03/18/react-native-android/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建Android模块"><a href="#创建Android模块" class="headerlink" title="创建Android模块"></a><a href="http://reactnative.cn/docs/0.42/native-modules-ios.html#content" target="_blank" rel="external">创建Android模块</a></h2><ul>
<li><p>React-Native@0.42.0</p>
</li>
<li><p>opms/android/app/java/com.opms下，新建<code>MyCustomModule.java</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.opms;</div><div class="line"></div><div class="line">import com.facebook.react.bridge.Callback;</div><div class="line">import com.facebook.react.bridge.ReactContextBaseJavaModule;</div><div class="line">import com.facebook.react.bridge.ReactMethod;</div><div class="line">import com.facebook.react.bridge.ReactApplicationContext;</div><div class="line"></div><div class="line">public class MyCustomModule extends ReactContextBaseJavaModule &#123;</div><div class="line">  public MyCustomModule(ReactApplicationContext reactContext) &#123;</div><div class="line">    super(reactContext);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public String getName() &#123;</div><div class="line">    return &quot;MyCustomModule&quot;;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  @ReactMethod</div><div class="line">  public void processString(String input, Callback callback) &#123;</div><div class="line">    callback.invoke(input.replace(&quot;Goodbye&quot;, &quot;Hello&quot;));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>opms/android/app/java/com.opms下，新建<code>MyCustomReactPackage.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.opms;</div><div class="line"></div><div class="line">import com.facebook.react.ReactPackage;</div><div class="line">import com.facebook.react.bridge.JavaScriptModule;</div><div class="line">import com.facebook.react.bridge.NativeModule;</div><div class="line">import com.facebook.react.bridge.ReactApplicationContext;</div><div class="line">import com.facebook.react.uimanager.ViewManager;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class MyCustomReactPackage implements ReactPackage &#123;</div><div class="line">    @Override</div><div class="line">    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</div><div class="line">        List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</div><div class="line">        modules.add(new MyCustomModule(reactContext));</div><div class="line">        return modules;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Arrays.&lt;ViewManager&gt;asList(</div><div class="line">            new MyCustomImageManager()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>opms/android/app/java/com.opms下，修改<code>MainActivity.java</code>文件的getPackages方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">    return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">        ...</div><div class="line">        new MyCustomReactPackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>index.android.js文件中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  NativeModules,</div><div class="line">  View,</div><div class="line">  AppRegistry,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">export default class opms_rn extends Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    // RN调Android原生模块</div><div class="line">    NativeModules.MyCustomModule.processString(&apos;Goodbye World.&apos;, (text) =&gt; &#123;</div><div class="line">      console.log(&quot;原生模块处理后：&quot;, text);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;请打开控制台看输出结果&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;opms&apos;, () =&gt; opms);</div></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<img src="/2017/03/18/react-native-android/Android-Module.png" title="调用Android原生模块">
<h2 id="创建Android-View"><a href="#创建Android-View" class="headerlink" title="创建Android View"></a><a href="http://reactnative.cn/docs/0.42/native-component-ios.html#content" target="_blank" rel="external">创建Android View</a></h2><ul>
<li><p>React-Native@0.42.0</p>
</li>
<li><p>opms/android/app/java/com.opms下，新建<code>MyCustomImageManager.java</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.opms;</div><div class="line"></div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import com.facebook.drawee.backends.pipeline.Fresco;</div><div class="line">import com.facebook.react.bridge.ReadableArray;</div><div class="line">import com.facebook.react.bridge.WritableArray;</div><div class="line">import com.facebook.react.bridge.WritableNativeArray;</div><div class="line">import com.facebook.react.uimanager.ReactStylesDiffMap;</div><div class="line">import com.facebook.react.uimanager.SimpleViewManager;</div><div class="line">import com.facebook.react.uimanager.ThemedReactContext;</div><div class="line">import com.facebook.react.uimanager.ViewProps;</div><div class="line">import com.facebook.react.uimanager.annotations.ReactProp;</div><div class="line">import com.facebook.react.views.image.ImageResizeMode;</div><div class="line">import com.facebook.react.views.image.ReactImageView;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">public class MyCustomImageManager extends SimpleViewManager&lt;ReactImageView&gt; &#123;</div><div class="line">    public static final String REACT_CLASS = &quot;RCTImageView&quot;;</div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return REACT_CLASS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected ReactImageView createViewInstance(ThemedReactContext context) &#123;</div><div class="line">        ReactImageView imageView = new ReactImageView(context, Fresco.newDraweeControllerBuilder(), null);</div><div class="line">        return imageView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ReactProp(name = &quot;src&quot;)</div><div class="line">    public void setSrc(ReactImageView view, @Nullable ReadableArray  src) &#123;</div><div class="line">        view.setSource(src);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ReactProp(name = &quot;borderRadius&quot;, defaultFloat = 0f)</div><div class="line">    public void setBorderRadius(ReactImageView view, float borderRadius) &#123;</div><div class="line">        view.setBorderRadius(borderRadius);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ReactProp(name = ViewProps.RESIZE_MODE)</div><div class="line">    public void setResizeMode(ReactImageView view, @Nullable String resizeMode) &#123;</div><div class="line">        view.setScaleType(ImageResizeMode.toScaleType(resizeMode));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>opms/android/app/java/com.opms下，新建<code>MyCustomReactPackage.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class MyCustomReactPackage implements ReactPackage &#123;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Arrays.&lt;ViewManager&gt;asList(</div><div class="line">            new MyCustomImageManager()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>opms/android/app/java/com.opms下，修改<code>MainActivity.java</code>文件的getPackages方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">    return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">        ...</div><div class="line">        new MyCustomReactPackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新建<code>ImageView.android.js</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import &#123; PropTypes &#125; from &apos;react&apos;;</div><div class="line">import &#123; requireNativeComponent, View &#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">var iface = &#123;</div><div class="line">  name: &apos;ImageView&apos;,</div><div class="line">  propTypes: &#123;</div><div class="line">    ...View.propTypes, // 包含默认的View的属性</div><div class="line">    src: PropTypes.string,</div><div class="line">    borderRadius: PropTypes.number,</div><div class="line">    resizeMode: PropTypes.oneOf([&apos;cover&apos;, &apos;contain&apos;, &apos;stretch&apos;]),</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = requireNativeComponent(&apos;RCTImageView&apos;, iface);</div></pre></td></tr></table></figure>
<ul>
<li>index.android.js文件中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  View,</div><div class="line">  AppRegistry,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import ImageView from &apos;./ImageView&apos;;</div><div class="line"></div><div class="line">export default class opms extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ImageView src=&quot;https://facebook.github.io/react/img/logo_og.png&quot; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;opms&apos;, () =&gt; opms);</div></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<p>当ImageView组件使用到属性src时，很奇怪会报错，所有操作都是按照官方教程做的仍然报错，网上也没有查到原因。<br><img src="/2017/03/18/react-native-android/Android-View-Err.png" width="300" title="调用Android原生View"></p>
<p>但是如果使用其它属性，如borderRadius，是不会报错的，通过React组件调试工具也能看到属性已经添加上了，应该是已经成功调用了Android原生View。<br><img src="/2017/03/18/react-native-android/Android-View2.png" title="调用Android原生View"></p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[递归用法]]></title>
      <url>https://zhulichao.github.io/2017/03/14/recursion/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前段时间有个刚学编程的人找我做了几道编程题，都用到了递归，让我写个使用递归的总结，我个人用到的递归不多，就这几道编程题总结如下，后期如有新的体会再补充。</p>
<h2 id="适用点"><a href="#适用点" class="headerlink" title="适用点"></a>适用点</h2><p>想一下规模为n的问题是否可以经过计算换算成规模为n-1的问题，如阶乘计算，n!=n*(n-1)!，这时就可以用递归。使用递归主要是代码写起来比较方便，大多数情况使用栈和循环都可以替代使用递归。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>写递归算法时，要最先思考边界值，就是递归算法在什么情况下不应该再递归下去，如对于阶乘问题的n为1、0的时候，防止出现死循环。</p>
<h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><p>用递归算法去解决问题，经常会比较耗性能，因为进行了大量循环，多进行一次递归可能会进行很多次循环，所以控制在哪些条件下无需递归很容易优化性能，如递归求最短路径时，如果当前递归处理的路径长度已经超过了当前最短路径的长度，那就不用再向下递归了。还要会利用数据结构，比如Map能够快速取值，如果是数组取值时需要进行遍历，尽量减少循环的次数。</p>
<h2 id="调试点"><a href="#调试点" class="headerlink" title="调试点"></a>调试点</h2><p>递归问题最大的难点可能就在调试上了，因为进行了很多循环，无法跟进每一个循环去看当前的值对不对。这时一定要将问题范围缩小，比如题目要求100个点，可以先拿10个以内的点去调试，这时可以通过断点调试跟进每一次循环，看到所有变量当前的值，这样就容易看出问题出在哪了。如果有问题的标准答案，还要会利用答案，如果解题需要大量循环无法跟进时，可以写一个if条件在满足正确答案时进行输出，也可以在这里打个断点，看看为什么没有获得这个标准的答案，这时比较容易看出问题。</p>
<p>以上都是我做那几个题时的思路和方法，以前我也就写过一两次递归，其实没什么经验，大多数方法都是以前调程序的经验。如果打算深入的往编程这方面发展，有如下建议：</p>
<p>1、要进行编程练习，就像递归，完全自己手动去解决两三个问题也就会用了，也有调试的经验了；<br>2、一定要会分析问题，拆分问题，这个问题分几步，每一步都做什么，这样比较容易写出程序，容易调试，容易定位问题出在哪步了，其它地方就不用看了，也方便解决问题，问题细化后就容易描述小问题了，可以上网找找现成的例子；<br>3、一定要会分析现象，现在程序运行的结果不对，是什么样的现象，这个现象表明什么本质，切记不要直接一遍一遍的看代码，找哪里不对，这样很难找到问题的，如果你知道这样写有问题，那当时也就不会这样写了，一定要仔细思考、分析现象，找到问题本质，然后定位有问题的代码范围，再看代码。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-生命周期]]></title>
      <url>https://zhulichao.github.io/2017/02/18/react-lifecycle/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学了React快一年了，现在用的已经比较顺手了，单个组件的生命周期执行过程已经很清楚了，但是关于多个组件之间怎么进入生命周期方法的还是不确定，现在好好学习一下。</p>
<h2 id="单个组件的生命周期过程"><a href="#单个组件的生命周期过程" class="headerlink" title="单个组件的生命周期过程"></a>单个组件的生命周期过程</h2><p>组件的生命周期函数按如下顺序执行，每个方法的说明如下：</p>
<ul>
<li><p>constructor</p>
<p>  构造函数，对组件的state进行初始化，对函数进行this绑定。</p>
</li>
<li><p>componentWillMount</p>
<p>  初始渲染前进入，只执行一次，如果这个函数里调用setState，不会执行渲染操作，而是等这个函数执行完成后再执行初始渲染。如果组件需要从本地存储中读取数据，一般放在这里执行。</p>
</li>
<li><p>render</p>
<p>  返回值为页面要显示的组件，组件的重新渲染后触发所有子组件的重新渲染。</p>
</li>
<li><p>componentDidMount</p>
<p>  初始渲染完成后进入，只执行一次。如果组件需要从网络侧读取数据，一般放在这里执行。</p>
</li>
<li><p>componentWillReceiveProps(nextProps, nextContext)</p>
<p>  组件在初始渲染完成后，当接收到新的props时进入，state发生变化时不会进入，而无论props的内容是否发生变化都会进入。如果在这个函数中调用setState，不会执行渲染操作，而是等该方法执行完成一起渲染。</p>
</li>
<li><p>shouldComponentUpdate(nextProps, nextState, nextContext)</p>
<p>  当组件接收到新的state或props时，这个函数将被调用，如果返回false可以阻止组件的重新渲染，也就不会进入本组件的componentWillUpdate、componentDidUpdate方法了。通过这个函数来阻止无必要的重新渲染可以提高程序的性能。</p>
</li>
<li><p>componentWillUpdate(nextProps, nextState, nextContext)</p>
<p>  组件在重新渲染前进入，<strong>切记不能在这个函数中通过setState更新状态，</strong> 如果需要改变，则在componentWillReceiveProps函数中进行改变，否则会导致死循环。</p>
</li>
<li><p>componentDidUpdate(prevProps, prevState, prevContext)</p>
<p>  组件在重新渲染完成时进入。</p>
</li>
<li><p>componentWillUnmount()</p>
<p>  组件在卸载前进入，如果组件申请了某些资源或订阅了某些消息，需要要在这个函数中释放资源或取消订阅，常见的是在这里清除定时器。</p>
</li>
</ul>
<img src="/2017/02/18/react-lifecycle/life.gif" title="单个组件的生命周期过程">
<h2 id="多个组件的生命周期过程"><a href="#多个组件的生命周期过程" class="headerlink" title="多个组件的生命周期过程"></a>多个组件的生命周期过程</h2><p>父组件每次执行过setState更新了state后，无论state内容是否发生变化，都会进行所有子孙组件的重新渲染。</p>
<p>先进入父组件的componentWillUnmount，再进入子组件的componentWillUnmount，就像先进入父组件的componentWillUpdate，再进入子组件的componentWillUpdate一样，只是React没有componentDidUnmount方法，看不到是先卸载子组件完成，再卸载父组件完成的。</p>
<img src="/2017/02/18/react-lifecycle/mount.png" title="初始化">
<img src="/2017/02/18/react-lifecycle/update.png" title="更新">
<img src="/2017/02/18/react-lifecycle/unmount.png" title="卸载">
<h2 id="forceUpdate函数"><a href="#forceUpdate函数" class="headerlink" title="forceUpdate函数"></a>forceUpdate函数</h2><p>forceUpdate函数不是组件的生命周期函数，组件通过调用<code>this.forceUpdate()</code>可以强制进行组件的重新渲染，并且会连带所有子组件都重新渲染。通过这种方式的重新渲染，不会进入本组件shouldComponentUpdate方法，会进入子组件的shouldComponentUpdate和componentWillReceiveProps方法及其它生命周期方法。</p>
<img src="/2017/02/18/react-lifecycle/forceUpdate.png" title="forceUpdate操作">
<h2 id="HOC（High-Order-Component-）高阶组件"><a href="#HOC（High-Order-Component-）高阶组件" class="headerlink" title="HOC（High Order Component ）高阶组件"></a>HOC（High Order Component ）高阶组件</h2><p>参考<a href="http://www.tuicool.com/articles/RFJJniN" target="_blank" rel="external">初识React中的High Order Component</a><br>HOC是一个抽象和公用代码的方案，它接受一个包含共用逻辑或者是状态的ReactComponent，并返回一个包含特定逻辑或者是状态的新ReactComponent，相当于对原组件做了一层包装，react-redux中的connect就算是HOC。组件的生命周期执行顺序与父子组件类型的执行顺序一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class App extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">      super(props);</div><div class="line">      this.state = &#123;</div><div class="line">        value: &apos;&apos;,</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      return (</div><div class="line">        &lt;input ref=&quot;app&quot; value=&#123;this.state.value&#125; onChange=&#123;this.onChange&#125;/&gt;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">const connect = (mapStateFromStore) =&gt; (WrappedComponent) =&gt; &#123;</div><div class="line">    class InnerComponent extends React.Component &#123;</div><div class="line">      constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">      &#125;</div><div class="line">      render () &#123;console.log(this)</div><div class="line">        return (</div><div class="line">          &lt;WrappedComponent ref=&quot;middle&quot; /&gt;</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    // 将新组件返回</div><div class="line">    return InnerComponent;</div><div class="line">&#125;</div><div class="line">const HOC = connect(() =&gt; (&#123;&#125;))(App);</div><div class="line"></div><div class="line">class Root extends React.Component &#123;</div><div class="line">    render() &#123;console.log(this)</div><div class="line">      return (</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;HOC ref=&quot;hoc&quot;/&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Root /&gt;,</div><div class="line">    document.getElementById(&apos;example&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<img src="/2017/02/18/react-lifecycle/hoc.png" title="HOC的ref结构">
<img src="/2017/02/18/react-lifecycle/hocHtml.png" title="HOC渲染出的DOM结构">
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《写给大家看的设计书》笔记]]></title>
      <url>https://zhulichao.github.io/2017/01/18/ui-design/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看了《写给大家看的设计书》，对页面设计的原则有了基本的了解，以下是个人感觉书中比较好的内容，记录下来方便以后查看。</p>
<h2 id="CRAP概念"><a href="#CRAP概念" class="headerlink" title="CRAP概念"></a>CRAP概念</h2><p>复杂的设计原理在书中被浓缩为4个词，对比、重复、对齐和对和亲密性，英文首字母缩写为CRAP。</p>
<p>对比（Contrast）：对比的基本思想是，要避免页面上的元素太过相似。如果元素（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让它们截然不同。要让页面引人注目，对比通常是最重要的一个因素，正是它能使读者首先看这个页面。要想实现有效的对比，对比就必须强烈。</p>
<p>重复（Repetition）：让设计中的视觉要素在整个作品中重复出现。可以重复颜色、形状、材质、空间关系、线宽、字体、大小和图片，等等。这样一来，既能增加条理性，还可以加强统一性。不要把重复用的太滥，而应当尽量“采用多样性实现统一”。</p>
<p>对齐（Alignment）：任何东西都不能在页面上随意安放。每个元素都应当与页面上的另一个元素有某种视觉联系。这样能建立一种清晰、精巧而且清爽的外观。元素之间会有一条看不见的线把它们连在一起，它会告诉读者，即使这些项并不靠近，但它们属于同一组。</p>
<p>亲密性（Proximity）：彼此相关的项应当靠近，归组在一起。如果多个项彼此之间存在很近的亲密性，它们就会成为一个视觉单元，而不是多个孤立的元素。这有助于组织信息，减少混乱，为读者提供清晰的结构。</p>
<h2 id="色轮的使用"><a href="#色轮的使用" class="headerlink" title="色轮的使用"></a>色轮的使用</h2><img src="/2017/01/18/ui-design/color.png" width="300" title="色轮">
<ul>
<li>类似色（analogous）组合由色轮上彼此相邻的颜色组成。</li>
<li>色轮上相对的颜色为互补色（complement），最佳搭配是一种作为主色，另一种用于强调。</li>
<li>彼此等间距的三种颜色通常会形成一个让人愉快的三色组（triad）。</li>
<li>从色轮的一边选择一种颜色，再在色轮上找不他对面的互补色两侧的颜色，称为分裂互补三色组（split triad）。</li>
<li>单色组合由一种色调及其相应的多种亮色和暗色组成。</li>
</ul>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li>把所有大写都变为小写，只保留合适的首字母大写，这样能留出更多的空间，使标题更大、更醒目。</li>
<li>把圆角变为直角，可能会使外观更简洁、更突出。</li>
<li>要有意识地注意你是怎样阅读的，视线怎样移动的。</li>
<li>眯起眼睛，如果页面上的项超过3~5个，就要看看哪些孤立的元素可以归在一组了。</li>
<li>居中对齐会创建一种更正式、更稳重的外观，这种外观显得更为中规中矩，但通常也很乏味。</li>
<li>页面上直至用一种文本对齐。</li>
<li>绝对不要在左对齐的正文或缩进的文本上方将标题居中。</li>
<li>去掉Times Roman、Arial/Helvetica和Sand字体。</li>
<li>由于颜色组合而导致发生视觉抖动的原因通常是色质过于接近。</li>
<li>冷色（蓝色、绿色）总趋于后退，而暖色（红色、橙色）是趋近型的。如果要组合暖色和冷色，一定要少用些暖色。</li>
<li>制作logo可以使用分裂互补三色组。</li>
<li>不要对文本或图片的链接使用默认的蓝色。</li>
<li>不要把文本链接放在有边框的粗笨表单元格中。</li>
<li>正文不要用粗体，也不要占据整个页面的宽度。</li>
<li>不要使用荧光背景色，特别是不要使用荧光文字。</li>
<li>不要让用户移动滚动条，特别是不要让表的宽度超过600像素，否则用户在打印页面时会很恼火。</li>
<li>Verdan字体是显示Web正文的一个绝好的选择。</li>
<li>有时名人名言使用Decorative字体非常合适。</li>
<li>向右上倾斜的字体产生一种前进的力量，向下倾斜的字体会产生一种反向的力量。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Reading Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-事件循环]]></title>
      <url>https://zhulichao.github.io/2017/01/08/javascript-event-loop/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考<br><a href="http://www.jb51.net/article/56022.htm" target="_blank" rel="external">JavaScript运行机制之事件循环(Event Loop)详解</a><br><a href="http://www.cnblogs.com/Medeor/p/4945687.html" target="_blank" rel="external">从setTimeout说事件循环模型</a></p>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>JavaScript语言是单线程的，这事因为作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。这是这门语言的核心特征。</p>
<p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM，并没有改变JavaScript单线程的本质。</p>
<h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。JavaScript就有两种执行方式：一种是CPU按顺序执行，前一个任务结束，再执行下一个任务，这叫做同步执行；另一种是CPU跳过等待时间长的任务，先处理后面的任务，这叫做异步执行。<br>异步执行的运行机制如下(同步执行也是如此，因为它可以被视为没有异步任务的异步执行)：</p>
<ul>
<li>所有任务(同步和异步的)都在主线程上执行，形成一个”执行栈”(execution context stack)</li>
<li>主程之外，还存在一个”任务队列”(task queue)，系统把异步任务放到”任务队列”之中，然后继续执行后续的任务</li>
<li>一旦”执行栈”中的所有任务执行完毕，系统就会读取”任务队列”，如果这个时候，异步任务已经结束了等待状态，就会从”任务队列”进入执行栈，恢复执行</li>
<li>主线程不断重复上面的第三步，只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</li>
</ul>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>“任务队列”实质上是一个事件的队列(也可以理解成消息的队列)，主线程读取”任务队列”，就是读取里面有哪些事件。如IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了；鼠标点击、页面滚动等只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。</p>
<p>所谓”回调函数”(callback)，就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当异步任务从”任务队列”回到执行栈，回调函数就会执行。</p>
<p>Javascript执行引擎的主线程运行的时候，产生堆和栈。程序中代码依次进入栈中等待执行。栈中的代码调用各种外部API，在”任务队列”中加入各种事件，只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。执行栈中的代码，总是在读取”任务队列”之前执行。不同的操作添加到任务队列的时机也不同。</p>
<blockquote>
<p>onclick 由浏览器内核的DOM Binding模块来处理，当事件触发的时候，回调函数会立即添加到任务队列中。<br>setTimeout 会由浏览器内核的timer模块来进行延时处理，当时间到达的时候，才会将回调函数添加到任务队列中。<br>ajax 则会由浏览器内核的network模块来处理，在网络请求完成返回之后，才将回调添加到任务队列中。  </p>
</blockquote>
<p>主线程从”任务队列”中读取事件，只要执行栈一清空，”任务队列”上第一位的事件就自动返回主线程，这个过程是循环不断的，所以整个的这种运行机制又称为事件循环(Event Loop)。</p>
<p>示例一输出结果都是4，表明程序是先运行完4次循环后，再进入setTimeout的。<br>实例二输出结果是1001，表明程序是向下执行完while循环后，再进入setTimeout的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 示例一</div><div class="line">for(var i = 0; i&lt;=3; i++)&#123;</div><div class="line">    setTimeout(function() &#123;</div><div class="line">        console.log(i); // 输出4</div><div class="line">    &#125;, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 实例二</div><div class="line">var startDate = new Date();</div><div class="line">setTimeout(function() &#123;</div><div class="line">    var endDate = new Date();</div><div class="line">    console.log(endDate - startDate); // 输出1001</div><div class="line">&#125;, 500);</div><div class="line">while(new Date() - startDate &lt; 1000)&#123;&#125;;</div></pre></td></tr></table></figure>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>“任务队列”除了放置异步任务，还可以放置定时事件，即指定某些代码在多少时间之后执行，即到达设置的延时时间时被添加至任务队列里。定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p>
<p><strong>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</strong></p>
<p>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。</p>
<p>Node.js除了setTimeout和setInterval这两个方法，还提供了另外两个与”任务队列”有关的方法：process.nextTick和setImmediate。</p>
<ul>
<li>process.nextTick方法可以在当前”执行栈”的尾部，也就是主线程下一次读取”任务队列”之前，触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。</li>
<li>setImmediate方法则是在当前”任务队列”的尾部触发回调函数，也就是说，它指定的任务总是在主线程下一次读取”任务队列”时执行，这与setTimeout很像，但一次”事件循环”只能触发一个由setImmediate指定的回调函数。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-基础2]]></title>
      <url>https://zhulichao.github.io/2016/12/29/react-native-base2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="View组件"><a href="#View组件" class="headerlink" title="View组件"></a>View组件</h2><p>View组件还有三个没有在官方文档中公布的回调函数：onTouchStart、onTouchMove、onTouchEnd。这三个回调函数都有一个特殊的性质，就是在React Native开发中，通常是在最上层的组建中(render函数靠后渲染的组件)处理触摸事件的；但这三个回调函数总能收到事件，而不管用户当前触摸区域是空白的，还是有其它组件已经处理了触摸事件。</p>
<h2 id="pointEvents属性"><a href="#pointEvents属性" class="headerlink" title="pointEvents属性"></a>pointEvents属性</h2><p>在React Native中，触摸事件总是被传送给最上层的组件。当很多组件被布局在手机屏幕上时，有的组件可能会遮盖住它下方的其它组件。对于某些应用逻辑，被遮盖住的组件需要处理触摸事件，这时就可以使用pointerEvents属性。</p>
<ul>
<li>取值none，表示发生在本组件与本组件的子组件上的触摸事件都会交给本组件的父组件处理；</li>
<li>取值box-none，表示发生在本组件显示范围内（但非本组件的子组件显示范围内）的事件将交由本组件的父组件处理，发生在本组件的子组件显示范围内的触摸事件由子组件处理；</li>
<li>取值box-only，表示发生在本组件显示范围内的触摸事件将全部有本组件处理（即使触摸事件发生在本组件的子组件显示范围内）；</li>
<li>取值auto会视组件的不同而不同。</li>
</ul>
<h2 id="设备放置状态、onLayout回调函数"><a href="#设备放置状态、onLayout回调函数" class="headerlink" title="设备放置状态、onLayout回调函数"></a>设备放置状态、onLayout回调函数</h2><p>使项目在两个平台行都能自动调整应用的显示方式来适应设备当前的放置状态，需要：</p>
<ul>
<li>在应用启动时能检测到设备是横置的还是竖置的；</li>
<li>当设备从横置变为竖置或从竖置变为横置时，应用要能监测到这个事件。</li>
</ul>
<p>检测设备当前是竖置还是横置的一个方法是取当前设备屏幕的宽与高，正常的设备在竖置时宽小于高，在横置时宽大于高。Demensions API 可以获取屏幕的宽和高。</p>
<p>通常，React Native 开发的应用有一个或多个根View，根View的特点是它没有父组件。onLayout回调函数在组件被加载或者布局被改变时会被调用，通过指定这个根View组件的onLayout回调函数可以很方便地得到初始设备的放置状态，检测设备放置状态的改变并得到改变后新的屏幕高度与宽度。为了实现这些功能，不能指定根View的宽和高，并需要设定根View组件的样式flex值为1。<strong>注意，模拟器显示方式被改变时不会触发Layout事件。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&apos;user strick&apos;;</div><div class="line">var React = require(&apos;react-native&apos;);</div><div class="line">var &#123; AppRegister, StyleSheet, Text, View, Dimensions &#125; = React;</div><div class="line">var Project19 = React.createClass(&#123;</div><div class="line">    _onLayout: function (event) &#123;</div><div class="line">        console.log(&apos;屏幕的宽度：&apos;, Dimensions.get(&apos;window&apos;).width);</div><div class="line">        console.log(&apos;屏幕的高度：&apos;, Dimensions.get(&apos;window&apos;).height);</div><div class="line">        let &#123; x, y, width, height &#125; = event.nativeEvent.layout;</div><div class="line">        console.log(&apos;View的宽度：&apos;, width);</div><div class="line">        console.log(&apos;View的高度：&apos;, height);</div><div class="line">        console.log(&apos;View的左上顶点横坐标：&apos;, x);</div><div class="line">        console.log(&apos;View的左上顶点纵坐标：&apos;, y);</div><div class="line">    &#125;,</div><div class="line">    _onLayoutText: function(event) &#123;</div><div class="line">        let &#123; x, y, width, height &#125; = event.nativeEvent.layout;</div><div class="line">        console.log(&apos;Text的宽度：&apos;, width);</div><div class="line">        console.log(&apos;Text的高度：&apos;, height);</div><div class="line">        console.log(&apos;Text的左上顶点横坐标：&apos;, x);</div><div class="line">        console.log(&apos;Text的左上顶点纵坐标：&apos;, y);</div><div class="line">    &#125;,</div><div class="line">    render: function() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125; onLayout=&#123;this._onLayout&#125;&gt;</div><div class="line">                &lt;Text style=&#123;styles.welcom&#125; onLayout=&#123;this._onLayoutText&#125;&gt;</div><div class="line">                    Welcom to React Native!</div><div class="line">                &lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItem: &apos;center&apos;,</div><div class="line">        backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">    &#125;,</div><div class="line">    welcom: &#123;</div><div class="line">        fontSize: 20,</div><div class="line">        textAlign: &apos;center&apos;,</div><div class="line">        margin: 10,</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegister.registerComponent(&apos;Project19&apos;, () =&gt; Project19);</div></pre></td></tr></table></figure>
<h2 id="setNativeProps成员函数"><a href="#setNativeProps成员函数" class="headerlink" title="setNativeProps成员函数"></a>setNativeProps成员函数</h2><p>每个React Native组件都有一个公开的成员函数setNativeProps，使用它可以增加或修改组件的属性，但不建议使用该函数，它是一个“简单、粗暴”的方法，可以直接操作任何层面组件的属性，而不是使用React Native组件的状态机变量，这样会使代码逻辑混乱。</p>
<p>在不得不频繁刷新而又遇到性能瓶颈时，比如创建连续的动画，同时要避免渲染组件结构和同步太多的视图变化所带来的大量开销时，才考虑使用setNativeProps函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">let Project19 = React.createClass(&#123;</div><div class="line">    getInitialState: function() &#123;</div><div class="line">        return &#123;</div><div class="line">            textInputValue: &apos;&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    buttonPressed: function() &#123;</div><div class="line">        let textInputValue = &apos;new value&apos;;</div><div class="line">        this.setState(&#123; textInputValue &#125;);</div><div class="line">        this.refs.textInputRefer.setNativeProps(&#123;</div><div class="line">            editable: false</div><div class="line">        &#125;);</div><div class="line">        this.refs.text2.setNativeProps(&#123;</div><div class="line">            style: &#123;</div><div class="line">                color: &apos;blue&apos;,</div><div class="line">                fontSize: 30</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    render: function() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">                &lt;Text style=&#123;styles.buttonStyle&#125; onPress=&#123;this.buttonPressed&#125;&gt;</div><div class="line">                    Press me genterly</div><div class="line">                &lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;styles.textPromptStyle&#125; ref=&quot;text2&quot;</div><div class="line">                    文字提示</div><div class="line">                &lt;/Text&gt;</div><div class="line">                &lt;View&gt;</div><div class="line">                    &lt;TextInput</div><div class="line">                        style=&#123;styles.textInputStyle&#125;</div><div class="line">                        ref=&quot;textInputRefer&quot;</div><div class="line">                        value=&#123;this.state.textInputValue&#125;</div><div class="line">                        onChangeText=&#123;(textInputValue)=&gt;this.setState(&#123;textInputValue&#125;)&#125;</div><div class="line">                    /&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="measure成员函数"><a href="#measure成员函数" class="headerlink" title="measure成员函数"></a>measure成员函数</h2><p>每一个React Native组件都有一个measure成员函数，调用它可以得到组件当前的宽、高与位置信息。使用View组件的onLayout回调函数是获取组件的宽、高与位置信息的好办法，但对某些代码生成的组件，使用组件的measure成员函数是唯一的方法。<strong>Ant Design Mobile组件无法使用measure方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">// 在componentDidMount执行完后才可以获取位置信息</div><div class="line">componentDidMount: function() &#123;</div><div class="line">    var aref = this.tempfunc;</div><div class="line">    window.setTimeout(aref, 1);</div><div class="line">&#125;,</div><div class="line">tempfunc: function() &#123;</div><div class="line">    this.refs.aTextInputRef.measure( this.getTextInputPosition);</div><div class="line">&#125;,</div><div class="line">getTextInputPosition: function(fx, fy, width, height, px, py) &#123;</div><div class="line">    console.log(&apos;getTextInputPosition方法&apos;);  </div><div class="line">    console.log(&apos;Component width: &apos; + width);</div><div class="line">    console.log(&apos;Component height: &apos; + height);</div><div class="line">    console.log(&apos;X offset to frame: &apos; + fx); // 这个值无用</div><div class="line">    console.log(&apos;Y offset to frame: &apos; + fy);</div><div class="line">    console.log(&apos;X offset to page: &apos; + px);</div><div class="line">    console.log(&apos;Y offset to page: &apos; + py);</div><div class="line">&#125;,</div><div class="line">...</div></pre></td></tr></table></figure>
<img src="/2016/12/29/react-native-base2/measure.png" title="结果如图">
<h2 id="AsyncStorage"><a href="#AsyncStorage" class="headerlink" title="AsyncStorage"></a>AsyncStorage</h2><p>React Native框架不支持调用JavaScript的fs包进行文件读写操作，<strong>但提供了AsyncStorage API将“字符串键值对”存储在手机存储空间中</strong>。AsyncStorage不提供索引、排序等数据库中经常使用的功能，每个AsyncStorage API提供的方法都会返回一个JavaScript的Promise对象。</p>
<p>使用AsyncStorage的静态函数时，如果参数类型提供错误，try…catch机制将无法捕捉到这个错误。使用Promise机制的rejection状态处理函数中或者利用Promise机制发生错误时的回调函数可以捕捉到错误。但这三种机制中的任何一种都不能阻止手机屏幕的红屏错误。</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Promise-Async-基础]]></title>
      <url>https://zhulichao.github.io/2016/12/26/promise-async-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">Promise对象</a></h2><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。</p>
<p>Promise的特点：</p>
<ul>
<li>对象的状态不受外界影响，Pending（进行中）、Resolved（已完成，又称Fulfilled）和Rejected（已失败），任何其他操作都无法改变这个状态。<strong>这也是Promise这个名字的由来。</strong></li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果，再对Promise对象添加回调函数，也会立即得到这个结果。</li>
</ul>
<p>Promise的缺点：</p>
<ul>
<li>无法取消Promise，<strong>一旦新建它就会立即执行</strong>，无法中途取消。</li>
<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li>
<li>当处于Pending状态时，无法得知目前进展到哪一个阶段。</li>
</ul>
<p><strong>如果某些事件不断地反复发生，一般来说，使用stream模式是比部署Promise更好的选择。</strong></p>
<p>Promise对象是一个构造函数，用来生成Promise实例，它接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。resolve函数的作用是，将Promise对象的状态从Pending变为Resolved，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；reject函数的作用是，将Promise对象的状态从Pending变为Rejected，在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去。Promise实例生成后，可以用then方法分别指定Resolved状态和Rejectded状态的回调函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  // ... some code</div><div class="line">  if (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; else &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(function(value) &#123;</div><div class="line">  // success</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  // failure</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行。<br>resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，形式如下。这时p1的状态就会传递给p2，也就是说，p1的状态决定了p2的状态。如果p1的状态是Pending，那么p2的回调函数就会等待p1的状态改变；如果p1的状态已经是Resolved或者Rejected，那么p2的回调函数将会立刻执行。由于p2返回的是另一个Promise，所以后面的then语句都变成针对p1了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(function (resolve, reject) &#123;</div><div class="line">  // ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var p2 = new Promise(function (resolve, reject) &#123;</div><div class="line">  // ...</div><div class="line">  resolve(p1);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">p2.then(function(value) &#123;</div><div class="line">  // success</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  // failure</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果异步操作抛出错误，状态就会变为Rejected，就会调用catch方法指定的回调函数，处理这个错误。另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promise.then(function(posts) &#123;</div><div class="line">  // ...</div><div class="line">&#125;).catch(function(error) &#123;</div><div class="line">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</div><div class="line">  console.log(&apos;发生错误！&apos;, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应。<br><strong>需要注意的是，catch方法返回的还是一个Promise对象，因此后面还可以接着调用then方法。如果没有报错，则会跳过catch方法。</strong></p>
<p>Node 有一个unhandledRejection事件，专门监听未捕获的reject错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 第一个参数是错误对象，第二个参数是报错的Promise实例</div><div class="line">process.on(&apos;unhandledRejection&apos;, function (err, p) &#123;</div><div class="line">  console.error(err.stack)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。p1、p2、p3都是Promise对象的实例，如果不是，就会先调用Promise.resolve方法将参数转为Promise实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var p = Promise.all([p1, p2, p3]);</div></pre></td></tr></table></figure></p>
<p>p的状态由p1、p2、p3决定：</p>
<ul>
<li>只有p1、p2、p3的状态都变成resolved，p的状态才会变成resolved，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li>
<li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li>
</ul>
<p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。该方法与Promise.all类似，区别是只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变，那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var p = Promise.race([p1, p2, p3]);</div></pre></td></tr></table></figure></p>
<p>Promise.resolve方法将现有对象转为Promise对象：</p>
<ul>
<li>如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。</li>
<li>如果参数是一个thenable对象（thenable对象指的是具有then方法的对象），那么Promise.resolve将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。</li>
<li>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。</li>
<li>如果不带任何参数，直接返回一个Resolved状态的Promise对象。</li>
</ul>
<p>如给fetch添加客户端超时，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const p = Promise.race([</div><div class="line">  fetch(url),</div><div class="line">  new Promise(function (resolve, reject) &#123;</div><div class="line">    setTimeout(() =&gt; reject(new Error(&apos;request timeout&apos;)), 5000)</div><div class="line">  &#125;)</div><div class="line">]);</div><div class="line">p.then(response =&gt; console.log(response));</div><div class="line">p.catch(error =&gt; console.log(error));</div></pre></td></tr></table></figure></p>
<p><strong>注意，立即resolve的Promise对象，是在本轮“事件循环”的结束时执行，setTimeout(fn, 0)在下一轮“事件循环”开始时执行。</strong></p>
<p>Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。</p>
<p>Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到。因此，可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Promise.prototype.done = function (onFulfilled, onRejected) &#123;</div><div class="line">  this.then(onFulfilled, onRejected)</div><div class="line">    .catch(function (reason) &#123;</div><div class="line">      // 抛出一个全局错误</div><div class="line">      setTimeout(() =&gt; &#123; throw reason &#125;, 0);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。它与done方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Promise.prototype.finally = function (callback) &#123;</div><div class="line">  let P = this.constructor;</div><div class="line">  return this.then(</div><div class="line">    value  =&gt; P.resolve(callback()).then(() =&gt; value),</div><div class="line">    reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;)</div><div class="line">  );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果不知道或者不想区分函数f是同步函数还是异步操作，但是想用 Promise 来处理它，像下面这样，会有一个缺点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Promise.resolve().then(f)</div></pre></td></tr></table></figure></p>
<p>上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。</p>
<p><strong>立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。</strong><br><strong>Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了</strong></p>
<p>让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API，有两种方式：</p>
<ul>
<li>用async函数，但是<code>async () =&gt; f()</code>会吃掉f()抛出的错误，需要使用promise.catch方法。</li>
<li>使用new Promise()。</li>
</ul>
<p>但是Promise.try为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用Promise.try包装一下。</p>
<h2 id="异步操作和Async函数"><a href="#异步操作和Async函数" class="headerlink" title="异步操作和Async函数"></a><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="external">异步操作和Async函数</a></h2><h3 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h3><p>异步编程的四种方式：回调函数、事件监听、发布/订阅、Promise。</p>
<p>为什么Node约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是null）？原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了，在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。</p>
<p>回调函数在多个回调函数嵌套时，代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理，称为”回调函数地狱”。Promise对象就是为了解决这个问题而提出的，将回调函数的嵌套，改成链式调用。</p>
<p>Promise的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。Promise的最大问题是代码冗余，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p>
<p>Generator函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。</p>
<p>使用Generator函数，执行一个异步任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var fetch = require(&apos;node-fetch&apos;);</div><div class="line"></div><div class="line">function* gen()&#123;</div><div class="line">  var url = &apos;https://api.github.com/users/github&apos;;</div><div class="line">  var result = yield fetch(url);</div><div class="line">  console.log(result.bio);</div><div class="line">&#125;</div><div class="line">/*</div><div class="line"> * 执行Generator函数，获取遍历器对象，然后用next方法执行异步任务的第一阶段。</div><div class="line"> * 由于Fetch模块返回的是一个Promise对象，因此要用then方法调用下一个next方法。</div><div class="line"> */</div><div class="line">var g = gen();</div><div class="line">var result = g.next();</div><div class="line">result.value.then(function(data)&#123;</div><div class="line">  return data.json();</div><div class="line">&#125;).then(function(data)&#123;</div><div class="line">  g.next(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Thunk函数现在可以用于Generator函数的自动流程管理。下面就是一个基于Thunk函数的Generator执行器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function run(fn) &#123;</div><div class="line">  var gen = fn();</div><div class="line">  // next函数是Thunk的回调函数</div><div class="line">  function next(err, data) &#123;</div><div class="line">    var result = gen.next(data);</div><div class="line">    if (result.done) return;</div><div class="line">    result.value(next);</div><div class="line">  &#125;</div><div class="line">  next();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* g() &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">run(g);</div></pre></td></tr></table></figure>
<h3 id="Async函数"><a href="#Async函数" class="headerlink" title="Async函数"></a>Async函数</h3><p>从语法上看，async函数就是将Generator函数的星号（*）替换成async，将yield替换成await。async函数返回一个Promise对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>
<p>async函数对 Generator 函数的改进，体现在以下四点：</p>
<ul>
<li>内置执行器。Generator函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。</li>
<li>更好的语义。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</li>
<li>更广的适用性。co模块约定，yield命令后面只能是Thunk函数或Promise对象，而async函数的await命令后面，可以是Promise对象和原始类型的值。</li>
<li>返回值是 Promise。async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。</li>
</ul>
<p>async函数的语法规则总体上比较简单，难点是错误处理机制：</p>
<ul>
<li>async函数返回一个Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。async函数内部抛出错误，会导致返回的Promise对象变为reject状态，抛出的错误对象会被catch方法回调函数接收到。</li>
<li>async函数返回的Promise对象，必须等到内部所有await命令的Promise对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</li>
<li>正常情况下，await命令后面是一个Promise对象。如果不是，会被转成一个立即resolve的Promise对象。await命令后面的Promise对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。</li>
<li>只要一个await语句后面的Promise变为reject，那么整个async函数都会中断执行。为了避免这个问题，可以将await放在try…catch结构里面，这样后面的await就会执行；另一种方法是await后面的Promise对象再跟一个catch方法，处理前面可能出现的错误。</li>
</ul>
<p>async函数的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">async function fn(args)&#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 等同于</div><div class="line">function fn(args)&#123;</div><div class="line">  return spawn(function*() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">function spawn(genF) &#123;</div><div class="line">  return new Promise(function(resolve, reject) &#123;</div><div class="line">    var gen = genF();</div><div class="line">    function step(nextF) &#123;</div><div class="line">      try &#123;</div><div class="line">        var next = nextF();</div><div class="line">      &#125; catch(e) &#123;</div><div class="line">        return reject(e);</div><div class="line">      &#125;</div><div class="line">      if(next.done) &#123;</div><div class="line">        return resolve(next.value);</div><div class="line">      &#125;</div><div class="line">      Promise.resolve(next.value).then(function(v) &#123;</div><div class="line">        step(function() &#123; return gen.next(v); &#125;);</div><div class="line">      &#125;, function(e) &#123;</div><div class="line">        step(function() &#123; return gen.throw(e); &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    step(function() &#123; return gen.next(undefined); &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>async 函数的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">async function getStockPriceByName(name) &#123;</div><div class="line">  const symbol = await getStockSymbol(name);</div><div class="line">  const stockPrice = await getStockPrice(symbol);</div><div class="line">  return stockPrice;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getStockPriceByName(&apos;goog&apos;).then(function (result) &#123;</div><div class="line">  console.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ant Design Mobile 组件学习经验]]></title>
      <url>https://zhulichao.github.io/2016/12/17/ant-design-mobile-study/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用过的组件"><a href="#使用过的组件" class="headerlink" title="使用过的组件"></a>使用过的组件</h2><p>TabBar、Toast、ActivityIndicator、Button、SegmentedControl、Tabs、WingBlank、Icon</p>
<h2 id="自定义组件样式"><a href="#自定义组件样式" class="headerlink" title="自定义组件样式"></a>自定义组件样式</h2><p>参见<a href="http://www.jianshu.com/p/70b46e305914" target="_blank" rel="external">有情怀的程序猿</a></p>
<h2 id="TabBar组件"><a href="#TabBar组件" class="headerlink" title="TabBar组件"></a>TabBar组件</h2><p>使用TabBar组件需注意：</p>
<ul>
<li>TabBar.Item必须多余1个否则报错  </li>
<li>TabBar.Item中包裹的组件要有背景色，否则会重合显示  </li>
</ul>
<h2 id="InputItem组件"><a href="#InputItem组件" class="headerlink" title="InputItem组件"></a>InputItem组件</h2><p>使用该组件时在Android上无法输入，所以直接使用的React Native的TextInput组件。</p>
<h2 id="SegmentedControl组件"><a href="#SegmentedControl组件" class="headerlink" title="SegmentedControl组件"></a>SegmentedControl组件</h2><p>其实是一个标签的效果，通过在SegmentedControl标签内，根据selectedIndex不同包裹不同的子组件，可以实现内容切换的效果。<strong>但是这种方式每次点击显示的内容都是重新加载的，不像Tabs有缓存的功能。</strong></p>
<h2 id="Icon组件"><a href="#Icon组件" class="headerlink" title="Icon组件"></a>Icon组件</h2><p>详见<a href="https://mobile.ant.design/components/icon/#如何使用-(RN-版" target="_blank" rel="external">Icon 如何使用-(RN-版)</a>)，在android上这样配置没问题，在ios上还要参考<a href="https://github.com/ant-design/ant-design-mobile/issues/1027#issuecomment-289643922" target="_blank" rel="external">issues-1027</a>。</p>
<h2 id="RN兼容性及Android兼容性"><a href="#RN兼容性及Android兼容性" class="headerlink" title="RN兼容性及Android兼容性"></a>RN兼容性及Android兼容性</h2><p>个人感觉 Ant Design Mobile 当前不太稳定，RN兼容性及Android兼容性都有些问题，如果没有特殊要求且RN中存在满足需求的组件，建议还是使用RN的。</p>
<p><a href="https://github.com/ant-design/ant-design-mobile/issues/634" target="_blank" rel="external">关于 antd-mobile 对应的 RN 版本使用说明</a><br><a href="https://github.com/ant-design/ant-design-mobile/issues/589" target="_blank" rel="external">组件 RN 版本兼容性测试记录</a><br><a href="https://github.com/ant-design/ant-design-mobile/issues/381" target="_blank" rel="external">SwipeAction在安卓上无效</a>  </p>
]]></content>
      
        <categories>
            
            <category> Ant Design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ant Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-基础1]]></title>
      <url>https://zhulichao.github.io/2016/11/30/react-native-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用过的组件及API"><a href="#使用过的组件及API" class="headerlink" title="使用过的组件及API"></a>使用过的组件及API</h2><p>KeyboardAvoidingView、View、ListView、Navigator、RefreshControl、ScrollView、Text、TextInput、TouchableHighlight、WebView、Alert、AppRegistry、AsyncStorage、BackAndroid、Dimensions、Keyboard、StyleSheet、Platform、Picker、Geolocation、InteractionManager、Vibration</p>
<h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>react-native init ProjectName 初始化的工程。</p>
<p>react-native init ProjectName –version 0.42.0 初始化指定版本react-native工程。</p>
<p>工程重命名：工程代码中有工程名称，所有不好直接给工程重命名，可能需要重新初始化一个项目，然后将代码复制过去。</p>
<p>如果要修改App显示名称，将/android/app/src/main/res/values/strings.xml 中修改app_name改为想要的名字即可。</p>
<h2 id="项目名称修改"><a href="#项目名称修改" class="headerlink" title="项目名称修改"></a>项目名称修改</h2><p>目前只找到了针对Android的项目名称修改的方法，如将项目名称修改为HelloRN，步骤如下：</p>
<ul>
<li>/package.json 中修改name属性值为”HelloRN”</li>
<li>/index.android.js 中修改根组件名称为”HelloRN”及AppRegistry.registerComponent(‘HelloRN’, () =&gt; HelloRN);</li>
<li>包结构修改为/android/app/src/main/java/com/hellorn</li>
<li>/android/app/build.gradle 中修改applicationId为”com.hellorn”</li>
<li>/android/app/src/AndroidManifest.xml 中修改package为”com.hellorn”</li>
<li>/android/app/src/main/java/com/hellorn/MainActivity.java 中getMainComponentName方法的返回值修改为”HelloRN”</li>
<li>/android/app/src/main/res/values/strings.xml 中修改app_name为”HelloRN”</li>
</ul>
<p>针对IOS项目名称修改的方法还未找到？</p>
<h2 id="android启动图标"><a href="#android启动图标" class="headerlink" title="android启动图标"></a>android启动图标</h2><ul>
<li>/android/app/src/main/res/mipmap-hdpi目录下，替换ic_launcher.png图片，72×72</li>
<li>/android/app/src/main/res/mipmap-mdpi目录下，替换ic_launcher.png图片，48×48</li>
<li>/android/app/src/main/res/mipmap-xhdpi目录下，替换ic_launcher.png图片，96×96</li>
<li>/android/app/src/main/res/mipmap-xxhdpi目录下，替换ic_launcher.png图片，144×144</li>
</ul>
<h2 id="android首屏背景"><a href="#android首屏背景" class="headerlink" title="android首屏背景"></a>android首屏背景</h2><ul>
<li>/android/app/src/main/res/drawable-hdpi目录下480×800，添加png图片</li>
<li>/android/app/src/main/res/drawable-mdpi目录下320×480，添加png图片</li>
<li>/android/app/src/main/res/drawable-xhdpi目录下720×1280，添加png图片</li>
<li>/android/app/src/main/res/drawable-xxhdpi目录下1080×1920，添加png图片</li>
</ul>
<p>/android/app/src/main/res/values/styles.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line">    &lt;!-- 这里将刚刚那张图片设置为背景图片， splash对应图片名称 --&gt;</div><div class="line">    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/splash&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h2 id="android项目版本号修改"><a href="#android项目版本号修改" class="headerlink" title="android项目版本号修改"></a>android项目版本号修改</h2><p>/android/app/目录下修改build.gradle文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    varsionName &quot;1.1&quot; // 打包后apk的版本</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>react-native run-android 在android启动项目，如果运行在真机，需要摇晃手机调出开发者菜单-&gt;Dev Settings-&gt;Debug server host for device，进行IP和端口的设置。</p>
<p>react-native run-ios 在ios启动项目。</p>
<p>无论是运行上面哪个命令，都会打开一个启动package服务的命令行窗口，如果没有打开这个窗口，请用react-native start手动启动package服务，react-native start –port XXXX 开启服务的时候直接指定端口号。</p>
<h2 id="如何使用-Ant-Design-Mobile"><a href="#如何使用-Ant-Design-Mobile" class="headerlink" title="如何使用 Ant Design Mobile"></a>如何使用 Ant Design Mobile</h2><ul>
<li><code>npm install antd-mobile --save</code>  </li>
<li><code>npm install babel-plugin-import --save-dev</code></li>
<li>.babelrc中配置如下  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [</div><div class="line">    &quot;react-native&quot;</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;: [</div><div class="line">    [</div><div class="line">      &quot;import&quot;,</div><div class="line">      &#123;</div><div class="line">        &quot;libraryName&quot;: &quot;antd-mobile&quot;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="如何使用图标"><a href="#如何使用图标" class="headerlink" title="如何使用图标"></a>如何使用图标</h2><p>Android上直接使用Ant Design Mobile的Icon组件没有效果，个人感觉Icon只支持移动Web。如果想使用图标，目前用过两种方式：</p>
<ul>
<li>将<a href="https://www.iconfinder.com/iconsets/miu" target="_blank" rel="external">Iconfinder</a>中图标的Base64编码值定义为变量，在使用地方的uri值指定为该变量。该网站上比较容易找到配套图标，就是点击和未点击配套的图标，但是不能改变图标颜色。</li>
<li>使用<a href="http://fontawesome.io/icons/" target="_blank" rel="external">FontAwesome</a>，配置方式详见<a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">react-native-vector-icons</a>。使用该图标可通过style指定图标样式，包括颜色，但要找配套的图标比较困难。<br>注意<a href="http://fontawesome.io/icons/" target="_blank" rel="external">FontAwesome</a>中描述<code>&lt;i class=&quot;fa fa-user&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code>使用图标，这应该是移动Web的使用方式，在React Native中使用如下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line">...</div><div class="line">&lt;Icon name=&quot;user&quot; size=&#123;20&#125; style=&#123;styles.icon&#125; /&gt;</div></pre></td></tr></table></figure>
<h2 id="如何设置样式"><a href="#如何设置样式" class="headerlink" title="如何设置样式"></a>如何设置样式</h2><p>StyleSheet提供了一种类似CSS样式表的抽象。const styles = StyleSheet.create()传入样式定义的对象，该对象键为样式名称，值为定义样式的对象。使用时通过styles的键名即可引用到对应的样式。也可以使用内联样式，但比较低效，内联样式对象会在每一个渲染周期都被重新创建。</p>
<p>Stylesheet.Create方法是可选的，但有一些重要的优势。它保证了值是不可变的，并且通过将它们转换成指向内部表的纯数字，保持了代码的不透明性。将它们放在文件的末尾可保证它们在应用中只会被创建一次，而不是每一次渲染周期都被重新创建。</p>
<p>我在RN工程中定义了styles目录，将每个组件引用的样式单独定义成组件同名的文件放在该目录，想要做到样式独立管理，但有些样式可能是根据组件中的一些属性定义的，还是不可避免的要放到组件定义的文件中。</p>
<p>React Native支持部分样式属性，不同的组件有些样式属性也是不能使用的，会报红屏错误。下面是在源码中添加console.log打印出的可用的样式属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">Valid style props: [</div><div class="line">  &quot;alignItems&quot;,</div><div class="line">  &quot;alignSelf&quot;,</div><div class="line">  &quot;backfaceVisibility&quot;,</div><div class="line">  &quot;backgroundColor&quot;,</div><div class="line">  &quot;borderBottomColor&quot;,</div><div class="line">  &quot;borderBottomLeftRadius&quot;,</div><div class="line">  &quot;borderBottomRightRadius&quot;,</div><div class="line">  &quot;borderBottomWidth&quot;,</div><div class="line">  &quot;borderColor&quot;,</div><div class="line">  &quot;borderLeftColor&quot;,</div><div class="line">  &quot;borderLeftWidth&quot;,</div><div class="line">  &quot;borderRadius&quot;,</div><div class="line">  &quot;borderRightColor&quot;,</div><div class="line">  &quot;borderRightWidth&quot;,</div><div class="line">  &quot;borderStyle&quot;,</div><div class="line">  &quot;borderTopColor&quot;,</div><div class="line">  &quot;borderTopLeftRadius&quot;,</div><div class="line">  &quot;borderTopRightRadius&quot;,</div><div class="line">  &quot;borderTopWidth&quot;,</div><div class="line">  &quot;borderWidth&quot;,</div><div class="line">  &quot;bottom&quot;,</div><div class="line">  &quot;color&quot;,</div><div class="line">  &quot;decomposedMatrix&quot;,</div><div class="line">  &quot;elevation&quot;,</div><div class="line">  &quot;flex&quot;,</div><div class="line">  &quot;flexBasis&quot;,</div><div class="line">  &quot;flexDirection&quot;,</div><div class="line">  &quot;flexGrow&quot;,</div><div class="line">  &quot;flexShrink&quot;,</div><div class="line">  &quot;flexWrap&quot;,</div><div class="line">  &quot;fontFamily&quot;,</div><div class="line">  &quot;fontSize&quot;,</div><div class="line">  &quot;fontStyle&quot;,</div><div class="line">  &quot;fontVariant&quot;,</div><div class="line">  &quot;fontWeight&quot;,</div><div class="line">  &quot;height&quot;,</div><div class="line">  &quot;justifyContent&quot;,</div><div class="line">  &quot;left&quot;,</div><div class="line">  &quot;letterSpacing&quot;,</div><div class="line">  &quot;lineHeight&quot;,</div><div class="line">  &quot;margin&quot;,</div><div class="line">  &quot;marginBottom&quot;,</div><div class="line">  &quot;marginHorizontal&quot;,</div><div class="line">  &quot;marginLeft&quot;,</div><div class="line">  &quot;marginRight&quot;,</div><div class="line">  &quot;marginTop&quot;,</div><div class="line">  &quot;marginVertical&quot;,</div><div class="line">  &quot;maxHeight&quot;,</div><div class="line">  &quot;maxWidth&quot;,</div><div class="line">  &quot;minHeight&quot;,</div><div class="line">  &quot;minWidth&quot;,</div><div class="line">  &quot;opacity&quot;,</div><div class="line">  &quot;overflow&quot;,</div><div class="line">  &quot;overlayColor&quot;,</div><div class="line">  &quot;padding&quot;,</div><div class="line">  &quot;paddingBottom&quot;,</div><div class="line">  &quot;paddingHorizontal&quot;,</div><div class="line">  &quot;paddingLeft&quot;,</div><div class="line">  &quot;paddingRight&quot;,</div><div class="line">  &quot;paddingTop&quot;,</div><div class="line">  &quot;paddingVertical&quot;,</div><div class="line">  &quot;position&quot;,</div><div class="line">  &quot;resizeMode&quot;,</div><div class="line">  &quot;right&quot;,</div><div class="line">  &quot;rotation&quot;,</div><div class="line">  &quot;scaleX&quot;,</div><div class="line">  &quot;scaleY&quot;,</div><div class="line">  &quot;shadowColor&quot;,</div><div class="line">  &quot;shadowOffset&quot;,</div><div class="line">  &quot;shadowOpacity&quot;,</div><div class="line">  &quot;shadowRadius&quot;,</div><div class="line">  &quot;textAlign&quot;,</div><div class="line">  &quot;textAlignVertical&quot;,</div><div class="line">  &quot;textDecorationColor&quot;,</div><div class="line">  &quot;textDecorationLine&quot;,</div><div class="line">  &quot;textDecorationStyle&quot;,</div><div class="line">  &quot;textShadowColor&quot;,</div><div class="line">  &quot;textShadowOffset&quot;,</div><div class="line">  &quot;textShadowRadius&quot;,</div><div class="line">  &quot;tintColor&quot;,</div><div class="line">  &quot;top&quot;,</div><div class="line">  &quot;transform&quot;,</div><div class="line">  &quot;transformMatrix&quot;,</div><div class="line">  &quot;translateX&quot;,</div><div class="line">  &quot;translateY&quot;,</div><div class="line">  &quot;width&quot;,</div><div class="line">  &quot;writingDirection&quot;,</div><div class="line">  &quot;zIndex&quot;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>如果当前元素的父元素没有使用弹性盒模型，也就是没有flex属性，则只给当前元素flex属性是不起作用的。</p>
<p>文字可以用’\n’换行，如<code>&lt;Text&gt;这是内容...{&#39;\n&#39;}这是内容...&lt;/Text&gt;</code>。</p>
<h2 id="样式适配问题"><a href="#样式适配问题" class="headerlink" title="样式适配问题"></a>样式适配问题</h2><p>React Native中指定大小通常只能使用数字，不能使用百分比，这样就存在在一个设备上设定好的样式，换一台设备可能就变样了。 </p>
<ul>
<li>使用flex布局能解决一部分问题  </li>
<li>使用Dimensions获取屏幕宽度、高度，通过计算指定样式</li>
<li>onLayout回调函数可得到组件被加载时的放置状态以及监听设备放置状态</li>
<li>使用measure成员函数以得到组件当前的宽、高与位置信息</li>
</ul>
<p>个人感觉关于样式适配还是存在问题，我们自己指定的样式，可以知道样式值的大小，但如果使用了Ant Design Mobile等其它组件，有些样式值是不知道，也无法通过代码动态获取到，只能查看源码找到相应值，再进行计算，这样可能不把握。</p>
<h2 id="Navigator组件的使用"><a href="#Navigator组件的使用" class="headerlink" title="Navigator组件的使用"></a>Navigator组件的使用</h2><p>Navigator是React Native提供的路由管理的组件，通常一个工程中只有一个Navigator组件，个人感觉放在index.android.js文件中比较好，还有对物理返回键BackAndroid的管理最好也放在这里，常用的就是push和pop方法，push时可传入参数。具体使用方法参见<a href="http://reactnative.cn/docs/0.39/navigator.html#content" target="_blank" rel="external">React Native中文网-Navigator</a>即可。</p>
<ul>
<li>使用时好像必须作为render的根组件返回，即使外面包层View，都不会有显示内容</li>
<li>如果在TabBar.Item中返回的Navigator组件，路由切换时页面底部的TabBar一直存在</li>
<li>navigator需要作为属性一直向下传递，否则子组件无法引用</li>
</ul>
<h2 id="ES6语法问题"><a href="#ES6语法问题" class="headerlink" title="ES6语法问题"></a>ES6语法问题</h2><p>ES6语法不需要在babelrc文件中配置东西，但有的es6语法用不了，目前发现的是startsWith和new Date()传入日期字符串的构造函数，不报任何错误信息，但是打开浏览器调试时是好使的。网上查原因是打开调试是通过浏览器处理js的，浏览器认识这些语法，但到手机上就不认识了。<br><strong>这个问题很奇怪，一开始感觉是babel配置不对，但是大多数ES6甚至ES7的语法是没问题的。在网上没有查到react-native具体怎么配置babel，查看过react-native源码babel的配置，改成一样的配置也没解决这个问题。</strong></p>
<h2 id="TextInput触发两次onSubmitEditing问题"><a href="#TextInput触发两次onSubmitEditing问题" class="headerlink" title="TextInput触发两次onSubmitEditing问题"></a>TextInput触发两次onSubmitEditing问题</h2><p>在Android手机上，当软键盘的确定/提交按钮被按下的时候调用onSubmitEditing函数。但在做demo时发现该函数会被调用两次，stackoverflow给出一个解决方案如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;TextInput</div><div class="line">  ref=&#123;component =&gt; this._textInput = component&#125;</div><div class="line">  onSubmitEditing=&#123;this._onSubmitEditing.bind(this)&#125;</div><div class="line">  onEndEditing=&#123;this._onPressSearch.bind(this)&#125;</div><div class="line">  returnKeyType=&apos;search&apos;</div><div class="line">  style=&#123;styles.inputText&#125;</div><div class="line">/&gt;</div><div class="line">  _onSubmitEditing()&#123;</div><div class="line">    this._textInput.blur();</div><div class="line">  &#125;</div><div class="line">  _onPressSearch(event)&#123;</div><div class="line">    console.log(event.nativeEvent.text);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>该解决方案以点击软键盘确认执行搜索为例，意思是点击确认时触发失去焦点，当文本输入结束后调用搜索方法（或其它方法），但会存在输入时，如果不点击确认，直接点击页面其它区域，会直接触发搜索方法。</p>
<h2 id="ListView组件的使用"><a href="#ListView组件的使用" class="headerlink" title="ListView组件的使用"></a>ListView组件的使用</h2><p>ListView是React Native核心组件，使用时注意以下几点。</p>
<ul>
<li>ListView最好添加enableEmptySections属性，处理ListView没有显示数据时报的黄色警告。</li>
<li>如果发现列表没滑倒底部就调用onEndReached回调方法了，可以试试设置onEndReachedThreshold值。</li>
<li>如果在onEndReached回调方法中进行的是获取更多数据的操作，注意判断条件是否正确，如当前页数已为最大页数或数据已达到总条数，如果还继续执行获取数据操作，有可能导致一直执行获取数据的操作，就像死循环一样。</li>
</ul>
<h2 id="TouchableHighlight的使用"><a href="#TouchableHighlight的使用" class="headerlink" title="TouchableHighlight的使用"></a>TouchableHighlight的使用</h2><p>使用时建议里面包裹React Native提供的组件，而不要使用自定义的组件，否则会报<br><code>Touchable child must either be native or forward setNativeProps to a native component.</code>的错误信息。如果非要使用自定义组件，需要给自定义组件添加setNativeProps方法，参见<a href="http://reactnative.cn/docs/0.20/direct-manipulation.html" target="_blank" rel="external">React Native中文网-直接操作</a>。</p>
<h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>可直接使用React Native已经封装好的fetch。查看了react-native的package.json文件，在依赖中与fetch相关的只有node-fetch和whatwg-fetch，在node-fetch和whatwg-fetch中都添加了打印语句，发现打印的都是来自whatwg-fetch的。但在《React Native跨平台移动应用开发》书中第12章提到，“React Native框架在初始化项目时，安装了node-fetch包，开发者可以使用node-fetch包通过HTTP协议来获取网络册的数据”。</p>
<h2 id="消息提醒"><a href="#消息提醒" class="headerlink" title="消息提醒"></a>消息提醒</h2><p>可使用<a href="https://www.npmjs.com/package/react-native-push-notification" target="_blank" rel="external">react-native-push-notification</a>组件进行消息提醒。</p>
<h2 id="组件间交互"><a href="#组件间交互" class="headerlink" title="组件间交互"></a>组件间交互</h2><p>React Native用起来感觉跟React差不多，目前发现复杂的地方还是组件间的交互问题。如对于如下结构的组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">        A</div><div class="line">        |</div><div class="line">--------+---------</div><div class="line">|                |</div><div class="line">|                |</div><div class="line">B-------+--------C</div><div class="line">        |</div><div class="line">        D</div></pre></td></tr></table></figure></p>
<p>场景描述：A拥有B、C组件，B、C组件都会进入D组件，在D组件中需要调用B、C中的方法。<br>解决方案：我使用的方法是给A的state添加两个属性methodB、methodC，初始可为null，添加一个可以更新state的方法update，将methodB、methodC、update一起传入B、C中，在B、C组件调用update方法将methodB和methodC赋值给A的同名state属性，这样在D中就可调用到B和C的方法了。</p>
<h2 id="同步异步问题"><a href="#同步异步问题" class="headerlink" title="同步异步问题"></a>同步异步问题</h2><p>React Native在使用fetch进行网络请求是异步的，有时我们想要的是同步的效果，或是执行状态的更新setState后的操作，这时可以使用<a href="http://es6.ruanyifeng.com/#docs/async#async函数" target="_blank" rel="external">async函数</a>。</p>
<p><strong>场景一</strong><br>如下代码执行后，输出的state并不是methodA方法中更新后的state。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function methodA() &#123;</div><div class="line">    ...</div><div class="line">    this.setState(&#123;&#125;);</div><div class="line">    ...</div><div class="line">    this.methodB();</div><div class="line">&#125;</div><div class="line">function methodB() &#123;</div><div class="line">    consolt.log(&quot;更新后的state:&quot;, this.state);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用async await后即可输入更新后的state。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">async function methodA() &#123;</div><div class="line">    ...</div><div class="line">    await this.setState(&#123;&#125;);</div><div class="line">    ...</div><div class="line">    this.methodB();</div><div class="line">&#125;</div><div class="line">function methodB() &#123;</div><div class="line">    consolt.log(&quot;更新后的state:&quot;, this.state);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>场景二</strong><br>AsyncStorage的get操作是一个异步操作，如果将所有AsyncStorage操作放在一个文件中管理，在组件中要获取缓存中的信息以决定下一步操作时，可以使用如下方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">// storageUtils.js中</div><div class="line">export let storage = &#123;</div><div class="line">    save(name,value)&#123;</div><div class="line">    ...</div><div class="line">    &#125;,</div><div class="line">    remove(name)&#123;</div><div class="line">    ...</div><div class="line">    &#125;,</div><div class="line">    async get(name)&#123;</div><div class="line">        let result = null;</div><div class="line">        await AsyncStorage.getItem(name)</div><div class="line">            .then((value) =&gt; &#123;</div><div class="line">                if (value) &#123;</div><div class="line">                    result =  JSON.parse(value);</div><div class="line">                &#125;</div><div class="line">            &#125;).catch((error) =&gt; &#123;</div><div class="line">                console.log(&apos;获取失败：&apos;, error);</div><div class="line">            &#125;);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// MobileUi组件中</div><div class="line">class MobileUi extends Component &#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            token: null,</div><div class="line">        &#125;;</div><div class="line">        this.getUserInfo = this.getUserInfo.bind(this);</div><div class="line">    &#125;</div><div class="line">    async getUserInfo() &#123;</div><div class="line">        let token = await storage.get(&apos;token&apos;);</div><div class="line">        this.setState(&#123;</div><div class="line">            token,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        let initialRoute = &#123;name: &apos;主页&apos;, component: App&#125;;</div><div class="line">        if (this.state.token === null) &#123;</div><div class="line">            initialRoute = &#123;name: &apos;登录&apos;, component: Login&#125;;</div><div class="line">        &#125;</div><div class="line">        return (</div><div class="line">            &lt;Navigator</div><div class="line">                ref=&quot;navigator&quot;</div><div class="line">                initialRoute=&#123;initialRoute&#125;</div><div class="line">                shadowHidden=&#123;true&#125;</div><div class="line">                translucent=&#123;true&#125;</div><div class="line">                configureScene=&#123;this.configureScene&#125;</div><div class="line">                renderScene=&#123;this.renderScene&#125;</div><div class="line">            /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>场景三</strong><br>根据fetch请求的返回结果决定下一步的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">async ifRunning() &#123;</div><div class="line">    let result = &apos;&apos;;</div><div class="line">    await fetch(`$&#123;config.applicationIpAndPort&#125;$&#123;config.applicationContext&#125;/OA_UTILS_FLOW_VERIFY.ifRunning.do`, &#123;</div><div class="line">        method: &apos;POST&apos;,</div><div class="line">        headers: commonHeaders,</div><div class="line">        body: JSON.stringify(&#123;</div><div class="line">            PI_ID: this.state.cardData.nodeInstBean.PI_ID,</div><div class="line">            NI_ID: this.state.cardData.nodeInstBean.NI_ID,</div><div class="line">        &#125;)</div><div class="line">    &#125;).then(responseData =&gt; &#123;</div><div class="line">        result = responseData.IF_RUNNING;</div><div class="line">    &#125;).catch((errors) =&gt; &#123;</div><div class="line">        showError(errors, this.props.navigator, this.ifRunning, &apos;ifRunning请求失败&apos;)</div><div class="line">    &#125;);</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">async agreeHandler(data) &#123;</div><div class="line">    const ifRunningResult = await this.ifRunning();</div><div class="line">    if (ifRunningResult === &apos;1&apos;) &#123;</div><div class="line">        console.log(&quot;进行审批操作&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&quot;单据已过期&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="调试问题"><a href="#调试问题" class="headerlink" title="调试问题"></a>调试问题</h2><p>在Android上连续两个R键可进行刷新，ctrl+M可打开调试菜单，可以选择Debug JS Remotely启动浏览器的调试工具进行调试，主要是使用console.log打印日志或是debugger进行断点查看。</p>
<p>当你加载了开启Chrome调试工具的React Native应用之后，Google的Chrome浏览器便会通过React Native包管理器使用一个标准的<code>&lt;script&gt;</code>标签来执行相同的JavaScript代码，因此你可以拥有一个基于浏览器的调试器。随后，包管理器使用WebSocket进行设备与浏览器之间的通信。</p>
<p>如果Packager的控制台编译未完成或模拟器报Unexpected token，很有可能是存在语法错误。</p>
<img src="/2016/11/30/react-native-base/UnexpectedToken.png" width="300" title="模拟器中错误">
<p>如果模拟器报如下错误，不容易定位到哪里发生了错误，打开浏览器调试工具-&gt;Network，点击显示红色的请求，Preview里面错误信息。</p>
<img src="/2016/11/30/react-native-base/debugger1.png" width="300" title="模拟器中错误">
<img src="/2016/11/30/react-native-base/debugger2.png" width="300" title="浏览器中错误">
<p>如果模拟器报如下错误，哪里都不要改，重新执行<code>react-native run-android</code>重新启动，直到启起来。</p>
<img src="/2016/11/30/react-native-base/rn_start_err.png" title="见到这个错误需重新启动">
<p>如果用 ios 模拟器调试时所有操作都变得很慢，检查模拟器 → Debug → Slow Animations 是否为选中了，取消选中即可。</p>
<h2 id="React-调试"><a href="#React-调试" class="headerlink" title="React 调试"></a>React 调试</h2><p>直接使用Debug JS Remotely启动浏览器的调试工具是没有React组件调试的。按如下方式可以进行React组件 调试，但React调试和浏览器的调试 <a href="http://localhost:8081/debugger-ui" target="_blank" rel="external">http://localhost:8081/debugger-ui</a> 不能同时使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 安装依赖</div><div class="line">npm install --save-dev react-devtools</div><div class="line">// 修改package.json中</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;devtools&quot;: &quot;react-devtools&quot;,</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">// 启动调试</div><div class="line">npm run devtools</div><div class="line">// 启动项目</div><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<h2 id="Redux支持"><a href="#Redux支持" class="headerlink" title="Redux支持"></a>Redux支持</h2><p>跟React使用redux是一样的，在用浏览器的调试工具进行redux调试时，需要特殊处理。目前Windows上是安装remote-redux-devtools的0.5.0版本，在react-native为0.34.0时是好使的，但是react-native为0.42.0时就不好使了，感觉应该是目前还不支持0.42.0。</p>
<p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev remote-redux-devtools@0.5.0</div><div class="line">npm install --save-dev remote-redux-devtools-on-debugger</div></pre></td></tr></table></figure></p>
<p>package.json里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;postinstall&quot;: &quot;remotedev-debugger --hostname localhost --port 5678 --injectserver&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>configureStore.js修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import &#123; Platform &#125; from &apos;react-native&apos;;</div><div class="line">import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line">import devTools from &apos;remote-redux-devtools&apos;;</div><div class="line">import reducer from &apos;../reducers&apos;;</div><div class="line"></div><div class="line">export default function configureStore(initialState) &#123;</div><div class="line">  const enhancer = compose(</div><div class="line">    applyMiddleware(thunk),</div><div class="line">    devTools(&#123;</div><div class="line">      name: Platform.OS,</div><div class="line">      hostname: &apos;localhost&apos;,</div><div class="line">      port: 5678</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line">  return createStore(reducer, initialState, enhancer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run postinstall</div><div class="line">react-native run-android</div></pre></td></tr></table></figure></p>
<h2 id="Webpack支持"><a href="#Webpack支持" class="headerlink" title="Webpack支持"></a>Webpack支持</h2><p>Webpack有一段介绍如下：<br><img src="/2016/11/30/react-native-base/webpack.png" title="什么是Webpack"></p>
<p>Webpack是Web前端打包的工具，不是用在移动端的。如果要在浏览器上运行React Native项目，就需要Webpack了。</p>
<h2 id="运行在Web浏览器上面"><a href="#运行在Web浏览器上面" class="headerlink" title="运行在Web浏览器上面"></a>运行在Web浏览器上面</h2><p>参考<a href="https://yq.aliyun.com/articles/8184" target="_blank" rel="external">三步将 React Native 项目运行在 Web 浏览器上面</a>或者Ant Design Mobile的<a href="https://github.com/ant-design/antd-init/tree/master/boilerplates/MobileDemo" target="_blank" rel="external">MobileDemo</a>怎么在Web端运行的。</p>
<p>注意：  </p>
<ul>
<li>react、react-dom 版本为15.3.x，否则可能会报错</li>
<li>webpack.config.js中要有publicPath，如下说是，否则可能会报错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output:&#123;</div><div class="line">  publicPath:&apos;&apos;,</div><div class="line">  path: path.join(__dirname, &apos;output&apos;),</div><div class="line">  filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<img src="/2016/11/30/react-native-base/react-web-start.png" title="没有publicPath的报错">
<p>已经按照教程测试过，简单的组件可以跑在浏览器上，可以使用浏览器的React调试工具看组件的结构。使用React Native的StyleSheet定义的样式在Web端也生效，可以使用div等html的标签。</p>
<p>但是我现在还不明白React Native 项目运行在Web浏览器上面是为了方便测试，还是为了一套代码可以运行在三端。像我测试中用的React Native的Button组件在浏览器上显示是占满屏幕整个宽度的，还有进行网络请求用的fetch报错了。不是简单的一套代码就能运行在三端，但是个人感觉样式和redux的部分是可以公用的，可能显示组件需要调整。</p>
<h2 id="组件不显示"><a href="#组件不显示" class="headerlink" title="组件不显示"></a>组件不显示</h2><p>如果组件没显示出来，还没有报错，可鞥是组件外层没有高度，换成ScrollView或者显示指定height试试。</p>
<h2 id="初始化的项目启动报错"><a href="#初始化的项目启动报错" class="headerlink" title="初始化的项目启动报错"></a>初始化的项目启动报错</h2><p>在一个目录下执行react-native init project_name 初始化了一个项目，能跑起来。但换个目录再执行 react-native init project_name 初始化同名项目，即使什么都没修改，也可能跑不起来，会报如下错误。但换个目录可能就能跑起来了，很奇怪。</p>
<img src="/2016/11/30/react-native-base/start.png" width="300" title="启动报错">
<p>在网上查了很多都没有找到原因，github上也有人发现类似问题。</p>
<img src="/2016/11/30/react-native-base/init.png" title="类似错误">
<p>这时请确认是否使用了<strong>babel-plugin-transform-runtime</strong>依赖及使用是否正确，很有可能是这个依赖导致的，如果没用可以去掉。我在去掉之后再没有发现这个问题。</p>
<h2 id="项目启动报错"><a href="#项目启动报错" class="headerlink" title="项目启动报错"></a>项目启动报错</h2><p>如果项目启动时报<code>Could not find com.atlassian.mobile.video:okhttp-ws-compat:3.7.0-atlassian1.</code>错误，在android/build.gradle文件中，allprojects中添加如下代码即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">allprojects &#123;</div><div class="line">  repositories &#123;...&#125;</div><div class="line">  configurations.all &#123;</div><div class="line">    resolutionStrategy &#123;</div><div class="line">        eachDependency &#123; DependencyResolveDetails details -&gt;</div><div class="line">            if (details.requested.group == &apos;com.facebook.react&apos; &amp;&amp; details.requested.name == &apos;react-native&apos;) &#123;</div><div class="line">                details.useVersion &quot;0.42.0&quot; // Your real React Native version here</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="平台扩展名及平台检测"><a href="#平台扩展名及平台检测" class="headerlink" title="平台扩展名及平台检测"></a>平台扩展名及平台检测</h2><p><a href="http://www.jianshu.com/p/64ea85cccf74" target="_blank" rel="external">React- Native 特定平台扩展名, 及平台检测</a></p>
<p><a href="http://www.jianshu.com/p/4c1d96132756" target="_blank" rel="external">React - Native InteractionManager 动画交互管理器</a></p>
<h2 id="链接原生"><a href="#链接原生" class="headerlink" title="链接原生"></a>链接原生</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">react-native link -- 链接所有原生依赖</div><div class="line">react-native link xxx -- 链接某个原生依赖</div><div class="line">react-native unlink xxx -- 取消对某个原生依赖的链接</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redux-学习经验]]></title>
      <url>https://zhulichao.github.io/2016/11/25/redux-experience1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="进行网络请求"><a href="#进行网络请求" class="headerlink" title="进行网络请求"></a>进行网络请求</h2><p>发起网络请求的操作通常放在组件的componentDidMount方法中，使用redux进行网络请求就是发起一个action，但这个action比较特殊，它的内部还会发起其它action，形式如下：</p>
<ul>
<li><p>需要使用redux需要使用<a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk</a>中间件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line">const store = createStore(reducer, initialState, compose(</div><div class="line">    applyMiddleware(..., thunk),</div><div class="line">    window.devToolsExtension ? window.devToolsExtension() : f =&gt; f // 可使用浏览器的Redux DevTools插件进行redux调试</div><div class="line">));</div></pre></td></tr></table></figure>
</li>
<li><p>action文件主要内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function xxxRequest() &#123;</div><div class="line">  return &#123;</div><div class="line">    type: REQUEST,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">function xxxSuccess(data) &#123;</div><div class="line">  return &#123;</div><div class="line">    type: SUCCESS,</div><div class="line">    data: data,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">function xxxFailure(error) &#123;</div><div class="line">  return &#123;</div><div class="line">    type: FAILURE,</div><div class="line">    error: error,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export function xxx(url, objParam) &#123;</div><div class="line">  return (dispatch, getState) =&gt; &#123;</div><div class="line">    dispatch(xxxRequest());</div><div class="line">    return fetch(url, &#123;</div><div class="line">        method: &apos;post&apos;,</div><div class="line">        headers: &#123;</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        body: JSON.stringify(objParam)</div><div class="line">    &#125;).then(data =&gt; dispatch(xxxSuccess(data)))</div><div class="line">      .catch(errors =&gt; dispatch(xxxFailure(error)));</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="保证请求按序进行"><a href="#保证请求按序进行" class="headerlink" title="保证请求按序进行"></a>保证请求按序进行</h2><p>使用<a href="https://github.com/jasonslyvia/redux-sequence-action" target="_blank" rel="external">redux-sequence-action</a>中间件</p>
<p>这里说的按序请求，不是指上面的发起一个网络请求时发起的多个action的情况，而是指按序发起多个网络请求、每个网络请求是在上个网络请求完成再执行的情况，比如点击保存先调用save网络请求，再调用refresh网络请求。至于为什么不能直接用dispatch(save)，再dispatch(refresh)，是因为进行网络请求是异步的，可能在save请求还没完成，就进行了refresh请求并返回了结果，这时的结果是未更新的结果。</p>
<ul>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save redux-sequence-action</div></pre></td></tr></table></figure>
</li>
<li><p>createStore.js中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import sequenceAction from &apos;redux-sequence-action&apos;;</div><div class="line">...</div><div class="line">const store = createStore(reducer, initialState, compose(</div><div class="line">    applyMiddleware(invariant(), thunk, sequenceAction),</div><div class="line">    window.devToolsExtension ? window.devToolsExtension() : f =&gt; f</div><div class="line">));</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>containers/下引用的组件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line">class MyComponent extends Component &#123;</div><div class="line">    ...</div><div class="line">    componentDidMount() &#123;</div><div class="line">        // 发起actionA</div><div class="line">        this.props.allActions.actionA(&apos;a&apos;,&apos;b&apos;);</div><div class="line">        // 发起actionC</div><div class="line">        this.props.allActions.actionC(&apos;c&apos;);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">function mapStateToProps(state) &#123;</div><div class="line">  return state;</div><div class="line">&#125;</div><div class="line">function mapDispatchToProps(dispatch) &#123;</div><div class="line">  return &#123;</div><div class="line">    allActions: &#123;</div><div class="line">        ...bindActionCreators(&#123;</div><div class="line">            actionA,</div><div class="line">            actionB,</div><div class="line">        &#125;, dispatch),</div><div class="line">        // actionC中先发起actionB，actionB结束后再发起actionC</div><div class="line">        actionC: (arg1, arg2, arg3) =&gt; dispatch([actionA(arg1, arg2), actionB(arg3)]),</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(MyComponent);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redux-基础]]></title>
      <url>https://zhulichao.github.io/2016/11/19/redux-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考<br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一）：基本用法</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux 入门教程（二）：中间件与异步操作</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">Redux 入门教程（三）：React-Redux 的用法</a>  </p>
<p><a href="http://redux.js.org/" target="_blank" rel="external">Redux官方文档</a><br><a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">前30集</a><br><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux" target="_blank" rel="external">后30集</a><br><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">action的规范</a>  </p>
<h2 id="Redux简介"><a href="#Redux简介" class="headerlink" title="Redux简介"></a>Redux简介</h2><p>先简单说一下Flux。Flux是一种架构思想，专门解决软件的结构问题，它最大特点是数据的”单向流动”。React本身只涉及UI层，如果搭建大型应用，必须搭配一个前端框架，Facebook官方使用的是 Flux框架。<a href="https://github.com/reactjs/redux" target="_blank" rel="external">Redux</a>将Flux与函数式编程结合一起，很短时间内就成为了最热门的前端架构。</p>
<p>“如果你不知道是否需要 Redux，那就是不需要它。”<br>“只有遇到 React 实在解决不了的问题，你才需要 Redux 。”  </p>
<p>适用场景  </p>
<ul>
<li>用户的使用方式复杂  </li>
<li>不同身份的用户有不同的使用方式（比如普通用户和管理员）  </li>
<li>多个用户之间可以协作  </li>
<li>与服务器大量交互，或者使用了WebSocket  </li>
<li>View要从多个来源获取数据  </li>
</ul>
<p>从组件角度看，如果有以下场景，可以考虑使用 Redux</p>
<ul>
<li>某个组件的状态，需要共享  </li>
<li>某个状态需要在任何地方都可以拿到  </li>
<li>一个组件需要改变全局状态  </li>
<li>一个组件需要改变另一个组件的状态  </li>
</ul>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>（1）Web 应用是一个状态机，视图与状态是一一对应的。<br>（2）所有的状态，保存在一个对象里面。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><img src="/2016/11/19/redux-base/ReduxFlow.png" title="Redux的工作流程">
<ul>
<li>用户发出 Action，<code>store.dispatch(action);</code></li>
<li>Store 自动调用 Reducer，<code>let nextState = todoApp(previousState, action);</code></li>
<li>State 一旦有变化，Store 就会调用监听函数，监听函数可以通过store.getState()得到当前状态，可以触发重新渲染View</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 设置监听函数  </div><div class="line">store.subscribe(listener);  </div><div class="line">...  </div><div class="line">function listerner() &#123;  </div><div class="line">  let newState = store.getState();  </div><div class="line">  component.setState(newState);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>Store</strong></p>
<p>Store 就是保存数据的地方，可以把它看成一个容器，整个应用只能有一个Store，Redux提供createStore函数用来生成Store。</p>
<p><strong>State</strong></p>
<p>Store对象包含所有数据。如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合，就叫做State。当前时刻的State，可以通过store.getState()拿到。Redux 规定， 一个 State 对应一个 View，只要 State 相同，View 就相同，反之亦然。</p>
<p><strong>Action</strong></p>
<p>State的变化必须是View导致的，Action就是View发出的通知，描述当前发生的事情，表示State应该要发生变化了。Action是一个对象，其中的type属性是必须的，表示Action的名称，其他属性可以自由设置。</p>
<p><strong>Action Creator</strong></p>
<p> 每个Action都手写会很麻烦，用来生成Action的函数就叫Action Creator。</p>
<p><strong>store.dispatch()</strong></p>
<p>store.dispatch()是View发出Action的唯一方法，通常会结合Action Creator使用。</p>
<p><strong>Reducer</strong></p>
<p>Store收到Action以后，必须给出一个新的State，这样View才会发生变化。这种State的计算过程就叫做Reducer，Reducer是一个函数，它接受Action和当前State作为参数，返回一个新的State。Reducer函数最重要的特征是，它是一个纯函数，只要是同样的输入，必定得到同样的输出。因此，Reducer 函数里面不能改变State，必须返回一个全新的对象。 </p>
<p>实际应用中，Reducer函数不用像上面这样手动调用，store.dispatch方法会触发Reducer 的自动执行。为此，Store需要知道Reducer函数，做法就是在生成Store的时候，将Reducer传入createStore方法，以后每当store.dispatch发送过来一个新的Action，就会自动调用Reducer，得到新的State。createStore方法还可以接受第二个参数，表示State的最初状态，这通常是服务器给出的，如果提供了这个参数，它会覆盖Reducer函数的默认初始值。    </p>
<p>为什么这个函数叫做Reducer呢？因为它可以作为数组的reduce方法的参数，Array.prototype.reduce(reducer, ?initialValue)，一系列Action对象按照顺序作为一个数组，对每个Action调用reducer。请看下面的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const actions = [</div><div class="line">  &#123; type: &apos;ADD&apos;, payload: 0 &#125;,</div><div class="line">  &#123; type: &apos;ADD&apos;, payload: 1 &#125;,</div><div class="line">  &#123; type: &apos;ADD&apos;, payload: 2 &#125;</div><div class="line">];</div><div class="line">const total = actions.reduce(reducer, 0); // 3</div></pre></td></tr></table></figure></p>
<p><strong>Reducer拆分</strong></p>
<p>Redux提供了一个combineReducers方法，用于Reducer的拆分，只要定义各个子Reducer函数，然后将它们合成一个大的Reducer。这种拆分与React应用的结构相吻合：一个React根组件由很多子组件构成，子组件与子Reducer完全可以对应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// State的属性名必须与子Reducer同名</div><div class="line">const chatReducer = combineReducers(&#123;</div><div class="line">  chatLog,</div><div class="line">  statusMessage,</div><div class="line">  userName</div><div class="line">&#125;);</div><div class="line">// 如果不同名，就要采用下面的写法</div><div class="line">const reducer = combineReducers(&#123;</div><div class="line">  a: doSomethingWithA,</div><div class="line">  b: processB,</div><div class="line">  c: c</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>store.subscribe()</strong></p>
<p>Store 允许使用store.subscribe方法设置监听函数，一旦State发生变化，就自动执行这个函数。因此，只要把View的更新函数（对于React项目，就是组件的render方法或setState方法）放入listen，就会实现View的自动渲染。store.subscribe方法返回一个函数，调用这个函数就可以解除监听。</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><img src="/2016/11/19/redux-base/MiddleWares.png" title="中间件（middleware）">
<p>中间件就是一个函数，对store.dispatch方法进行了改造，在发出Action和执行Reducer这两步之间，添加了其他功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let next = store.dispatch;</div><div class="line">store.dispatch = function dispatchAndLog(action) &#123;</div><div class="line">  console.log(&apos;dispatching&apos;, action);</div><div class="line">  next(action);</div><div class="line">  console.log(&apos;next state&apos;, store.getState());</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>使用中间件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;;</div><div class="line">import createLogger from &apos;redux-logger&apos;;</div><div class="line">const logger = createLogger();</div><div class="line"></div><div class="line">const store = createStore(</div><div class="line">  reducer,</div><div class="line">  initial_state, // 整个应用的初始状态，没有可省略该参数</div><div class="line">  applyMiddleware(logger) // 中间件的次序有讲究，logger一定要放在最后</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><strong>异步操作的思路</strong></p>
<ul>
<li>操作开始时，送出一个Action，触发State更新为”正在操作”状态，View重新渲染</li>
<li>操作结束后，再送出一个Action，触发State更新为”操作结束”状态，View 再一次重新渲染</li>
</ul>
<p>方式一：redux-thunk </p>
<p>异步操作至少要送出两个Action，如何才能在操作结束时，系统自动送出第二个 Action 呢？奥妙就在 Action Creator 之中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 处理异步的 Action Creator</div><div class="line">const fetchPosts = postTitle =&gt; (dispatch, getState) =&gt; &#123;</div><div class="line">  // 先发出一个Action表示操作开始</div><div class="line">  dispatch(requestPosts(postTitle));</div><div class="line">  // 返回了一个函数</div><div class="line">  return fetch(`/some/API/$&#123;postTitle&#125;.json`)</div><div class="line">    .then(response =&gt; response.json())</div><div class="line">    // 再发出一个 Action表示操作结束</div><div class="line">    .then(json =&gt; dispatch(receivePosts(postTitle, json)));</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 使用方法一</div><div class="line">store.dispatch(fetchPosts(&apos;reactjs&apos;));</div><div class="line">// 使用方法二</div><div class="line">store.dispatch(fetchPosts(&apos;reactjs&apos;)).then(() =&gt;</div><div class="line">  console.log(store.getState())</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>这样的处理，就解决了自动发送第二个Action的问题。但是，又带来了一个新的问题，Action是由store.dispatch方法发送的，而store.dispatch方法正常情况下，参数只能是对象，不能是函数。这时，就要使用中间件redux-thunk，改造store.dispatch，使得后者可以接受函数作为参数。</p>
<p>redux-thunk 的实现非常简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function createThunkMiddleware(extraArgument) &#123;</div><div class="line">  return (&#123; dispatch, getState &#125;) =&gt; next =&gt; action =&gt; &#123;</div><div class="line">    if (typeof action === &apos;function&apos;) &#123;</div><div class="line">      return action(dispatch, getState, extraArgument);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const thunk = createThunkMiddleware();</div><div class="line">thunk.withExtraArgument = createThunkMiddleware;</div><div class="line"></div><div class="line">export default thunk;</div></pre></td></tr></table></figure></p>
<p>方式二：redux-promise</p>
<p>另一种异步操作的解决方案，就是让Action Creator返回一个Promise对象。这就需要使用redux-promise中间件，这个中间件使得store.dispatch方法可以接受Promise对象作为参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 写法一，返回值是一个 Promise 对象</div><div class="line">const fetchPosts = </div><div class="line">  (dispatch, postTitle) =&gt; new Promise(function (resolve, reject) &#123;</div><div class="line">     dispatch(requestPosts(postTitle));</div><div class="line">     return fetch(`/some/API/$&#123;postTitle&#125;.json`)</div><div class="line">       .then(response =&gt; &#123;</div><div class="line">         type: &apos;FETCH_POSTS&apos;,</div><div class="line">         payload: response.json()</div><div class="line">       &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 写法二，Action 对象的payload属性是一个 Promise 对象</div><div class="line">import &#123; createAction &#125; from &apos;redux-actions&apos;;</div><div class="line"></div><div class="line">class AsyncApp extends Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    const &#123; dispatch, selectedPost &#125; = this.props</div><div class="line">    // 发出同步 Action</div><div class="line">    dispatch(requestPosts(selectedPost));</div><div class="line">    // 发出异步 Action</div><div class="line">    dispatch(createAction(</div><div class="line">      &apos;FETCH_POSTS&apos;, </div><div class="line">      fetch(`/some/API/$&#123;postTitle&#125;.json`)</div><div class="line">        .then(response =&gt; response.json())</div><div class="line">    ));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="React-Redux的用法"><a href="#React-Redux的用法" class="headerlink" title="React-Redux的用法"></a>React-Redux的用法</h2><p>React-Redux将所有组件分成两大类：UI组件(presentational component)和容器组件(container component)。</p>
<p>UI 组件有以下几个特征：</p>
<blockquote>
<p>只负责 UI 的呈现，不带有任何业务逻辑<br>没有状态（即不使用this.state这个变量）<br>所有数据都由参数（this.props）提供<br>不使用任何 Redux 的 API  </p>
</blockquote>
<p>容器组件有以下几个特征：</p>
<blockquote>
<p>负责管理数据和业务逻辑，不负责 UI 的呈现<br>带有内部状态<br>使用 Redux 的 API</p>
</blockquote>
<p>UI组件负责UI的呈现，容器组件负责管理数据和逻辑。如果一个组件既有UI又有业务逻辑，将它拆分成外面是一个容器组件，里面包了一个UI组件，前者负责与外部的通信，将数据传给后者，由后者渲染出视图。React-Redux规定，所有的UI组件都由用户提供，容器组件则是由 React-Redux 自动生成。  </p>
<p><strong>connect</strong></p>
<p>connect方法，用于从UI组件生成容器组件，connect的意思，就是将这两种组件连起来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;</div><div class="line">const VisibleTodoList = connect()(TodoList);</div></pre></td></tr></table></figure></p>
<p>TodoList是UI组件，VisibleTodoList就是由React-Redux通过connect方法自动生成的容器组件。但是，因为没有定义业务逻辑，上面这个容器组件毫无意义，只是UI组件的一个单纯的包装层。为了定义业务逻辑，需要给出下面两方面的信息：  </p>
<p>（1）输入逻辑：外部的数据（即state对象）如何转换为 UI 组件的参数。<br>（2）输出逻辑：用户发出的动作如何变为 Action 对象，从 UI 组件传出去。  </p>
<p><strong>mapStateToProps</strong></p>
<p>mapStateToProps是一个函数，它建立一个从外部的state对象到UI组件的props对象的映射关系。mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。  </p>
<p>mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。使用ownProps作为参数后，如果容器组件的参数发生变化，也会引发UI组件重新渲染。</p>
<p><strong>mapDispatchToProps</strong></p>
<p>mapDispatchToProps用来建立UI组件的参数到store.dispatch方法的映射，它定义了哪些用户的操作应该当作Action传给Store。它可以是一个函数，也可以是一个对象。</p>
<p>如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// mapDispatchToProps是函数，返回一个对象，该对象的每个键值对都是一个映射，定义了UI组件的参数怎样发出Action，如果有多个Action，可以使用Redux的bindActionCreators</div><div class="line">const mapDispatchToProps = ( dispatch, ownProps ) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    onClick: () =&gt; dispatch(&#123;</div><div class="line">      type: &apos;SET_VISIBILITY_FILTER&apos;,</div><div class="line">      filter: ownProps.filter</div><div class="line">    &#125;),</div><div class="line">    onChange: bindActionCreators(&#123;// 里面是Action creator</div><div class="line">      addTodos,</div><div class="line">      deleteTodos</div><div class="line">    &#125;, dispatch)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mapDispatchToProps是对象，它的每个键名也是对应UI组件的同名参数，键值应该是一个函数，会被当作Action creator，返回的Action会由Redux自动发出</div><div class="line">const mapDispatchToProps = &#123;</div><div class="line">  onClick: (filter) =&gt; &#123;</div><div class="line">    type: &apos;SET_VISIBILITY_FILTER&apos;,</div><div class="line">    filter: filter</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Provider</strong></p>
<p>Provider组件，可以让容器组件拿到state。Provider在根组件App外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。它的原理是React组件的context属性，store放在了上下文对象context上面，子组件就可以从context拿到store了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class VisibleTodoList extends Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    const &#123; store &#125; = this.context;</div><div class="line">    this.unsubscribe = store.subscribe(() =&gt;</div><div class="line">      this.forceUpdate()</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const props = this.props;</div><div class="line">    const &#123; store &#125; = this.context;</div><div class="line">    const state = store.getState();</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">VisibleTodoList.contextTypes = &#123;</div><div class="line">  store: React.PropTypes.object</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="API的简单实现"><a href="#API的简单实现" class="headerlink" title="API的简单实现"></a>API的简单实现</h2><p><strong>createStore的简单实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const createStore = (reducer) =&gt; &#123;</div><div class="line">  let state;</div><div class="line">  let listeners = [];</div><div class="line"></div><div class="line">  const getState = () =&gt; state;</div><div class="line"></div><div class="line">  const dispatch = (action) =&gt; &#123;</div><div class="line">    state = reducer(state, action);</div><div class="line">    listeners.forEach(listener =&gt; listener());</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  const subscribe = (listener) =&gt; &#123;</div><div class="line">    listeners.push(listener);</div><div class="line">    return () =&gt; &#123;</div><div class="line">      listeners = listeners.filter(l =&gt; l !== listener);// 什么意思</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  dispatch(&#123;&#125;); // 干嘛呢</div><div class="line"></div><div class="line">  return &#123; getState, dispatch, subscribe &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>combineReducer的简单实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const combineReducers = reducers =&gt; &#123;</div><div class="line">  return (state = &#123;&#125;, action) =&gt; &#123;</div><div class="line">    return Object.keys(reducers).reduce(</div><div class="line">      (nextState, key) =&gt; &#123;</div><div class="line">        nextState[key] = reducers[key](state[key], action);</div><div class="line">        return nextState;</div><div class="line">      &#125;,</div><div class="line">      &#123;&#125; </div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>applyMiddleware的简单实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import compose from &apos;./compose&apos;;</div><div class="line"></div><div class="line">export default function applyMiddleware(...middlewares) &#123;</div><div class="line">  return (createStore) =&gt; (reducer, preloadedState, enhancer) =&gt; &#123;</div><div class="line">    var store = createStore(reducer, preloadedState, enhancer);</div><div class="line">    var dispatch = store.dispatch;</div><div class="line">    var chain = [];</div><div class="line"></div><div class="line">    var middlewareAPI = &#123;</div><div class="line">      getState: store.getState,</div><div class="line">      dispatch: (action) =&gt; dispatch(action)</div><div class="line">    &#125;;</div><div class="line">    chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</div><div class="line">    dispatch = compose(...chain)(store.dispatch);</div><div class="line"></div><div class="line">    return &#123;...store, dispatch&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>redux-promise的简单实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">export default function promiseMiddleware(&#123; dispatch &#125;) &#123;</div><div class="line">  return next =&gt; action =&gt; &#123;</div><div class="line">    if (!isFSA(action)) &#123;</div><div class="line">      return isPromise(action)</div><div class="line">        ? action.then(dispatch)</div><div class="line">        : next(action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return isPromise(action.payload)</div><div class="line">      ? action.payload.then(</div><div class="line">          result =&gt; dispatch(&#123; ...action, payload: result &#125;),</div><div class="line">          error =&gt; &#123;</div><div class="line">            dispatch(&#123; ...action, payload: error, error: true &#125;);</div><div class="line">            return Promise.reject(error);</div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">      : next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Provider的简单实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Provider extends Component &#123;</div><div class="line">  getChildContext() &#123;</div><div class="line">    return &#123;</div><div class="line">      store: this.props.store</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return this.props.children;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Provider.childContextTypes = &#123;</div><div class="line">  store: React.PropTypes.object</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-基础]]></title>
      <url>https://zhulichao.github.io/2016/11/14/jQuery-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>parent([expr]) – 获得当前匹配元素集合中每个元素的<strong>父元素</strong>，使用选择器进行筛选是可选的，沿 DOM 树向上遍历单一层级<br>parents([expr]) – 获得当前匹配元素集合中每个元素的<strong>祖先元素</strong>，一直向上查找直到根元素，再使用选择器进行筛选可选的<br>closest([expr]) – 首先检查<strong>当前元素</strong>是否匹配，如果匹配则直接返回元素本身，如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素就停止了，如果什么都没找到则返回一个空的jQuery对象  </p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack-基础]]></title>
      <url>https://zhulichao.github.io/2016/11/06/webpack-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前端模块管理器简介"><a href="#前端模块管理器简介" class="headerlink" title="前端模块管理器简介"></a><a href="http://www.ruanyifeng.com/blog/2014/09/package-management.html" target="_blank" rel="external">前端模块管理器简介</a></h2><p>浏览器本身并不提供模块管理的机制，为了调用各个模块，有时不得不在网页中，加入一大堆script标签。这样就使得网页体积臃肿，难以维护，还产生大量的HTTP请求，拖慢显示速度，影响用户体验。<br>为了解决这个问题，前端的模块管理器（package management）应运而生。它可以轻松管理各种JavaScript脚本的依赖关系，自动加载各个模块，使得网页结构清晰合理。不夸张地说，将来所有的前端JavaScript项目，应该都会采用这种方式开发。</p>
<h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p><a href="http://webpack.github.io/docs/" target="_blank" rel="external">官网</a><br><a href="http://zhaoda.net/webpack-handbook/" target="_blank" rel="external">Webpack 中文指南</a><br><a href="https://fakefish.github.io/react-webpack-cookbook/Introduction-to-Webpack.html" target="_blank" rel="external">Webpack 介绍</a><br><a href="http://www.07net01.com/2015/08/890558.html" target="_blank" rel="external">webpack学习笔记</a><br><a href="http://webpack.github.io/docs/tutorials/getting-started/" target="_blank" rel="external">快速上手</a><br><a href="http://www.cnblogs.com/vajoy/p/4650467.html" target="_blank" rel="external">一小时包教会</a><br><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="external">webpack-howto</a><br><a href="https://web-design-weekly.com/2014/09/24/diving-webpack/" target="_blank" rel="external">Diving into Webpack</a>  <a href="http://www.christianalfoni.com/articles/2014_12_13_Webpack-and-react-is-awesome" target="_blank" rel="external">Webpack and React is awesome</a><br><a href="https://christianalfoni.github.io/react-webpack-cookbook/index.html" target="_blank" rel="external">React Webpack cookbook</a><br><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">webpack-demos</a></p>
<p>Webpack是近期最火的一款模块加载器兼模块打包工具，主要是用来打包在浏览器端使用的javascript，同时也能转换、捆绑、打包其它的静态资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理，输出的静态文件只剩下js与png，而css、less、jade其他的文件都合并到了js中。<br>Webpack主要解决如何在一个大规模的代码库中，维护各种模块资源的分割和存放，维护它们之间的依赖关系，并且无缝的将它们整合到一起生成适合浏览器端请求加载的静态资源。<br>Webpack中涉及路径配置最好使用绝对路径，建议通过<code>path.resolve(__dirname, &quot;app/folder&quot;)</code>或<code>path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)</code>的方式来配置，以兼容 Windows 环境。   </p>
<p><strong>特点：</strong></p>
<ul>
<li>代码拆分、Loader、智能解析、插件系统、快速运行。</li>
</ul>
<p><strong>优点:</strong>  </p>
<ul>
<li>webpack 是以 commonJS 的形式来书写脚本的，但对 AMD/CMD 的支持也很全面  </li>
<li>直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译  </li>
<li>能被模块化的不仅仅是 JS 了  </li>
<li>开发便捷，比如打包、压缩混淆、图片转base64等  </li>
<li>扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）</li>
<li>可以使用别名（alias），简化require中的内容  </li>
<li>支持多入口  </li>
</ul>
<h2 id="Webpack安装"><a href="#Webpack安装" class="headerlink" title="Webpack安装"></a>Webpack安装</h2><p>全局安装：<code>npm install webpack -g</code><br>当然如果常规项目还是把依赖写入 package.json 包去更人性化：<br><code>npm init</code><br><code>npm install webpack --save-dev</code>  </p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">配置文件</a></h2><p>示例代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">// 用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。</div><div class="line">// 注意html中引入时先引入common.js，再引入index.s</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);</div><div class="line">// 定义全局变量</div><div class="line">var data = &apos;hello world&apos;;</div><div class="line">module.exports = &#123;</div><div class="line">    // 插件项</div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    // 页面入口文件配置</div><div class="line">    entry: &#123;</div><div class="line">        index : &apos;./src/js/page/index.js&apos;</div><div class="line">    &#125;,</div><div class="line">    // 入口文件输出配置</div><div class="line">    output: &#123;</div><div class="line">        path: &apos;dist/js/page&apos;,</div><div class="line">        filename: &apos;[name].js&apos;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        // 加载器配置</div><div class="line">        loaders: [</div><div class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader?modules&apos; &#125;,// 样式开启局部作用域，如果要定义全局作用域 :global(选择器) &#123;样式&#125;</div><div class="line">            &#123; test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; &#125;,</div><div class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</div><div class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;,</div><div class="line">            &#123; test: /\.js[x]?$/, exclude: /node_modules/, loader: &apos;babel-loader?presets[]=es2015&amp;presets[]=react&apos;&#125;,</div><div class="line">            &#123; test: /\.jsx?$/, exclude: /node_modules/, loader: &apos;babel&apos;, query: &#123; presets: [&apos;es2015&apos;, &apos;react&apos;] &#125; &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        // 查找module的话从这里开始查找</div><div class="line">        root: &apos;E:/github/flux-example/src&apos;, // 绝对路径</div><div class="line">        // 自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</div><div class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</div><div class="line">        // 模块别名定义，方便后续直接引用别名，无须多写长长的地址</div><div class="line">        alias: &#123;</div><div class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,// 后续直接 require(&apos;AppStore&apos;) 即可</div><div class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</div><div class="line">            AppAction : &apos;js/actions/AppAction.js&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    externals: &#123;</div><div class="line">        // 定义全局变量，index.html中需引入data.js，即可直接使用require(&apos;data&apos;)</div><div class="line">        &apos;data&apos;: &apos;data&apos;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>context：处理entry选项时的基础路径（绝对路径），默认值为process.cmd()，即webpack.config.js文件所在路径。  </li>
<li>entry：配置入口文件，值可以是字符串、数组、对象；字符串指定的模块在项目程序启动的时候加载；字符串数组指定的所有模块被当做一个模块集，在项目程序启动的时候都会加载，数组最后一个元素作为模块集输出；对象的每个属性名作为模块集的名称，属性值可以是字符串和字符串数组。这个配置可用于实现非单页的程序，程序会有多个启动入口。  </li>
<li>output.filename：打包后的文件名 ‘[name].js’，表示name为对应entry的键。  </li>
<li>output.path：打包文件存放的绝对路径。  </li>
<li>output.publicPath：网站运行时的访问路径，比如publicPath为”/test”，访问localhost:8080/test/bundle.js可访问编译后的文件。  </li>
<li>module.loaders：值为一个数组，数组的每一个元素是一个对象，对象里可有text、exclude、loader以“！”分隔多个loader的string、loaders是一个字符串数组；加载器配置，以处理非javascript类型的模块，都需要先安装。  </li>
<li>module.noParse：值为一个数组，声明这个模块不需要parse查找依赖，忽略对已知文件的解析。告诉当webpack尝试去解析压缩文件时，这种行为是不允许的。  </li>
<li>plugins：值为一个数组，<code>new webpack.optimize.CommonsChunkPlugin(&#39;common.js&#39;)</code>表示提取多个入口文件的公共脚本部分生成一个 common.js。注意引入时先引入common.js，再引入index.s。如压缩打包的文件(UglifyJsPlugin)、允许错误不打断程序等。  </li>
<li>resolve.root：绝对路径，查找module的话从这里开始查找。添加默认搜索路径。  </li>
<li>resolve.extensions：自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名。  </li>
<li>resolve.alias：模块别名定义，方便后续直接引用别名，无须多写长长的地址；告诉webpack，当引入react时，试图去匹配压缩过的react。  </li>
<li>externals：当我们想在项目中require一些其它的类库或者API，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。<code>externals: {&quot;jquery&quot;: &quot;jQuery&quot;}</code>，这样我们就可以放心的在项目中使用这些API了：<code>var jQuery = require(&quot;jquery&quot;)</code>。如果你想将react分离，不打包到一起，可以使用externals。然后用<code>&lt;script&gt;</code>单独将react引入。  </li>
<li>devtool：就是生成sourcemap的不同方式，eval不支持IE8，推荐用source-map，开发环境常用eval-source-map。  </li>
<li>debug：加载器(loader)转换到调试模式。  </li>
<li>catch：缓存生成的模块，watch 模式下默认就是启动的。  </li>
</ul>
<p><a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">常用Loader</a><br><a href="http://webpack.github.io/docs/list-of-plugins.html" target="_blank" rel="external">常用plugin</a></p>
<p><strong>常用命令:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">webpack    // 执行webpack.config.js文件</div><div class="line">webpack --display-error-details //方便出错时能查阅更详尽的信息</div><div class="line">webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包</div><div class="line">webpack --watch   //监听变动并自动打包</div><div class="line">webpack -p    //压缩混淆脚本，这个非常非常重要！</div><div class="line">webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了</div></pre></td></tr></table></figure></p>
<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>命令：<code>webpack-dev-server --devtool eval --progress --colors --hot --content-base dist</code><br>webpack-dev-server  //启动一个小的express Web服务，8080端口<br>–devtool eval   //为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号<br>–progress // 显示合并代码进度<br>–colors - Yay //命令行中显示颜色！<br>–content-base build // 指向设置的输出目录，这样不能访问其它路径的文件了<br>–history-api-fallback // 这样在浏览器中直接输入url才不会报Cannot GET<br>–inline // 自动刷新页面<br>–hot // 启动热替换  </p>
<p>当运行 webpack-dev-server 的时候，它会监听你的文件修改。当项目重新合并之后，会通知浏览器刷新。为了能够触发这样的行为，你需要把你的 index.html 放到 build/ 文件夹下。可访问<code>http://localhost:8080/webpack-dev-server/bundle</code>或<br><code>http://localhost:8080/webpack-dev-server/index.html</code>。注意，访问带webpack-dev-server的url会自动刷新，直接访问localhost:8080的可能不刷新。</p>
<h2 id="配置webpack-dev-server代理"><a href="#配置webpack-dev-server代理" class="headerlink" title="配置webpack-dev-server代理"></a>配置webpack-dev-server代理</h2><h2 id="自动编译并刷新页面"><a href="#自动编译并刷新页面" class="headerlink" title="自动编译并刷新页面"></a>自动编译并刷新页面</h2><p>index.html 放到 build/ 文件夹下<br>Index.html中添加 <code>&lt;script src=&quot;http://localhost:8080/webpack-dev-server.js&quot;&gt;&lt;/script&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">    &apos;webpack/hot/dev-server&apos;,</div><div class="line">    &apos;webpack-dev-server/client?http://localhost:8080&apos;,</div><div class="line">    path.resolve(__dirname, &apos;app/main.js&apos;)</div><div class="line">],</div></pre></td></tr></table></figure></p>
<p>命令：webpack-dev-server –hot<br>当Webpack-dev-server在浏览器自动刷新下运行的时候，CSS也会自动更新，不过有点不同的是，当你改变了一个 CSS 文件，属于那个文件的标签会更新新的内容但不会刷新。<br>注意，访问带webpack-dev-server的url会自动刷新，直接访问localhost:8080的可能不刷新。</p>
<h2 id="独立打包样式文件"><a href="#独立打包样式文件" class="headerlink" title="独立打包样式文件"></a>独立打包样式文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</div><div class="line">// webpack.config.js 中</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  ...</div><div class="line">  new ExtractTextPlugin(&quot;[name].css&quot;), // 如果只有一个 style.css 就行</div><div class="line">],</div><div class="line">loaders:[</div><div class="line">  ...</div><div class="line">  &#123;</div><div class="line">    test: /\.less$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader!less-loader&apos;,&#123; publicPath: &apos;./&apos;&#125;)</div><div class="line">  &#125;,</div><div class="line">],</div></pre></td></tr></table></figure>
<h2 id="CSS压缩、去重"><a href="#CSS压缩、去重" class="headerlink" title="CSS压缩、去重"></a>CSS压缩、去重</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const OptimizeCssAssetsPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;);</div><div class="line">// webpack.config.js 中</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  ...</div><div class="line">  new OptimizeCssAssetsPlugin(&#123;</div><div class="line">    assetNameRegExp: /\.css$/g,</div><div class="line">    cssProcessor: require(&apos;cssnano&apos;),</div><div class="line">    cssProcessorOptions: &#123; discardComments: &#123;removeAll: true &#125; &#125;,</div><div class="line">    canPrint: true</div><div class="line">  &#125;),</div><div class="line">],</div></pre></td></tr></table></figure>
<h2 id="分离应用和第三方"><a href="#分离应用和第三方" class="headerlink" title="分离应用和第三方"></a>分离应用和第三方</h2><p>当你的应用依赖其他库尤其是像 ReactJS 这种大型库的时候，你需要考虑把这些依赖分离出去，这样就能够让用户在你更新应用之后不需要再次下载第三方文件。记住要把这些文件都加入到你的 HTML 代码中，不然你会得到一个错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    app: path.resolve(__dirname, &apos;app/main.js&apos;),</div><div class="line">    // 当 React 作为一个 node 模块安装的时候，</div><div class="line">    // 我们可以直接指向它，就比如 require(&apos;react&apos;)</div><div class="line">    vendors: [&apos;react&apos;, &apos;react-dom&apos;, &apos;jquery&apos;]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    ...</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&apos;vendors&apos;, &apos;vendors.js&apos;)</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><p>webpack打包后的文件可能会很大，生成环境应该去掉注释及依赖的copyright信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  ...</div><div class="line">  new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">    output: &#123;</div><div class="line">      comments: false,</div><div class="line">    &#125;,</div><div class="line">    compress: &#123;</div><div class="line">      warnings: false,</div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="多重入口"><a href="#多重入口" class="headerlink" title="多重入口"></a>多重入口</h2><p>你的应用可能有多个路径， 就是应用中有两个或者多个 URL 相应不同的页面，这里就是提供这样的解决方案。可能你有一个普通用户页和一个管理员页，他们共享了很多代码，但是不想在普通用户页中加载所有管理员页的代码，所以好方案是使用多重入口。</p>
<h2 id="生成html、打开浏览器"><a href="#生成html、打开浏览器" class="headerlink" title="生成html、打开浏览器"></a>生成html、打开浏览器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var HtmlwebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">var OpenBrowserPlugin = require(&apos;open-browser-webpack-plugin&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    entry: &apos;./main.js&apos;,</div><div class="line">    output: &#123;</div><div class="line">        filename: &apos;bundle.js&apos;</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        new HtmlwebpackPlugin(&#123;</div><div class="line">            title: &apos;Webpack-demos&apos;,</div><div class="line">            filename: &apos;index.html&apos;</div><div class="line">        &#125;),</div><div class="line">        new OpenBrowserPlugin(&#123;</div><div class="line">            url: &apos;http://localhost:8080&apos;</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="在开发环境使用的代码"><a href="#在开发环境使用的代码" class="headerlink" title="在开发环境使用的代码"></a>在开发环境使用的代码</h2><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (__DEV__) &#123;</div><div class="line">  <span class="built_in">document</span>.write(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> devFlagPlugin = <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  __DEV__: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.DEBUG || <span class="string">'false'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./main.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [devFlagPlugin]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Linux &amp; Mac</span></div><div class="line">$ env DEBUG=<span class="literal">true</span> webpack-dev-server</div><div class="line"></div><div class="line"><span class="comment"># Windows</span></div><div class="line">$ <span class="built_in">set</span> DEBUG=<span class="literal">true</span></div><div class="line">$ webpack-dev-server</div></pre></td></tr></table></figure>
<h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><p>方式一</p>
<p>使用<code>require.ensure</code>定义一个分割点，<code>require.ensure</code>会告诉webpack被引入的文件要编译成单独的文件，与编译输出文件bundle.js分开，index.html和weback.config.js都不需要修改。从表面上也看不出有什么不同，实际上webpack把main.js和a.js编译成不同的块bundle.js和1.bundle.js，并在bundle.js需要1.bundle.js时才加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line">  <span class="built_in">document</span>.open();</div><div class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</div><div class="line">  <span class="built_in">document</span>.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./main.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果要配合react-router使用，示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const app = (location, callback) =&gt; &#123;</div><div class="line">    require.ensure([], require =&gt; &#123;</div><div class="line">        callback(null, require(&apos;./containers/App&apos;).default)</div><div class="line">    &#125;, &apos;app&apos;)</div><div class="line">&#125;;</div><div class="line">...</div><div class="line">&lt;Route getComponent=&#123;app&#125; /&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>方式二</p>
<p>使用<code>bundle-loader</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> load = <span class="built_in">require</span>(<span class="string">'bundle-loader!./a.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// You need to async wait until a.js is available (and get the exports)</span></div><div class="line">load(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.open();</div><div class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + file + <span class="string">'&lt;/h1&gt;'</span>);</div><div class="line">  <span class="built_in">document</span>.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="提取供应商模块"><a href="#提取供应商模块" class="headerlink" title="提取供应商模块"></a>提取供应商模块</h2><p>可以使用<code>CommonsChunkPlugin</code>提取供应商库到单独的文件中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./main.js'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>],</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="comment">/* chunkName= */</span><span class="string">'vendor'</span>, <span class="comment">/* filename= */</span><span class="string">'vendor.js'</span>)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果想在其它文件使用一个模块又不想使用require引入，如使用$和jQuery但是不用<code>require(&#39;jquery&#39;)</code>，就需要使用<code>ProvidePlugin</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./main.js'</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">      $: <span class="string">"jquery"</span>,</div><div class="line">      jQuery: <span class="string">"jquery"</span>,</div><div class="line">      <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="热模块替换"><a href="#热模块替换" class="headerlink" title="热模块替换"></a>热模块替换</h2><p>方式一</p>
<p>启动命令添加参数<br><code>webpack-dev-server --hot --inline</code>  </p>
<p>方式二</p>
<p>修改webpack.config.js文件，添加HotModuleReplacementPlugin插件，修改entry<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: [</div><div class="line">    <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</div><div class="line">    <span class="string">'./index.js'</span></div><div class="line">  ],</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,</div><div class="line">    publicPath: <span class="string">'/static/'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">  ],</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'babel-loader'</span>,</div><div class="line">      query: &#123;</div><div class="line">        presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</div><div class="line">      &#125;,</div><div class="line">      include: path.join(__dirname, <span class="string">'.'</span>)</div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git-基础]]></title>
      <url>https://zhulichao.github.io/2016/11/01/git-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>参考 <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a> 和 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">Git教程</a></p>
<p>which -a git # 查看所有版本的 git<br>git –version # 查看使用 git 的版本<br>git xxx –help # 查看 xxx 命令相关的帮助文档<br>git config –global alias.别名 命令 # 给命令起别名<br>git log –oneline –decorate –graph –all # 查看提交记录</p>
<h2 id="拉取和提交操作"><a href="#拉取和提交操作" class="headerlink" title="拉取和提交操作"></a>拉取和提交操作</h2><p>git clone url [name] – 从远程主机克隆一个版本库<br>git clone -b url – 拉取指定分支<br>git pull – 拉取远程仓库，默认为远程origin master分支<br>git pull origin [remoteBranchName] [localBranchName] – 拉取远程仓库remoteName分支到本地localBranchName分支<br>git fetch origin remoteBranchName –  从远程分支更新最新的版本到origin/remoteBranchName分支上，没有更新到工作区，默认情况下取回所有分支的更新<br>git merge origin/localBranchName –  合并内容到本地localBranchName分支，更新到工作区<br>git diff master origin/master – 比较本地的master分支和origin/master分支的差别<br>git status – 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交( commit)的文件<br>git add fillname – 把文件添加到仓库，新添加的文件必须add后提交才生效<br>git rm fillname – 把文件从仓库删除，被删除的文件必须rm后提交才生效<br>git commit -m “description” – 把文件提交到本地仓库<br>git push origin [name] – 把所有本地提交推送到远程库name分支，默认为master分支  </p>
<h2 id="临时备份"><a href="#临时备份" class="headerlink" title="临时备份"></a>临时备份</h2><p>git stash – 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致，同时将当前的工作区内容保存到Git栈中<br>git stash pop stash@{id} – 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复，将对应的stash id 从stash list里删除<br>git stash apply stash@{id} – 与stash pop的区别是会继续保存stash id<br>git stash list – 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复<br>git stash clear – 清空Git栈<br>git stash show stash@{0} – 查看压入Git栈的版本为0的文件列表<br>git stash drop – 如果不加stash编号，默认的就是删除最新的，也就是编号为0的那个，加编号就是删除指定编号的stash</p>
<h2 id="忽略文件不提交"><a href="#忽略文件不提交" class="headerlink" title="忽略文件不提交"></a>忽略文件不提交</h2><p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*.log</div><div class="line">node_modules/</div></pre></td></tr></table></figure></p>
<h2 id="恢复操作"><a href="#恢复操作" class="headerlink" title="恢复操作"></a>恢复操作</h2><p>git reset – 将当前的分支重设(reset)到指定的commit或者HEAD(默认，即最新的一次提交)，可有–hard 或 –soft 参数<br>git revert filename – 恢复指定文件<br>git rebase localBranchName – 用于把localBranchName分支的修改合并到当前分支，该命令会把当前分支里的每个提交(commit)取消掉，然后把当前分支更新为最新的localBranchName分支  </p>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>git branch – 查看本地分支<br>git branch -r – 查看远程分支<br>git branch [name] – 创建本地分支<br>git checkout [name] – 切换分支<br>git checkout -b [name] [commit 引用] – 基于指定的 commit 新建并切换到该分支<br>git branch -d [name] – 删除分支，-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的，如果想强制删除一个分支，可以使用-D选项<br>git merge [name] – 将指定分支合并到当前分支<br>git push origin [name] – 本地分支push到远程同名分支，远程没有该分支则创建<br>git push origin :heads/[name] – 删除远程分支<br>git push origin :master – 删除远程分支<br>git push origin –delete master – 删除远程分支<br>git push origin [remoteBranchName] [localBranchName] – 提交本地local分支作为远程的remote分支，如果没有则创建<br>git push –force origin – 如果远程主机的版本比本地版本更新，可以使用–force选项，结果导致远程主机上更新的版本被覆盖<br>git branch –set-upstream dev origin/dev – 指定本地dev分支与远程origin/dev分支的链接  </p>
<h2 id="版本操作"><a href="#版本操作" class="headerlink" title="版本操作"></a>版本操作</h2><p>git tag – 查看版本<br>git tag [localTagName] – 创建版本<br>git push origin –tags – 把本地tag推送到远程<br>git fetch origin tag <remotetagname> – 获取远程tag<br>git tag -d [localTagName] – 删除本地tag<br>git push origin :refs/tags/[remoteTagName] – 删除远程tag<br>git checkout tagName – 切换到指定版本</remotetagname></p>
<h2 id="fork的项目与原项目同步"><a href="#fork的项目与原项目同步" class="headerlink" title="fork的项目与原项目同步"></a>fork的项目与原项目同步</h2><p>fork一个项目并clone到本地，如果原项目已经更新了，要保持github上fork的项目和本地的项目与原项目同步，只需执行以下操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 远程拉取更新项目，先将原包作为 remote 加到本地项目中，A_REPOSITORY_URL需替换</div><div class="line">git remote add upstream A_REPOSITORY_URL</div><div class="line"># 从上游仓库获取到分支</div><div class="line">git fetch upstream</div><div class="line"># 合并到本地当前分支</div><div class="line">git merge upstream/master</div><div class="line"># 提交到自己的 fork</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git remote add origin https://github.com/zhulichao/react-native-hello.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Router-基础]]></title>
      <url>https://zhulichao.github.io/2016/10/29/react-router-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><p>参考：<br><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">React Router 使用教程</a><br><a href="https://github.com/reactjs/react-router-tutorial/tree/master/lessons" target="_blank" rel="external">react-router-tutorial</a><br><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external">react-router</a>  </p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>React-Router 路由库，是官方维护的路由库，事实上也是唯一可选的路由库。它通过管理 URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到。</p>
<p>一般在src/index.jsx中定义路由，进行整个工程路由的管理。路由匹配规则是从上到下执行，一旦发现匹配，就不再走其余的规则了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; Router, Route, hashHistory &#125; from &apos;react-router&apos;;</div><div class="line"></div><div class="line">render((</div><div class="line">    &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">        &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;CommonMainPage&#125; /&gt;</div><div class="line">        &lt;/Route&gt;</div><div class="line">    &lt;/Router&gt;</div><div class="line">), document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure></p>
<p>子路由也可以不写在Router组件里面，单独传入Router组件的routes属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let routes = &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;Route path=&quot;/home&quot; component=&#123;CommonMainPage&#125; /&gt;</div><div class="line">&lt;/Route&gt;;</div><div class="line">&lt;Router routes=&#123;routes&#125; history=&#123;browserHistory&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p>用户访问/home时，会先加载App组件，然后在它的内部再加载CommonMainPage组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">    &lt;Repos/&gt;</div><div class="line">&lt;/App&gt;</div></pre></td></tr></table></figure></p>
<p>App组件要写成下面的样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;div&gt;</div><div class="line">      &#123;this.props.children&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="path属性"><a href="#path属性" class="headerlink" title="path属性"></a>path属性</h2><p>Route组件的path属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。path属性也可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。嵌套路由如果想摆脱这个规则，可以使用绝对路由。</p>
<p>path可以使用通配符，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/list/:servId&quot; component=&#123;ListPage&#125; /&gt;</div></pre></td></tr></table></figure></p>
<p>在ListPage组件中通过<code>this.props.params.servId</code>可获取该变量对于在url中的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/hello/:name&quot;&gt;</div><div class="line">// 匹配 /hello/michael</div><div class="line">// 匹配 /hello/ryan</div><div class="line"></div><div class="line">&lt;Route path=&quot;/hello(/:name)&quot;&gt;</div><div class="line">// 匹配 /hello</div><div class="line">// 匹配 /hello/michael</div><div class="line">// 匹配 /hello/ryan</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*.*&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/hello.html</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*&quot;&gt;</div><div class="line">// 匹配 /files/ </div><div class="line">// 匹配 /files/a</div><div class="line">// 匹配 /files/a/b</div><div class="line"></div><div class="line">&lt;Route path=&quot;/**/*.jpg&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/path/to/file.jpg</div></pre></td></tr></table></figure>
<h3 id="IndexRoute"><a href="#IndexRoute" class="headerlink" title="IndexRoute"></a>IndexRoute</h3><p>IndexRoute显式指定根路由的子组件，注意没有路径参数path，即指定默认情况下加载的子组件，如访问路径/，会加载该组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><p>Redirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。<br><code>＜Redirect from=&quot;/messages/:id&quot; to=&quot;/infos/:id&quot; /&gt;</code></p>
<h3 id="IndexRedirect"><a href="#IndexRedirect" class="headerlink" title="IndexRedirect"></a>IndexRedirect</h3><p>IndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。<br><code>＜IndexRedirect to=&quot;/welcome&quot; /&gt;</code><br>用户访问根路径时，将自动重定向到子组件welcome。</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>Link组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的React 版本，可以接收Router的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 点击About会跳转到/about路由</div><div class="line">&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line"></div><div class="line">// 点击About跳转到/about是文字显示为红色</div><div class="line">&lt;Link to=&quot;/about&quot; activeStyle=&#123;&#123;color: &apos;red&apos;&#125;&#125;&gt;About&lt;/Link&gt;</div><div class="line"></div><div class="line">// 也可以指定class </div><div class="line">&lt;Link to=&quot;/about&quot; activeClassName=&quot;active&quot;&gt;About&lt;/Link&gt;</div></pre></td></tr></table></figure>
<p>在Router组件之外，导航到路由页面，可以使用浏览器的History API。这种方式，对于以前没有访问过的路由是不好使的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;;</div><div class="line">browserHistory.push(&apos;/some/path&apos;);</div></pre></td></tr></table></figure></p>
<p>或者使用context对象。注意，pathname和state名称是固定的，跳转到pathname时会带着state的信息。在跳转进入的组件中，使用<code>this.props.location.state</code>获取这个state信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 路由跳转</div><div class="line">this.context.router.push(&#123;</div><div class="line">    pathname: &apos;/card/&apos; + this.props.servDef.SERV_ID,</div><div class="line">    state: this.props.listQueryData</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="IndexLink"><a href="#IndexLink" class="headerlink" title="IndexLink"></a>IndexLink</h3><p>如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。这是因为对于根路由来说，activeStyle和activeClassName总是生效，因为’/‘会匹配任何子路由，而IndexLink组件会使用路径的精确匹配。<br><code>&lt;IndexLink to=&quot;/&quot; activeClassName=&quot;active&quot;&gt;</code><br>或者使用<br><code>&lt;Link to=&quot;/&quot; activeClassName=&quot;active&quot; onlyActiveOnIndex={true}&gt;Home&lt;/Link&gt;</code></p>
<h3 id="histroy"><a href="#histroy" class="headerlink" title="histroy"></a>histroy</h3><p>Router组件的history属性，是用来监听浏览器地址栏变化的，并将URL解析成一个地址对象，供 React Router 匹配。history属性，一共可以设置三种值。  </p>
<ul>
<li><p><strong>createMemoryHistory：</strong>主要用于服务器渲染，它创建一个内存中的history对象，不与浏览器URL互动，<code>const history = createMemoryHistory(location)</code></p>
</li>
<li><p><strong>hashHistory：</strong>路由将通过URL的hash部分#切换，类似example.com/#/some/path</p>
</li>
<li><p><strong>browserHistory：</strong>不再通过Hash完成，而显示正常的路径example.com/some/path，背后调用的是浏览器的History API。这种情况需要对<a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/Histories.md#configuring-your-server" target="_blank" rel="external">服务器改造</a>，否则用户直接向服务器请求某个子路由，会显示网页找不到的404错误。<br>如果开发服务器使用的是webpack-dev-server，加上–history-api-fallback参数<br><code>webpack-dev-server --inline --content-base . --history-api-fallback</code>，index.html中用绝对路径引入编译后的文件<code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ul>
<h3 id="路由的钩子"><a href="#路由的钩子" class="headerlink" title="路由的钩子"></a>路由的钩子</h3><p>每个路由都有Enter和Leave钩子，用户进入或离开该路由时触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;  </div><div class="line">＜Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;  </div><div class="line">    ＜Redirect from=&quot;messages/:id&quot; to=&quot;/messages/:id&quot; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>如果用户离开/messages/:id，进入/about时，会依次触发以下的钩子:  </p>
<blockquote>
<p>/messages/:id的onLeave<br>/inbox的onLeave<br>/about的onEnter  </p>
</blockquote>
<p>进行路由跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route</div><div class="line">    path=&quot;messages/:id&quot;</div><div class="line">    onEnter=&#123;(&#123;params&#125;, replace) =&gt; replace(`/messages/$&#123;params.id&#125;`)&#125; </div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>进行登录验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/home&quot; component=&#123;CommonMainPage&#125; onEnter=&#123;requireAuth&#125;&gt;</div><div class="line"></div><div class="line">function requireAuth(nextState, replace) &#123;</div><div class="line">    if (!storage.get(&apos;token&apos;)) &#123;</div><div class="line">        replace(&#123;</div><div class="line">            pathname: &apos;/login&apos;,</div><div class="line">            state: &#123; nextPathname: nextState.location.pathname &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当用户离开一个路径的时候，跳出一个提示框，要求用户确认是否离开。setRouteLeaveHook方法为Leave钩子指定routerWillLeave函数，该方法如果返回false，将阻止路由的切换，否则就返回一个字符串，提示用户决定是否要切换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Home = withRouter(</div><div class="line">  React.createClass(&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      this.props.router.setRouteLeaveHook(</div><div class="line">        this.props.route, </div><div class="line">        this.routerWillLeave</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    routerWillLeave(nextLocation) &#123;</div><div class="line">      // 返回 false 会继续停留当前页面，</div><div class="line">      // 否则，返回一个字符串，会显示给用户，让其自己决定</div><div class="line">      if (!this.state.isSaved)</div><div class="line">        return &apos;确认要离开？&apos;;</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="生产环境相关"><a href="#生产环境相关" class="headerlink" title="生产环境相关"></a>生产环境相关</h3><p><strong>if-env 依赖：</strong> 如果想简化开发、在任何情况运行npm start都执行正确的脚本启动，可以安装if-env依赖<code>npm install if-env --save</code>并在package.json中这样部署，再运行<code>NODE_ENV=production npm start</code>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm start:dev&quot;,</div><div class="line">  &quot;start:dev&quot;: &quot;webpack&quot;,</div><div class="line">  &quot;start:prod&quot;: &quot;start-cluster&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了限制浏览器可访问的文件，通常创建一个浏览器可访问的文件夹，如public，将index.html、index.css放入该目录，并在server.js中指定可访问的静态资源路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)))</div><div class="line">app.get(&apos;*&apos;, function (req, res) &#123;</div><div class="line">  res.sendFile(path.join(__dirname, &apos;public&apos;, &apos;index.html&apos;))</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>并指定webpack输入目录也为该目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">  path: &apos;public&apos;,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后启动命令添加参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;start:dev&quot;: &quot;webpack-dev-server --inline --content-base public --history-api-fallback&quot;,</div></pre></td></tr></table></figure></p>
<p><strong>compression 依赖:</strong> 用该中间件压缩和处理静态内容。开启gzip压缩对Web应用会产生巨大影响，当一个gzip压缩浏览器请求某些资源的时候，服务器会在响应返回给浏览器之前进行压缩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var app = express();</div><div class="line">// 必须放在第一行</div><div class="line">app.use(compression());</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p><strong>服务器端渲染:</strong> </p>
<p>需要一个服务器渲染的webpack配置<code>webpack.server.config.js</code>，原来的webpack配置webpack.config.js还是保留的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">  entry: path.resolve(__dirname, &apos;server.js&apos;),</div><div class="line">  output: &#123;</div><div class="line">    filename: &apos;server.bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  target: &apos;node&apos;,</div><div class="line">  // keep node_module paths out of the bundle</div><div class="line">  externals: fs.readdirSync(path.resolve(__dirname, &apos;node_modules&apos;)).concat([</div><div class="line">    &apos;react-dom/server&apos;, &apos;react/addons&apos;,</div><div class="line">  ]).reduce(function (ext, mod) &#123;</div><div class="line">    ext[mod] = &apos;commonjs &apos; + mod</div><div class="line">    return ext</div><div class="line">  &#125;, &#123;&#125;),</div><div class="line">  node: &#123;</div><div class="line">    __filename: true,</div><div class="line">    __dirname: true</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123; test: /\.js$/, exclude: /node_modules/, loader: &apos;babel-loader?presets[]=es2015&amp;presets[]=react&apos; &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更新<code>package.json</code>文件，用<code>NODE_ENV=production npm start</code>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm run start:dev&quot;,</div><div class="line">  &quot;start:dev&quot;: &quot;webpack-dev-server --inline --content-base public/ --history-api-fallback&quot;,</div><div class="line">  &quot;start:prod&quot;: &quot;npm run build &amp;&amp; node server.bundle.js&quot;,</div><div class="line">  &quot;build:client&quot;: &quot;webpack&quot;,</div><div class="line">  &quot;build:server&quot;: &quot;webpack --config webpack.server.config.js&quot;,</div><div class="line">  &quot;build&quot;: &quot;npm run build:client &amp;&amp; npm run build:server&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>把路由管理放到单独的文件中，以便客户端和服务器端都能获取它。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/routes.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Route, IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./About'</span></div><div class="line"><span class="keyword">import</span> Repos <span class="keyword">from</span> <span class="string">'./Repos'</span></div><div class="line"><span class="keyword">import</span> Repo <span class="keyword">from</span> <span class="string">'./Repo'</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125; /&gt;</div><div class="line">    &lt;Route path="/repos" component=&#123;Repos&#125;&gt;</div><div class="line">      &lt;Route path="/repos/:userName/:repoName" component=&#123;Repo&#125; /&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">    &lt;Route path="/about" component=&#123;About&#125; /&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="comment">// import routes and pass them into &lt;Router/&gt;</span></div><div class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./modules/routes'</span></div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;/</span>&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// import some new stuff</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="comment">// we'll use this to render our app to an html string</span></div><div class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'react-dom/server'</span></div><div class="line"><span class="comment">// and these to match the url to routes and then render</span></div><div class="line"><span class="keyword">import</span> &#123; match, RouterContext &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./modules/routes'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// send all requests to index.html so browserHistory works</span></div><div class="line"></div><div class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="comment">// match the routes to the url</span></div><div class="line">  match(&#123; routes: routes, location: req.url &#125;, (err, redirect, props) =&gt; &#123;</div><div class="line">    <span class="comment">// `RouterContext` is the what `Router` renders. `Router` keeps these</span></div><div class="line">    <span class="comment">// `props` in its state as it listens to `browserHistory`. But on the</span></div><div class="line">    <span class="comment">// server our app is stateless, so we need to use `match` to</span></div><div class="line">    <span class="comment">// get these props before rendering.</span></div><div class="line">    <span class="keyword">const</span> appHtml = renderToString(&lt;RouterContext &#123;...props&#125;/&gt;)</div><div class="line"></div><div class="line">    // dump the HTML into a template, lots of ways to do this, but none are</div><div class="line">    // really influenced by React Router, so we're just using a little</div><div class="line">    // function, `renderPage`</div><div class="line">    res.send(renderPage(appHtml))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">function renderPage(appHtml) &#123;</div><div class="line">  return `</div><div class="line">    &lt;!doctype html public="storage"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;meta charset=utf-8/&gt;</div><div class="line">    &lt;title&gt;My First React Router App&lt;/title&gt;</div><div class="line">    &lt;link rel=stylesheet href=/index.css&gt;</div><div class="line">    &lt;div id=app&gt;$&#123;appHtml&#125;&lt;/div&gt;</div><div class="line">    &lt;script src="/bundle.js"&gt;&lt;/script&gt;</div><div class="line">   `</div><div class="line">&#125;</div><div class="line"></div><div class="line">var PORT = process.env.PORT || 8080</div><div class="line">app.listen(PORT, function() &#123;</div><div class="line">  console.log('Production Express server running at localhost:' + PORT)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> React Router </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Babel-入门]]></title>
      <url>https://zhulichao.github.io/2016/10/29/babel-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [], -- 设定转码规则</div><div class="line">    &quot;plugins&quot;: []  -- 设定支持的插件，如&apos;antd&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES2015转码规则<br><code>npm install --save-dev babel-preset-es2015</code><br>react转码规则<br><code>npm install --save-dev babel-preset-react</code><br>ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个<br><code>npm install --save-dev babel-preset-stage-0</code><br><code>npm install --save-dev babel-preset-stage-1</code><br><code>npm install --save-dev babel-preset-stage-2</code><br><code>npm install --save-dev babel-preset-stage-3</code>  </p>
<h3 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h3><p><code>npm install --global babel-cli</code> 用于命令行转码的工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 转码结果输出到标准输出</div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"># 转码结果写入一个文件</div><div class="line"># --out-file 或 -o 参数指定输出文件</div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line"># 或者</div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"># 整个目录转码</div><div class="line"># --out-dir 或 -d 参数指定输出目录</div><div class="line">$ babel src --out-dir lib</div><div class="line"># 或者</div><div class="line">$ babel src -d lib</div><div class="line"></div><div class="line"># -s 参数生成source map文件</div><div class="line">$ babel src -d lib -s</div></pre></td></tr></table></figure>
<p>babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。</p>
<h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。注意，它只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p>
<h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块，配置对象为<a href="http://babeljs.io/docs/usage/options/" target="_blank" rel="external">options</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var babel = require(&apos;babel-core&apos;);</div><div class="line"></div><div class="line">// 字符串转码</div><div class="line">babel.transform(&apos;code();&apos;, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div><div class="line"></div><div class="line">// 文件转码（异步）</div><div class="line">babel.transformFile(&apos;filename.js&apos;, options, function(err, result) &#123;</div><div class="line">  result; // =&gt; &#123; code, map, ast &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 文件转码（同步）</div><div class="line">babel.transformFileSync(&apos;filename.js&apos;, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div><div class="line"></div><div class="line">// Babel AST转码</div><div class="line">babel.transformFromAst(ast, code, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div></pre></td></tr></table></figure></p>
<h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。如果想让这些代码执行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>
<h3 id="浏览器环境"><a href="#浏览器环境" class="headerlink" title="浏览器环境"></a>浏览器环境</h3><p>Babel也可以用于浏览器环境。可在网页中插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;node_modules/babel-core/browser.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.4.4/babel.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>网页中实时将ES6代码转为ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fetch替代Ajax]]></title>
      <url>https://zhulichao.github.io/2016/10/22/fetch-ajax/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Fetch出现原因"><a href="#Fetch出现原因" class="headerlink" title="Fetch出现原因"></a>Fetch出现原因</h2><p><a href="https://segmentfault.com/a/1190000003810652" target="_blank" rel="external">传统 Ajax 已死，Fetch 永生</a>  传统 Ajax 指的是 XMLHttpRequest（XHR）</p>
<p>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。Fetch 的出现就是为了解决 XHR 的问题，它是替代XMLHttpRequest用来发送网络请求的非常新的API。由于目前大多数浏览器原生还不支持它，建议你使用 isomorphic-fetch 库。</p>
<p>使用async/await对fetch的使用进行优化后，写异步代码就像写同步代码一样爽。async/await是非常新的 API，属于 ES7。</p>
<p>Promise，generator/yield，await/async都是现在和未来JS解决异步的标准做法，可以完美搭配使用。另外，Fetch 也很适合做现在流行的同构应用。同构(isomorphic/universal)就是使前后端运行同一套代码的意思，后端一般是指 NodeJS 环境。</p>
<p>Fetch 优点主要有：</p>
<blockquote>
<p>语法简洁，更加语义化<br>基于标准 Promise 实现，支持 async/await<br>同构方便，使用 isomorphic-fetch  </p>
</blockquote>
<h2 id="支持状况及解决方案"><a href="#支持状况及解决方案" class="headerlink" title="支持状况及解决方案"></a>支持状况及解决方案</h2><p>原生支持率并不高，幸运的是，引入下面这些 polyfill 后可以完美支持 IE8+ ：</p>
<blockquote>
<p>由于 IE8 是 ES3，需要引入 ES5 的 polyfill: es5-shim, es5-sham<br>引入 Promise 的 polyfill: es6-promise<br>引入 fetch 探测库：fetch-detector<br>引入 fetch 的 polyfill: fetch-ie8<br>可选：如果你还使用了 jsonp，引入 fetch-jsonp<br>可选：开启 Babel 的 runtime 模式，现在就使用 async/await</p>
</blockquote>
<p>JSONP(JSON with Padding)是JSON的一种”使用模式”，可用于解决主流浏览器的跨域数据访问的问题<br><a href="http://www.cnblogs.com/yuzhongwusan/archive/2012/12/11/2812849.html" target="_blank" rel="external">jsonp详解</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM-基础]]></title>
      <url>https://zhulichao.github.io/2016/10/20/npm-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>npm search antd # 在已发布模块的name、tags、description字段中搜索关键字<br>npm view antd # 看该模块的package.json文件以及与NPM仓库相关的属性<br>npm list antd # 查看本地antd模块版本<br>npm root [-g] # 查看项目或全局安装路径<br>which node # 查看本地 node 安装路径<br>npm init # 初始化 package.json<br>npm install [name@version][-g]/[–save][-dev] # 装包<br>npm uninstall [name@version][-g]/[–save][-dev] # 卸载<br>npm get registry # 查询当前配置的镜像<br>npm config set registry <a href="http://registry.npm.taobao.org/" target="_blank" rel="external">http://registry.npm.taobao.org/</a> # 设置镜像</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts 使用指南</a></p>
]]></content>
      
        <categories>
            
            <category> NPM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript-基础]]></title>
      <url>https://zhulichao.github.io/2016/10/20/javascript-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JavaScript是单线程、基于原型、面向对象、弱类型的动态脚本语言。6种数据类型，其中包括5个基本数据类型：String、Number、Boolean、Null、Undefined，1个复杂数据类型：Object。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">JavaScript API</a></p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>通过typeof进行数据类型的判断，是一个一元运算，返回值为字符串，取值如下：</p>
<blockquote>
<p>number 表示数字<br>string 表示字符串<br>boolean 表示布尔<br>object 表示对象，null、对象、数组返回的都是object类型<br>symbol 表示Symbol<br>undefined 表示Undefined<br>function 表示为一个函数  </p>
</blockquote>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>是一个三元运算，用于判断一个对象是否是另一个对象的实例，可以在继承关系中用来判断一个实例是否属于它的父类型。</p>
<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><p>字符串常量是基本类型string，new String()生成的字符串是对象类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typeof &apos;a&apos; // &apos;string&apos;</div><div class="line">typeof new String(&apos;a&apos;) // &apos;object&apos;</div><div class="line">&apos;a&apos; instanceof String // false</div><div class="line">new String(&apos;a&apos;) instanceof String // true</div><div class="line">typeof null == &apos;object&apos; // true</div><div class="line">// 在浏览器环境中，通常要查看对象内部的[[Class]]值</div><div class="line">Object.prototype.toString.call(a) // &apos;[object String]&apos;</div></pre></td></tr></table></figure>
<p>null、undefined、’’、0 在条件表达式中被判定为false  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typeof undefined // undefined</div><div class="line">undefined instanceof Object // false</div><div class="line">typeof null // &apos;object&apos;</div><div class="line">null instanceof Object // false</div><div class="line">undefined == null // true</div><div class="line">undefined === null // false</div></pre></td></tr></table></figure>
<h2 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h2><p>null和undefined基本是同义的，只有一些细微的差别。</p>
<p>null表示”没有对象”，即该处不应该有值。典型用法是：</p>
<ul>
<li>做为函数的参数，表示该函数的参数不是对象</li>
<li>作为对象原型链的终点，Object.getPrototypeOf(Object.prototype) 为 null</li>
</ul>
<p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</p>
<ul>
<li>变量被声明了，但没有赋值时，就等于undefined</li>
<li>调用函数时，应该提供的参数没有提供，该参数等于undefined</li>
<li>对象没有赋值的属性，该属性的值为undefined</li>
<li>函数没有返回值时，默认返回undefined</li>
</ul>
<h2 id="函数参数数量"><a href="#函数参数数量" class="headerlink" title="函数参数数量"></a>函数参数数量</h2><p>函数名.length 获取函数定义中的参数个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var fun = function (arg1, arg2) &#123;&#125;;</div><div class="line">fun.length; // 2</div></pre></td></tr></table></figure></p>
<h2 id="判断数组的方法"><a href="#判断数组的方法" class="headerlink" title="判断数组的方法"></a>判断数组的方法</h2><p>Array.isArray(a) === true<br>a.constructor === Array<br>Object.prototype.toString.call(a) === ‘[object Array]’<br>a instanceof Array  </p>
<h2 id="Array-API"><a href="#Array-API" class="headerlink" title="Array API"></a>Array API</h2><p>array.push() – 将一个或多个新元素添加到数组结尾，返回数组新长度<br>array.unshift() – 将一个或多个新元素添加到数组开始，返回数组新长度<br>array.splice(start, count, item1, …, itemN) – 删除从第一个数为起始、第二个参数为个数的这些元素后，在被截取掉的地方追加一个或多个从第三个参数开始的新元素，操作数组本身<br>array.pop() – 移除最后一个元素并返回该元素值<br>array.shift() – 移除最前一个元素并返回该元素值<br>array.slice(start, end) – 返回第一个参数起始、第二个参数截至、左闭右开的数组，不操作数组本身<br>array.concat() – 将两个数组进行合并，返回数据合并的结果，参数可为元素序列或数组，不操作数据本身<br>array.join() – 将数组元素用参数中的符号连接起来，返回一个字符串<br>array.sort() – 排序，可将排序方法以参数传入，如没有参数，按字符串正序排序的，操作数组本身<br>array.reverse() – 逆序排序，操作数组本身<br>array.indexOf() – 一个参数时，返回元素在数据中第一次出现的索引，比较时进行的是”===”的比较；两个参数时，第一个参数为起始位置，第二个参数为查询元素；<br>array.lastIndexOf() – 类似indefOf，区别是从找到的是数组中最后一个出现的该元素的索引<br>array.every(function(item, index, array){}) – 对数组的每一个元素进行函数的运行，如果函数返回的都是true，最后则返回true；如果有一个元素返回false，最后则返回false <em>（注意，return false可终止循环）</em><br>array.some(function(item, index, array){}) – 对数组的每一个元素进行函数的运行，如果函数有一个返回的是true，最后则返回true；如果都返回false，最后则返回false<br>array.filter(function(item, index, array){}) – 对数组的每一个元素进行函数的运行，将函数返回值为false的过滤掉返回<br>array.forEach(function(item,index,array){}) – 对数组的每一个元素进行函数的运行<br>array.map(function(item,index,array){}) – 对数组的每一个元素进行函数的运行，把函数每次运行的结果按序组成的新数组返回<br>array.reduce(function(prev,cur,index,array){}) – 调用一个函数，pre为上一次调用回调返回的值或者是提供的初始值，第二个参数为当前被处理的元素，第三个参数为当前位置，第四个参数为数组，依次将每次调用的结果替换掉数据中的元素，最后返回一个值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var arr = [0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9]; // [0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9]</div><div class="line">arr.push(10, 11); // 返回12， [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</div><div class="line">arr.unshift(-2, -1); // 返回14，[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</div><div class="line">arr.pop(); // 返回11，[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</div><div class="line">arr.pop(); // 返回10，[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.shift(); // 返回-2，[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.shift(); // 返回-1，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.slice(1, 3); // 返回[1, 2]，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.splice(1, 2, 11, 12); // 返回[1, 2]，[0, 11, 12, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.splice(1, 2, 1, 2, 3); // 返回[11, 12]，[0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.splice(3, 1); // 返回[3]，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.concat([-2, -1]); // 返回[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -1]，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">function sortFun(a, b) &#123;</div><div class="line">  return a - b;</div><div class="line">&#125;</div><div class="line">arr.sort(sortFun); // 返回[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">arr.reverse(); // 返回[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，[9, 8, 7, 6, 5, 4, 3, 3, 2, 1, 0]</div><div class="line">arr.reduce(function(prev, cur, index, array)&#123;return prev + cur;&#125;); // 返回45</div><div class="line">arr.reduce(function(prev, cur, index, array)&#123;return prev + cur;&#125;, 1); // 返回46</div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">详见Array API</a></p>
<h2 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h2><p>String.fromCharCode(num1, …, numN) – 返回使用指定的Unicode值序列创建的字符串<br>String.raw(callSite, …substitutions) – 获取一个模板字符串的原始字面量值的，callSite是一个模板字符串，substitutions表示任意个内插表达式对应的值<br>str.charAt(index) – 返回指定位置的字符<br>str.charCodeAt(index) – 返回指定位置字符的UTF-16代码单元值的数字<br>str.concat(str2, …, strN) –返回原字符串拼接一个或多个字符串的新字符串<br>str.slice(start, end) – 返回start开始、end结束、左闭右开的字符串<br>str.substring(start, end) – 返回较小值开始、较大值结束、左闭右开的字符串<br>str.substr(start, count) – 返回start开始的count个字符组成的字符串<br>str.includes(searchStr[, position]) – 判断从position位置开始包含position是否存在searchStr字符串<br>str.indexOf(searchValue[, fromIndex]) – 返回从fromIndex开始第一次出现searchValue的位置索引，没有返回-1<br>str.lastIndexOf(searchValue[, fromIndex]) – 返回从fromIndex从后向前查找，第一次出现searchValue的位置索引，没有返回-1<br>str.localeCompare() – 返回一个数字(1或-1或0)来指示一个参考字符串是否在排序顺序在前面或后面或与给定字符串相同<br>str.repeat() – 返回包含被连接在一起的指定数量的字符串的副本<br>str.match(regexp) –  返回一个包含了整个匹配结果以及任何括号捕获的匹配结果的 数组，如果没有匹配返回null<br>str.replace(regexp|substr, newSubStr|function) – 返回一个由替换值替换一些或所有匹配的模式后的新字符串，模式可以是一个字符串或者一个正则表达式，function返回值将替换掉第一个参数匹配到的结果<br>str.search(regexp) – 执行正则表达式和String对象之间的一个匹配搜索的索引，没有返回-1<br>str.trim() – 返回删除两端空白字符的字符串<br>str.trimLeft() – 返回删除左端空白字符的字符串<br>str.trimRight() – 返回删除右端空白字符的字符串<br>str.toLocaleLowerCase() – 返回使用本地化映射规则将字符串转化成小写形的式<br>str.toLocaleUpperCase() – 返回使用本地化映射规则将字符串转化成大写的形式<br>str.toLowerCase() – 返回将字符串转化成小写的形式<br>str.toUpperCase() – 返回将字符串转化成大写的形式<br>str.toString() – 返回指定对象的字符串形式<br>str.valueOf() – 返回一个String对象的原始值<br>str.split([separator[, limit]]) – 返回使用separator分隔字符串组成的数组，limit限定返回的分割片段数量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var str = &apos;abcdefghijklmnopqrstuvwxyz&apos;;</div><div class="line">var str2 = String.fromCharCode(65, 66, 67); // 返回ABC</div><div class="line">String.raw `Hi\n!`; // 返回&apos;Hi\n!&apos;</div><div class="line">str.charAt(3); // 返回&apos;d&apos;</div><div class="line">str.charCodeAt(3); // 返回100</div><div class="line">str.concat(str2); // 返回&apos;abcdefghijklmnopqrstuvwxyzABC&apos;</div><div class="line">str.slice(1,5); // 返回&apos;bcde&apos;</div><div class="line">str.substring(1, 3); // 返回&apos;bc&apos;</div><div class="line">str.substring(3, 1); // 返回&apos;bc&apos;</div><div class="line">str.substr(1, 3); // 返回&apos;bcd&apos;</div><div class="line">str.includes(&apos;xyz&apos;); // 返回true</div><div class="line">str.includes(&apos;xyz&apos;, 24); // 返回false</div><div class="line">str.indexOf(&apos;xyz&apos;); // 返回23</div><div class="line">str.indexOf(&apos;xyz&apos;, 24); // 返回-1</div><div class="line">&apos;check&apos;.localeCompare(&apos;against&apos;); // 返回1</div><div class="line">&apos;against&apos;.localeCompare(&apos;check&apos;); // 返回-1</div><div class="line">&apos;check&apos;.localeCompare(&apos;check&apos;); // 返回0</div><div class="line">str.repeat(2); // 返回&apos;abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz&apos;</div><div class="line">var str3 = &apos;number in number&apos;;</div><div class="line">str3.match(&apos;n&apos;); // 返回[&quot;n&quot;, index: 0, input: &quot;number in number&quot;]</div><div class="line">str3.match(/n/); // 返回[&quot;n&quot;, index: 0, input: &quot;number in number&quot;]</div><div class="line">str3.match(/n/g); // 返回[&quot;n&quot;, &quot;n&quot;, &quot;n&quot;]</div><div class="line">str.replace(&apos;abc&apos;, &apos;123&apos;); // 返回&apos;123defghijklmnopqrstuvwxyz&apos;</div><div class="line">str.replace(&apos;abc&apos;, () =&gt; &apos;123&apos;); // 返回&apos;123defghijklmnopqrstuvwxyz&apos;</div><div class="line">str.search(&apos;b&apos;); // 返回1</div><div class="line">str.toLocaleLowerCase(); // 返回&apos;abcdefghijklmnopqrstuvwxyz&apos;</div><div class="line">str.toLocaleUpperCase(); // 返回&apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</div><div class="line">str.toLowerCase(); // 返回&apos;abcdefghijklmnopqrstuvwxyz&apos;</div><div class="line">str.toUpperCase(); // 返回&apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</div><div class="line">var num = 1234;</div><div class="line">num.toString(); // 返回&apos;1234&apos;</div><div class="line">&apos;a|b|c|d|e|f|&apos;.split(&apos;|&apos;); // 返回 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;&quot;]</div><div class="line">&apos;a|b|c|d|e|f|&apos;.split(&apos;|&apos;, 3); // 返回 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="external">详见String API</a></p>
<h2 id="Object-freeze-浅冻结"><a href="#Object-freeze-浅冻结" class="headerlink" title="Object.freeze(浅冻结)"></a>Object.freeze(浅冻结)</h2><p>Object.freeze(object)函数执行下面的操作：</p>
<blockquote>
<p>使对象不可扩展，无法向其添加新属性<br>为对象的所有属性将 configurable 特性设置为 false。在 configurable 为 false 时，无法更改属性的特性且无法删除属性<br>为对象的所有数据属性将 writable 特性设置为 false。当 writable 为 false 时，无法更改数据属性值</p>
</blockquote>
<p>实现深冻结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function deepFreeze(obj) &#123;</div><div class="line">  var propNames = Object.getOwnPropertyNames(obj);</div><div class="line">  propNames.forEach(function(name) &#123;</div><div class="line">    var prop = obj[name];</div><div class="line">    if (typeof prop == &apos;object&apos; &amp;&amp; prop !== null)</div><div class="line">      deepFreeze(prop);</div><div class="line">  &#125;);</div><div class="line">  return Object.freeze(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="函数表达式没有变量提升"><a href="#函数表达式没有变量提升" class="headerlink" title="函数表达式没有变量提升"></a>函数表达式没有变量提升</h2><p>在JavaScript中，变量和函数的声明都会提升到作用域的最前面。函数表达式并没有被提升，这也是函数表达式与函数声明的区别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">  f1(); // ReferenceError: f1 is not a function</div><div class="line">  f2();</div><div class="line">  var f1 = function()&#123;&#125;;</div><div class="line">  function f2()&#123;&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>上面代码中函数声明f2被提升，所以在前面调用f2是没问题的。虽然变量f1也被提升，但f1提升后的值为undefined，其真正的初始值是在执行到函数表达式处被赋予的。所以只有声明是被提升的。</p>
<h2 id="try、catch、finally"><a href="#try、catch、finally" class="headerlink" title="try、catch、finally"></a>try、catch、finally</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    tryStatements // 尝试执行代码块</div><div class="line">&#125; catch (exception) &#123;</div><div class="line">    catchStatements// 捕获错误的代码块</div><div class="line">&#125; finally &#123;</div><div class="line">    finallyStatements// 无论try/catch结果如何都会执行的代码块</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="defineGetter-、-defineSetter"><a href="#defineGetter-、-defineSetter" class="headerlink" title="__defineGetter__、__defineSetter__"></a><code>__defineGetter__、__defineSetter__</code></h2><p>类似面向对象语言中的get和set关键字</p>
<p>有两种方法来定义Getter或Setter方法：</p>
<p>1.在对象初始化时定义<br>2.在对象定义后通过在原型上定义<code>__defineGetter__、__defineSetter__</code>的方法来追加定义</p>
<h2 id="改变上下文的方式"><a href="#改变上下文的方式" class="headerlink" title="改变上下文的方式"></a>改变上下文的方式</h2><p>call – fun.call(context, arg1, … , argn)<br>applay – fun.call(context, [arg1, … , argn])<br>bind – fun.bind(context, arg1, … , argn)  </p>
<h2 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="external">作用域和作用域链</a></h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。  </p>
<p>全局作用域：</p>
<blockquote>
<p>在代码中任何地方都能访问到的对象拥有全局作用域<br>最外层函数和在最外层函数外面定义的变量拥有全局作用域<br>所有末定义直接赋值的变量自动声明为拥有全局作用域<br>所有window对象的属性拥有全局作用域</p>
</blockquote>
<p>局部作用域:</p>
<blockquote>
<p>局部作用域一般只在固定的代码片段内可访问到<br>函数内部定义的变量和函数，也会看到有人把这种作用域称为函数作用域</p>
</blockquote>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>在JavaScript中，函数也是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是[[Scope]]，由ECMA-262标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var g = &apos;全局变量&apos;;</div><div class="line">var f1 = function() &#123;</div><div class="line">  debugger;</div><div class="line">  var part1 = &apos;局部变量1&apos;;</div><div class="line">  var f2 = function() &#123;</div><div class="line">    debugger;</div><div class="line">    var part2 = &apos;局部变量2&apos;;</div><div class="line">  &#125;</div><div class="line">  f2();</div><div class="line">&#125;</div><div class="line">f1();</div><div class="line"></div><div class="line"></div><div class="line">var g = &apos;全局变量&apos;;</div><div class="line">function f1() &#123;</div><div class="line">  debugger;</div><div class="line">  var part1 = &apos;局部变量1&apos;;</div><div class="line">  function f2() &#123;</div><div class="line">    debugger;</div><div class="line">    var part2 = part1;</div><div class="line">  &#125;</div><div class="line">  f2();</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1();</div></pre></td></tr></table></figure>
<p>在函数执行时，会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端，当运行期上下文被销毁，活动对象也随之销毁。</p>
<p>在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。</p>
<p>一般情况下，在运行期上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。因此在程序中应避免使用with语句。</p>
<p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。一旦catch语句执行完毕，作用域链即会返回到之前的状态。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">闭包</a></h2><p>Javascript语言，函数内部可以直接读取全局变量，在函数外部无法读取函数内的局部变量。如果要得到函数f1内的局部变量，就需要在函数f1的内部，再定义一个函数f2，f2可以读取f1中的局部变量，只要把f2返回，就可以在f1外部读取它的内部变量了。<strong>这样的f2函数，就是闭包。</strong>闭包的定义是“能够读取其他函数内部变量的函数”，其实简单理解就是“一个定义在函数中的函数”。注意，f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 函数内部可以直接读取全局变量，在函数外部无法读取函数内的局部变量</div><div class="line">var g = &apos;全局变量&apos;;</div><div class="line">function f1() &#123;</div><div class="line">  console.log(g);</div><div class="line">  var part = &apos;局部变量&apos;;</div><div class="line">&#125;</div><div class="line">// part is not defined</div><div class="line">console.log(part);</div><div class="line"></div><div class="line">// 使用闭包</div><div class="line">function f1() &#123;</div><div class="line">  var part = &apos;局部变量&apos;;</div><div class="line">  function f2() &#123;</div><div class="line">    return part;</div><div class="line">  &#125;</div><div class="line">  return f2;</div><div class="line">&#125;</div><div class="line">var res1 = f1();</div><div class="line">var partW = res1();</div><div class="line">console.log(partW);</div></pre></td></tr></table></figure></p>
<p>闭包可以用在许多地方，它的最大用处有两个：一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<p>使用闭包的注意点：<br>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露，解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。</p>
<h2 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h2><p><a href="http://blog.jobbole.com/9648/" target="_blank" rel="external">理解JavaScript原型</a><br><a href="http://blog.csdn.net/wxw_317/article/details/49617767" target="_blank" rel="external">彻底理解JavaScript原型</a></p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>原型是一个对象，所有对象都可以成为原型，其它对象可以通过它实现属性继承。原型真正魅力体现在多个实例共用一个通用原型的时候。如果试图获取一个主数据类型的原型时，它会被强制转化成了一个对象。</p>
<p>构造函数提供了一种方便的跨浏览器机制，这种机制允许在创建实例时为实例提供一个通用的原型。函数A的原型属性(prototype property )是一个对象，当这个函数被用作构造函数来创建实例时，该函数的原型属性将被作为原型赋值给所有对象实例，即所有实例的原型引用的是函数的原型属性。<strong>即所有实例的原型引用的是函数的原型属性。</strong></p>
<p>如果修改了构造函数的原型属性，那么已经存在的该构造函数的实例将获得构造函数的最新版本。<br>如果修改了构造函数的原型属性所指向的对象，那么新创建实例时实例原型所指向的是新对象，但是这并不会影响已经创建的实例的原型。</p>
<p>要注意区分原型属性和原型对象：  </p>
<blockquote>
<p><code>object.prototype</code> – 原型属性<br><code>Object.getPrototypeOf(object) 、object.__proto__ 、object.constructor.prototype</code> – 原型对象，真正的原型<br>constructor – 是原型对象的属性，对应创建所有指向该原型的实例的构造函数<br>对于所有对象，都有<code>__proto__</code>属性，这个属性对应该对象的原型<br>对于所有函数对象，除了<code>__proto__</code>属性之外，还有<code>prototype</code>属性，当一个函数被用作构造函数来创建实例时，该函数的<code>prototype</code>属性值将被作为原型赋值给所有对象实例（也就是设置实例的<code>__proto__</code>属性）</p>
</blockquote>
<p>通过修改原型可以达到继承的效果，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &#123;&#125;;</div><div class="line">a.__proto__ = Array.prototype;</div><div class="line">a.length; // 0</div></pre></td></tr></table></figure></p>
<img src="/2016/10/20/javascript-base/prototype.png" title="原型示意图">
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>所有的对象在默认的情况下都有一个原型，因为原型本身也是对象，所以每个原型自身又有一个原型，对象的原型指向对象的父，而父的原型又指向父的父，我们把这种通过原型层层连接起来的关系撑为原型链。这条链的末端一般总是默认的对象原型。</p>
<p>所有对象的原型都将追溯到”Object{}”对象，Object对象本身是一个函数对象。如果a的原型属于A的原型链，表达式 a instance of A 值为true。</p>
<p>原型的继承机制是发生在内部且是隐式的。当想要获得一个对象a的属性foo的值，javascript会在原型链中查找foo的存在，如果找到则返回foo的值，否则undefined被返回。如果想要覆盖原型链上的一些属性，就可以直接在对象中定义这些属性。</p>
<p><code>hasOwnProperty</code>是<code>Object.prototype</code>的一个方法，该方法能判断一个对象是否包含自定义属性而不是原型链上的属性，<code>hasOwnProperty</code>是JavaScript中唯一一个处理属性但是不查找原型链的函数。</p>
<p>二维作用域链查找：当代码需要查找一个属性或者描述符的时候，首先会通过作用域链来查找相关的对象；一旦对象被找到，就会根据该对象的原型链来查找属性。</p>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>详见 <a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="external">Javascript 严格模式详解</a></p>
<h2 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a>DOM和BOM</h2><p>参考  <a href="http://www.cnblogs.com/yexiaochai/archive/2013/05/28/3102674.html" target="_blank" rel="external">DOM与BOM</a> 和 <a href="http://www.jb51.net/article/55851.htm" target="_blank" rel="external">BOM和DOM详解</a></p>
<p>javascript 有三部分构成：ECMAScript，DOM和BOM。根据宿主（浏览器）的不同，具体的表现形式也不尽相同，ie和其他的浏览器风格迥异。</p>
<blockquote>
<p>核心（ECMAScript）：描述了JS的语法和基本对象<br>文档对象模型（DOM）：描述了处理网页内容的方法和接口，Document对象<br>浏览器对象模型（BOM）：描述了与浏览器交互的方法和接口，Window对象  </p>
</blockquote>
<h3 id="DOM（Document-Object-Model）"><a href="#DOM（Document-Object-Model）" class="headerlink" title="DOM（Document Object Model）"></a>DOM（Document Object Model）</h3><p>DOM（文档对象模型）是W3C的标准，所有浏览器公共遵守的标准。<br>DOM 是HTML和XML的应用程序接口（API），就是把「文档」当做一个「对象」来看待。<br>DOM 使程序和脚本有能力动态地访问和更新文档的内容、结构以及样式，是平台和语言中立的接口。<br><img src="/2016/10/20/javascript-base/DOM.gif" title="DOM基本操作思维导图"></p>
<h3 id="BOM（Browser-Object-Model）"><a href="#BOM（Browser-Object-Model）" class="headerlink" title="BOM（Browser Object Model）"></a>BOM（Browser Object Model）</h3><p>BOM（浏览器对象模型）是各个浏览器厂商根据DOM在各自浏览器上的实现，表现为不同浏览器定义有差别，实现方式不同。<br>BOM 就是把「浏览器」当做一个「对象」来看待，BOM除了可以访问文档中的组件之外，还可以访问浏览器的组件。<br>BOM 定义了JavaScript可以进行操作的浏览器的各个功能部件的接口，主要处理浏览器窗口和框架，不过通常浏览器特定的JavaScript扩展都被看做BOM的一部分，这些扩展包括：  </p>
<blockquote>
<p>弹出新的浏览器窗口<br>移动、关闭浏览器窗口以及调整窗口大小<br>提供Web浏览器详细信息的定位对象<br>提供用户屏幕分辨率详细信息的屏幕对象<br>对cookie的支持<br>IE扩展了BOM，加入了ActiveXObject类，可以通过JavaScript实例化ActiveX对象</p>
</blockquote>
<img src="/2016/10/20/javascript-base/Window.gif" title="Window对象思维导图">
<p>注意：window 是 BOM 对象，而非 js 对象  </p>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>Javacsript是通过访问BOM对象来访问、控制、修改客户端(浏览器)，由于<strong>BOM的window</strong>包含了document，因此可以直接使用window对象的document属性来访问、检索、修改XHTML文档内容与结构。因为<strong>document对象又是DOM</strong>模型的根节点，也就是DOM的最根本的对象是BOM的window对象的子对象，可以说，BOM包含了DOM，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。<br>区别：DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口。</p>
<img src="/2016/10/20/javascript-base/domAndBom.jpg" title="BOM和DOM的结构关系示意图">
<h2 id="获取字符串实际长度-包含汉字"><a href="#获取字符串实际长度-包含汉字" class="headerlink" title="获取字符串实际长度(包含汉字)"></a>获取字符串实际长度(包含汉字)</h2><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function getStrLength1 (str) &#123;</div><div class="line">  // 获得字符串实际长度，中文2，英文1</div><div class="line">  var realLength = 0, len = str.length, charCode = -1;</div><div class="line">  for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">    charCode = str.charCodeAt(i);</div><div class="line">    if (charCode &gt;= 0 &amp;&amp; charCode &lt;= 128)</div><div class="line">      realLength += 1;</div><div class="line">    else</div><div class="line">      realLength += 2;</div><div class="line">  &#125;</div><div class="line">  return realLength;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function getStrLength2 (str) &#123;</div><div class="line">  // 先把中文替换成两个字节的英文，再计算长度</div><div class="line">  // [\u0391-\uFFE5]匹配双字节字符（汉字+符号）</div><div class="line">  // str.replace(/[^\x00-\xff]/g, &apos;aa&apos;);</div><div class="line">  // [^\x00-\xff]，匹配双字节字符，检查是否是汉字或者全角</div><div class="line">  return str.replace(/[\u0391-\uFFE5]/g,&quot;aa&quot;).length;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><p>关联数组是指每个元素自定义字符串的下标的数组，由于是自定义的下标所以关联数组的length属性没有效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 直接定义数组</div><div class="line">myhash = &#123;&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;: &quot;val2&quot; &#125;</div><div class="line"></div><div class="line">// 用Array 定义数组</div><div class="line">myhash = new Array();</div><div class="line">myhash[&quot;key1&quot;] = &quot;val1&quot;;</div><div class="line">myhash[&quot;key2&quot;] = &quot;val2&quot;;</div></pre></td></tr></table></figure>
<p>感觉关联数组和对象基本上一样，目前只看到<strong>可以用<code>obj.key1</code>引用对象的属性，但不能<code>myhash.key1</code>这样引用数组的元素</strong>这一个区别。</p>
<h2 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h2><p>发现javascript中的对象，如果key值为整数或整数字符，则该对象会的属性会按key值排序，使用时要注意。</p>
<img src="/2016/10/20/javascript-base/obj1.png" title="对象属性">
<h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><h3 id="JSON-stringify-value-replacer-space"><a href="#JSON-stringify-value-replacer-space" class="headerlink" title="JSON.stringify(value [, replacer] [, space])"></a>JSON.stringify(value [, replacer] [, space])</h3><ul>
<li>value：是必选字段。就是你输入的对象，比如数组，类等。 </li>
<li>replacer：这个是可选的。它又分为2种方式，一种是数组，第二种是方法。 <ul>
<li>情况一：replacer为数组时，通过后面的实验可以知道，它是和第一个参数value有关系的。一般来说，系列化后的结果是通过键值对来进行表示的。 所以，如果此时第二个参数的值在第一个存在，那么就以第二个参数的值做key，第一个参数的值为value进行表示，如果不存在，就忽略。</li>
<li>情况二：replacer为方法时，那很简单，就是说把系列化后的每一个对象（记住是每一个）传进方法里面进行处理。 </li>
</ul>
</li>
<li>space：就是用什么来做分隔符的。<ul>
<li>如果省略的话，那么显示出来的值就没有分隔符，直接输出来 。</li>
<li>如果是一个数字的话，那么它就定义缩进几个字符，当然如果大于10 ，则默认为10，因为最大值为10。</li>
<li>如果是一些转义字符，比如“\t”，表示回车，那么它每行一个回车。 </li>
<li>如果仅仅是字符串，就在每行输出值的时候把这些字符串附加上去。当然，最大长度也是10个字符。 </li>
</ul>
</li>
</ul>
<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>将字符串转为json对象，不允许有尾逗号</p>
<h2 id="操作event对象"><a href="#操作event对象" class="headerlink" title="操作event对象"></a>操作event对象</h2><p>在我的项目中，想要点击Grid行的时候有点击行首部Checkbox的效果，对我来说最简单的方式就是在点击行的事件中调用点击Checkbox的方法handleChecked，但handleChecked需要event参数并且要取event.target.checked值。于是我克隆了一个event对象，显示的给它的target.checked赋值，并使用下面的语句给event的target赋checked属性，即可达到想要的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.target.setAttribute(&apos;checked&apos;, true);</div><div class="line">event.target.getAttribute(&apos;checked&apos;, true);</div></pre></td></tr></table></figure></p>
<h2 id="setTimeout-setInterval-第三个参数"><a href="#setTimeout-setInterval-第三个参数" class="headerlink" title="setTimeout/setInterval 第三个参数"></a>setTimeout/setInterval 第三个参数</h2><p>setTimeout/setInterval 常用的都是传入两个参数，callback 函数和 time 延迟时间，第三个参数开始以及后面的参数，都会以作为参数传入到 callback 函数中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function func(arg1, arg2) &#123;</div><div class="line">  console.log(arg1, arg2);</div><div class="line">&#125;</div><div class="line">setTimeout(func, 1000, &apos;first&apos;, &apos;second&apos;); // 输出 first second</div></pre></td></tr></table></figure></p>
<h2 id="如何让setTimeout立即执行"><a href="#如何让setTimeout立即执行" class="headerlink" title="如何让setTimeout立即执行"></a>如何让setTimeout立即执行</h2><p>注意，不是time, 而是time(), 这样浏览器解码的时候扫到这一行的代码直接就执行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function time()&#123;</div><div class="line">  console.log(&quot;it&apos;s A good question&quot;);</div><div class="line">&#125;</div><div class="line">setTimeOut( time(), 100000 );</div></pre></td></tr></table></figure></p>
<h2 id="实现鼠标双击事件不触发单击事件"><a href="#实现鼠标双击事件不触发单击事件" class="headerlink" title="实现鼠标双击事件不触发单击事件"></a>实现鼠标双击事件不触发单击事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var timeFunName = null;</div><div class="line">// 单击事件处理</div><div class="line">$(&quot;button&quot;).bind(&quot;click&quot;, function () &#123;         </div><div class="line">  // 取消上次延时未执行的方法      </div><div class="line">  clearTimeout(timeFunName);</div><div class="line">  // 延时300毫秒执行单击</div><div class="line">  timeFunName = setTimeout(function () &#123;</div><div class="line">    // TODO 执行单击操作</div><div class="line">  &#125;, 300);</div><div class="line">&#125;);</div><div class="line">// 双击事件处理</div><div class="line">$(&quot;button&quot;).bind(&quot;dblclick&quot;, function () &#123;</div><div class="line">  // 取消上次延时未执行的方法</div><div class="line">  clearTimeout(timeFunName);</div><div class="line">  // TODO 执行双击操作</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function FuncA(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">&#125;;</div><div class="line">var a = new FuncA(&apos;this is functon A&apos;);</div><div class="line">console.log(a.name); // 输出 this is functon A</div></pre></td></tr></table></figure>
<p>new操作在背后做了如下操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 创建一个object，假设叫x</div><div class="line">var x = &#123;&#125;; </div><div class="line">// 把A.prototype赋给x.__proto__</div><div class="line">x.__proto__ = FuncA.prototype;</div><div class="line">// 调用A.call(x)</div><div class="line">var result = FuncA.call(x);</div><div class="line">// 如果result是对象则返回，否则返回空对象x</div><div class="line">if (typeof(result) === &quot;object&quot;)&#123;</div><div class="line">  return result;</div><div class="line">&#125;</div><div class="line">return x;</div></pre></td></tr></table></figure>
<p>因此也有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function FuncB() &#123;</div><div class="line">  return &#123;</div><div class="line">    name: &apos;name&apos;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var b = new FuncB();</div><div class="line">console.log(b.name); // 输出 name</div><div class="line">function FuncC() &#123;</div><div class="line">  return &apos;name&apos;;</div><div class="line">&#125;</div><div class="line">var c = new FuncC();</div><div class="line">console.log(c); // 输出 空对象</div></pre></td></tr></table></figure>
<h2 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h2><p>parseInt将字符串(String)类型转为整数类型，结果是整数或者NaN。从头解析string为整数，在遇到不能解析的字符时就返回已经解析的整数部分，如果第一个字符就不能解析，就直接返回NaN。只有对String类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是NaN。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;123abc&apos;); // 123</div><div class="line">parseInt(&apos;8e-10&apos;); // 8</div></pre></td></tr></table></figure></p>
<p>Number() 函数，不用new操作符，把对象(Object)的值转换为数字，结果是数字（整数，小数等）或者NaN。如果使用new操作符，返回的是Number对象。如果无法转换为数字，就返回NaN。强制类型转换可以访问特定的值，即使它是另一种类型的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Number(&apos;123abc&apos;); // NaN</div><div class="line">Number(&apos;8e-10&apos;); // 8e-10</div></pre></td></tr></table></figure></p>
<p><code>+</code> 操作符可以将字符串转化为数字，如 <code>+&#39;123&#39;</code> 返回是123。和 Number() 一样，<code>+&#39;123a&#39;</code> 返回是 NaN；Number() 和 + 转换数字速度要比 parseInt() 快的多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;123&apos; - 0; // 123</div><div class="line">+&apos;123&apos;; // 123</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-选择器]]></title>
      <url>https://zhulichao.github.io/2016/10/15/css-selector/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><p>*{ margin:0; padding: 0; }</p>
<h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><p>div { background: grey; }</p>
<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p>#id { background: grey; }</p>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>.class { background: grey; }<br>.class1.class2 { background: grey; } // 需要同时具有指定的类才能匹配</p>
<h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><p>selector1,selector2 { background: grey; } // 匹配为selector1和selector2的所有元素</p>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>E F { background: grey; } // 匹配E的元素包含的所有匹配F的元素</p>
<h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><p>E&gt;F { background: grey; } // 匹配E的元素包含的匹配F的直接子元素</p>
<h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h2><p>E+F { background: grey; } // 匹配E的元素后紧挨着的匹配F的元素</p>
<h2 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h2><p>E~F { background: grey; } // 匹配E的元素后的所有匹配F的元素</p>
<h2 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h2><p>:link 未被访问过的超链接<br>:visited 已被访问过的超链接<br>:hover 鼠标停留<br>:ative 被激活，常用于锚点和按钮上<br>:focus 获得焦点  </p>
<p>锚点伪类的设置必须遵守”link-visited-hover-active”</p>
<h2 id="目标伪类选择器"><a href="#目标伪类选择器" class="headerlink" title="目标伪类选择器"></a>目标伪类选择器</h2><p>只有存在URL指向该匹配元素时，样式效果才会生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 点击按钮时，跳到target位置，target背景为红色</div><div class="line">&lt;div id=&quot;target&quot;&gt;target&lt;/div&gt;</div><div class="line">&lt;a href=&quot;#target&quot; class=&quot;btn&quot;&gt;View project on GitHbu&lt;/a&gt;</div><div class="line">...</div><div class="line">#target:target &#123;</div><div class="line">  background: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="语言伪类选择器"><a href="#语言伪类选择器" class="headerlink" title="语言伪类选择器"></a>语言伪类选择器</h2><p>需要指定html或bogy的lang属性<br><code>&lt;html lang=&quot;en-US&quot;&gt;或&lt;body lang=&quot;fr&quot;&gt;</code><br>E:lang(language) 表示选择匹配E的所有元素，且匹配元素指定了lang属性，而且其值为language。</p>
<h2 id="UI元素状态伪类选择器"><a href="#UI元素状态伪类选择器" class="headerlink" title="UI元素状态伪类选择器"></a>UI元素状态伪类选择器</h2><p>:checked 选中状态，适用复选或单选<br>:enabled 启用状态，匹配启用的表单元素<br>:disabled 不可用状态，匹配禁用的表单元素  </p>
<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>E:first-child 作为父元素的第一个子元素的元素E，与E:nth-child(1)相同<br>E:first-child 作为父元素的最后一个子元素的元素E，与E:nth-last-child(1)相同<br>E:root 选择匹配元素E所在文档的根元素，在HTML文档中，根元素始终是html，此时该选择器与html类型选择器匹配的内容相同<br>E F:nth-child(n) 选择父元素E的第n个子元素F，n的起始值为1<br>E F:nth-last-child(n) 选择父元素E的倒数第n个子元素F<br>E:nth-of-type(n) 选择父元素内具有指定类型的第n个E元素<br>E:nth-last-of-type(n) 选择父元素具有指定类型的倒数第n个E元素<br>E:first-of-type 选择父元素内具有指定类型的第一个E元素，与E:nth-of-type(1)相同<br>E:last-of-type 选择父元素内具有指定类型的最后一个E元素，与E:nth-last-of-type(1)相同<br>E:only-child 选择父元素只包含一个子元素，且该子元素匹配E元素<br>E:only-of-type 选择父元素只包含一个同类型的子元素，且该子元素匹配E元素<br>E:empty 选择没有子元素的元素，且该元素也不包含任何文本节点</p>
<h2 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h2><p>:not(footer){} // 选择页面中所有元素，除了”footer”元素</p>
<h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p><strong>双冒号与单冒号在CSS3中主要用来区分伪类和伪元素</strong></p>
<p>::first-letter 用来选择文本块的第一个字母<br>::first-line 用来选择文本块的第一行<br>::before 和 ::after 需配合content属性，不是指存在与标记中的内容，而是可以插入额外内容的位置<br>::selection 用来匹配选中的文本，紧接收background和color属性  </p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>E[attr] 选择匹配具有属性attr的E元素<br>E[attr=val] 选择匹配具有属性attr的E元素，且attr属性值为val<br>E[attr|=val] 选择匹配E元素，且E元素定义了属性attr，attr属性值是一个具有val或者以val-开始的属性值<br>E[attr~=val] 选择匹配E元素，且E元素定义了属性attr，attr属性值具有多个空格分隔的值，其中一个值等于val<br>E[attr*=val] 选择匹配元素E，且E元素定义了属性attr，其属性值任意位置包含了val<br>E[attr^=val] 选择匹配元素E，且E元素定义了属性attr，其属性值以val开头<br>E[attr$=val] 选择匹配元素E，且E元素定义了属性attr，其属性值以val结尾  </p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-测试]]></title>
      <url>https://zhulichao.github.io/2016/10/15/react-test/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前端自动化单元测试"><a href="#前端自动化单元测试" class="headerlink" title="前端自动化单元测试"></a>前端自动化单元测试</h2><p>使用<strong>Karma + Mocha + Chai + Sinon + Enzyme</strong>测试React + Redux的web应用，还可能用到Jsdom</p>
<hr>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>Karma 测试过程管理工具，<strong>最重要的是可以 webpack 预处理</strong></p>
<p><a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a> 测试框架，提供describe、it等函数</p>
<p><a href="http://chaijs.com/api/" target="_blank" rel="external">Chai</a> 断言库，提供expect等函数</p>
<p><a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a> 是一个mock框架，可以对任何对象进行mock</p>
<p><a href="http://airbnb.io/enzyme/" target="_blank" rel="external">Enzyme</a> React测试工具，是对React官方测试工具 react-addons-test-utils 的封装</p>
<p>Jsdom 提供DOM环境，即window、document和navigator对象</p>
<hr>
<h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p><a href="http://www.jianshu.com/p/6726c0410650" target="_blank" rel="external">前端自动化单元测试初探</a>– 主要介绍Karma配置</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html" target="_blank" rel="external">React 测试入门教程</a>– 主要介绍React组件怎么测试</p>
<p><a href="https://segmentfault.com/a/1190000006678143?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">React+Redux单元测试一小时入门</a>、<a href="https://github.com/cody-lettau/react-redux-starter" target="_blank" rel="external">参考代码</a>– 主要介绍组件、action、reduce怎么测试</p>
<h3 id="Karma-Webpack配置"><a href="#Karma-Webpack配置" class="headerlink" title="Karma+Webpack配置"></a>Karma+Webpack配置</h3><ul>
<li>依赖包括</li>
</ul>
<figure class="highlight plain"><figcaption><span>install --save-dev 如下依赖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">chai</div><div class="line">enzyme</div><div class="line">isparta-instrumenter-loader</div><div class="line">jsdom</div><div class="line">karma</div><div class="line">karma-chai</div><div class="line">karma-chrome-launcher</div><div class="line">karma-coverage</div><div class="line">karma-mocha</div><div class="line">karma-sinon</div><div class="line">karma-sinon-chai</div><div class="line">karma-webpack</div><div class="line">lodash</div><div class="line">mocha</div><div class="line">null-loader</div><div class="line">react-addons-test-utils</div><div class="line">sinon</div><div class="line">sinon-chai</div><div class="line">webpack-node-externals</div></pre></td></tr></table></figure>
<ul>
<li>karma.conf.js 文件如下</li>
</ul>
<figure class="highlight plain"><figcaption><span>init 生成karma.conf.js修改后</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const webpackconfig = require(&apos;./webpack.config.js&apos;);</div><div class="line">module.exports = function(config) &#123;</div><div class="line">    config.set(&#123;</div><div class="line">        basePath: &apos;&apos;,</div><div class="line">        frameworks: [&apos;mocha&apos;,&apos;sinon&apos;,&apos;chai&apos;,&apos;sinon-chai&apos;],</div><div class="line">        files: [</div><div class="line">          &apos;./test/*.js&apos;</div><div class="line">        ],</div><div class="line">        exclude: [</div><div class="line">        ],</div><div class="line">        preprocessors: &#123;</div><div class="line">            &apos;./src/containers/*&apos;: [&apos;coverage&apos;],</div><div class="line">            &apos;./test/*.js&apos;: [&apos;webpack&apos;]</div><div class="line">        &#125;,</div><div class="line">        reporters: [&apos;progress&apos;, &apos;coverage&apos;],</div><div class="line">        port: 9876,</div><div class="line">        colors: true,</div><div class="line">        logLevel: config.LOG_INFO,</div><div class="line">        autoWatch: true,</div><div class="line">        browsers: [&apos;Chrome&apos;],</div><div class="line">        singleRun: false,</div><div class="line">        concurrency: Infinity,</div><div class="line">        webpack: webpackconfig</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>webpack配置文件需要添加如下内容，否则使用enzyme报错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">externals: &#123;</div><div class="line">    &apos;jsdom&apos;: &apos;window&apos;,</div><div class="line">    &apos;cheerio&apos;: &apos;window&apos;,</div><div class="line">    &apos;react/addons&apos;: true,</div><div class="line">    &apos;react/lib/ExecutionEnvironment&apos;: true,</div><div class="line">    &apos;react/lib/ReactContext&apos;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试代码样例"><a href="#测试代码样例" class="headerlink" title="测试代码样例"></a>测试代码样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; Breadcrumb &#125; from &apos;antd&apos;;</div><div class="line">// 测试使用模块</div><div class="line">import &#123; shallow , mount, render &#125; from &apos;enzyme&apos;;</div><div class="line">// 待测试组件</div><div class="line">import NavPath from &apos;../src/components/NavPath&apos;;</div><div class="line"></div><div class="line">describe(&apos;NavPath Shallow&apos;, function () &#123;</div><div class="line">    it(&apos;Component Test&apos;, function () &#123;</div><div class="line">        const breadCrumb = [</div><div class="line">            &#123;key: &apos;0qqnL2f1J42bV3I9Hzavkgg%|%请假管理&apos;, name: &apos;请假管理&apos;&#125;,</div><div class="line">            &#123;key: &apos;0TT3DR6jt6Fogaimc3l3Rr%|%外出请假申请单&apos;, name: &apos;外出请假申请单&apos;&#125;,</div><div class="line">        ];</div><div class="line">        const context = &#123;</div><div class="line">            router: &#123;&#125;,</div><div class="line">            location: &#123;&#125;,</div><div class="line">        &#125;;</div><div class="line">        const navPath = shallow(&lt;NavPath breadCrumb=&#123;breadCrumb&#125; /&gt;, &#123; context &#125;);</div><div class="line">        expect(navPath.find(Breadcrumb.Item).length).to.equal(2);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">karma start</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-零散知识]]></title>
      <url>https://zhulichao.github.io/2016/09/28/css-scattered/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h2><p>段落的第一行缩进</p>
<h2 id="css-hack"><a href="#css-hack" class="headerlink" title="css hack"></a>css hack</h2><p><a href="http://baike.baidu.com/view/1119452.htm?subLemmaId=1119452&amp;fromenter=CSShack" target="_blank" rel="external">css hack</a> 目的就是使你的CSS代码兼容不同的浏览器</p>
<h2 id="CSS-border实现各个方向等腰直角三角"><a href="#CSS-border实现各个方向等腰直角三角" class="headerlink" title="CSS border实现各个方向等腰直角三角"></a>CSS border实现各个方向等腰直角三角</h2><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;border_cort&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;border_corb&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;border_corl&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;border_corr&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.border_cort, .border_corr, .border_corb, .border_corl &#123;</div><div class="line">    display: inline-block;</div><div class="line">    width: 0;</div><div class="line">    height: 0;</div><div class="line">    border-width: 6px;</div><div class="line">    overflow: hidden;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div><div class="line">.border_cort &#123;</div><div class="line">    border-color: #333 transparent transparent;</div><div class="line">    border-style: solid dotted dotted;</div><div class="line">&#125;</div><div class="line">.border_corr &#123;</div><div class="line">    border-color: transparent #333 transparent transparent;</div><div class="line">    border-style: dotted solid dotted dotted;</div><div class="line">&#125;</div><div class="line">.border_corb &#123;</div><div class="line">    border-color: transparent transparent #333;</div><div class="line">    border-style: dotted dotted solid;</div><div class="line">&#125;</div><div class="line">.border_corl &#123;</div><div class="line">    border-color: transparent transparent transparent #333;</div><div class="line">    border-style: dotted dotted dotted solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2016/09/28/css-scattered/transparent.png" title="结果如图">
<img src="/2016/09/28/css-scattered/transparent2.png" title="原理如图">
<h2 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h2><p>使用!important定义的样式拥有最高的优先级，IE6不支持，会按正常优先级显示，可以解决一些浏览器的兼容性问题。</p>
<h2 id="两个div显示在一行，分居左右"><a href="#两个div显示在一行，分居左右" class="headerlink" title="两个div显示在一行，分居左右"></a>两个div显示在一行，分居左右</h2><p>对两个div元素A、B都添加diaplay:inline-block属性，对居右元素B添加float:right属性，在B元素的后面需添加一个div并有clear:both属性用于清除float。</p>
<h2 id="min-height"><a href="#min-height" class="headerlink" title="min-height"></a>min-height</h2><p>由于某些原因导致相同元素不同高度，在IE浏览器下导致页面布局发生变化(有空位)，可以给这些相同元素添加min-height属性，取值大于等于这些不同高度中的最大值，即可是页面布局恢复正常。</p>
<h2 id="必填样式"><a href="#必填样式" class="headerlink" title="必填样式"></a>必填样式</h2><p>常见的必填样式都是在label前添加一个红色星号，可以在判断该项为必填项时给label添加一个class如notNull，并使用伪类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.notNull::before &#123;</div><div class="line">    color: red;</div><div class="line">    content: &quot;*&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h2><p>top: 50%;<br>left: 50%;<br>margin-top: 50px;// 居中元素的高度/2<br>margin-left: 50px;// 居中元素的宽度/2</p>
<p>img {<br>    display: block;<br>    margin: 0 auto;<br>}</p>
<h2 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h2><p>text-align: center; // 水平居中<br>line-height: @divHeight; // 垂直居中，属性值等于文字所在块的高度</p>
<h2 id="word-break属性"><a href="#word-break属性" class="headerlink" title="word-break属性"></a>word-break属性</h2><p>word-break属性规定自动换行的处理方法，通过使用该属性，可以让浏览器实现在任意位置的换行。</p>
<blockquote>
<p>normal，使用浏览器默认的换行规则<br>break-all，允许在单词内换行<br>keep-all，只能在半角空格或连字符处换行</p>
</blockquote>
<img src="/2016/09/28/css-scattered/word-break.png" title="word-break属性">
<h2 id="word-wrap属性"><a href="#word-wrap属性" class="headerlink" title="word-wrap属性"></a>word-wrap属性</h2><p>word-wrap属性允许长单词或URL地址换行到下一行。</p>
<blockquote>
<p>normal，只在允许的断字点换行（浏览器保持默认处理）<br>break-word，在长单词或URL地址内部进行换行</p>
</blockquote>
<img src="/2016/09/28/css-scattered/word-wrap.png" title="word-wrap属性">
<h2 id="图片未加载完成的占位"><a href="#图片未加载完成的占位" class="headerlink" title="图片未加载完成的占位"></a>图片未加载完成的占位</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.imgWrapper &#123;</div><div class="line">  position: relative;</div><div class="line">  height: 0;</div><div class="line">  padding-top: 190%; // 图片高度 / 图片宽度 * 100%</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">img &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 0;</div><div class="line">  width: 100vw;</div><div class="line">  height: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取滚动条宽度"><a href="#获取滚动条宽度" class="headerlink" title="获取滚动条宽度"></a>获取滚动条宽度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置一个不可见的div，查看设置 scroll 前后的宽度差</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollWidth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"DIV"</span>);</div><div class="line">    oDiv.style.cssText = <span class="string">"position:absolute;top:-1000px;width:100px;height:100px; overflow:hidden;"</span>;</div><div class="line">    <span class="keyword">const</span> noScroll = <span class="built_in">document</span>.body.appendChild(oDiv).clientWidth;</div><div class="line">    oDiv.style.overflowY = <span class="string">"scroll"</span>;</div><div class="line">    <span class="keyword">const</span> scroll = oDiv.clientWidth;</div><div class="line">    <span class="built_in">document</span>.body.removeChild(oDiv);</div><div class="line">    <span class="keyword">return</span> noScroll-scroll;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="英文单词使用连字符换行"><a href="#英文单词使用连字符换行" class="headerlink" title="英文单词使用连字符换行"></a>英文单词使用连字符换行</h2><p>设置标签的 <code>lang=&quot;en&quot;</code>，css 中添加 <code>hyphens: auto;</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            p &#123;</div><div class="line">                width: 80px;</div><div class="line">                border: 1px solid black;</div><div class="line">                hyphens: auto;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>An extremely long English word<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<img src="/2016/09/28/css-scattered/hyphens.png" title="hyphens 属性">]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-布局基础2]]></title>
      <url>https://zhulichao.github.io/2016/09/21/css-layout2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><p><strong>绝对长度单位</strong></p>
<p>in（英寸）、cm（厘米）、mm（毫米）、pt（磅）、pc（pica）  </p>
<p><strong>相对长度单位</strong>  </p>
<ul>
<li>px 像素  </li>
<li>em 是相对于文字大小的值，实际大小是受到字体尺寸影响的。例如：定义某个元素的文字大小为12pt，那么，对于这个元素来说1em就是12pt。  </li>
<li>ex 和em类似，指的是相对于文本中字母x的高度，因为不同的字体的x的高度是不同的，所以ex的实际大小，受到字体和字体尺寸两个因素的影响。 </li>
<li>% 相对于包含块的计量单位  </li>
<li>vw 基于视窗宽度的大小，10vw表示视窗宽度的10%</li>
<li>vh 基于视窗高度的大小，10vh表示视窗高度的10%</li>
</ul>
<h2 id="替换元素和非替换元素"><a href="#替换元素和非替换元素" class="headerlink" title="替换元素和非替换元素"></a>替换元素和非替换元素</h2><p><strong>替换元素</strong></p>
<p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容，如<code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code></p>
<p><strong>非替换元素</strong></p>
<p>大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来，如<code>&lt;p&gt;</code></p>
<h2 id="块级元素和行内元素"><a href="#块级元素和行内元素" class="headerlink" title="块级元素和行内元素"></a>块级元素和行内元素</h2><p><strong>块级元素</strong></p>
<p>最明显的特征就是独自占领一行，自动充满父级元素的内容区域，如<code>div、p、form、header、footer、section</code><br>通过CSS设定了浮动（float）以及设定显示（display）属性为’block’或’list-item’的元素都是块级元素</p>
<p><strong>行内元素</strong></p>
<p>允许左右都可以有元素，最常见的就是<a></a><br>通过display:’inline’设置以后都会变成行内元素</p>
<h2 id="浏览器的标准模式和怪异模式"><a href="#浏览器的标准模式和怪异模式" class="headerlink" title="浏览器的标准模式和怪异模式"></a>浏览器的标准模式和怪异模式</h2><ul>
<li>标准模式(strict mode)：浏览器按W3C标准解析执行代码</li>
<li><p>怪异模式(quirks mode)：使用浏览器自己的方式解析执行代码</p>
<p>  浏览器解析时到底使用标准模式还是怪异模式，与网页中的DTD声明直接相关，DTD声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略DTD声明,将使网页进入怪异模式(quirks mode)。  </p>
</li>
</ul>
<p>怪异模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;重庆PHP&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h3&gt;重庆PHP，最专业的PHP社区&lt;/h3&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>标准模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;重庆PHP&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h3&gt;重庆PHP，最专业的PHP社区&lt;/h3&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="margin属性"><a href="#margin属性" class="headerlink" title="margin属性"></a>margin属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">margin:2cm 4cm 3cm 4cm;// 值分别代表上外边距、右外边距、下外边距、左外边距</div><div class="line">margin:10px 5px 15px;// 值分别代表上外边距、右外和左外边距、下外边距</div><div class="line">margin:10px 5px;// 值分别代表上外和下外边距、右外和左外边距</div><div class="line">margin:10px;// 值代表四个外边据</div></pre></td></tr></table></figure>
<p>可选的属性值如下：  </p>
<blockquote>
<p><strong>auto:</strong> 浏览器计算外边距<br><strong>length:</strong> 具体单位计的外边距值，比如<code>px、cm</code>等，默认值是 0px<br><strong>%:</strong> 基于父元素的宽度的百分比<br><strong>inherit:</strong> 从父元素继承  </p>
</blockquote>
<p>说明如下：  </p>
<ul>
<li>块级元素的垂直相邻外边距会合并，由于块级元素独占一行，不考虑水平外边距 </li>
<li>行内元素实际上不占上下外边距，左右外边距不会合并</li>
<li>浮动元素的外边距也不会合并  </li>
<li>允许指定负的外边距值，不过使用时要小心</li>
</ul>
<p>设置块级元素的 width 可以阻止它从左到右撑满容器，再设置左右外边距为 auto 来使其水平居中。但是，当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。此时可以使用 max-width 替代 width 可以使浏览器更好地处理小窗口的情况。</p>
<h2 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h2><p>可选的属性值如下： </p>
<blockquote>
<p><strong>left:</strong> 元素向左浮动<br><strong>right:</strong> 元素向右浮动<br><strong>none(默认):</strong> 元素不浮动，并会显示在其在文本中出现的位置<br><strong>inherit:</strong> 从父元素继承 </p>
</blockquote>
<p>说明如下：</p>
<ul>
<li>用来定义元素在哪个方向浮动，浮动元素会生成一个块级框，而不论它本身是何种元素  </li>
<li>这个属性总应用于图像，使文本围绕在图像周围</li>
<li>如果浮动非替换元素，如div，则要指定一个明确的宽度；否则，它们会按元素内容尽可能地窄</li>
<li>如果行内有极少的空间可供浮动元素，那么这个元素会跳至下一行，直到某一行拥有足够的空间为止</li>
<li>如果浮动元素超出父容器，在父容器添加overflow:auto即可根据浮动的元素撑开容器</li>
<li>clear属性可清除浮动，值可为left或right，分别表示清除向左浮动或向右浮动</li>
<li>float只是脱离了文档流的dom空间但是还占据着文字空间</li>
</ul>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="W3C标准盒模型"><a href="#W3C标准盒模型" class="headerlink" title="W3C标准盒模型"></a>W3C标准盒模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">外盒尺寸计算(元素空间尺寸)</div><div class="line">element 空间高度 = 内容高度 + 内距 + 边框 + 外距</div><div class="line">element 空间宽度 = 内容宽度 + 内距 + 边框 + 外距</div><div class="line">内盒尺寸计算(元素大小)</div><div class="line">element 高度 = 内容高度 + 内距 + 边框 （height为内容高度）</div><div class="line">element 宽度 = 内容宽度 + 内距 + 边框 （width为内容宽度）</div></pre></td></tr></table></figure>
<h3 id="IE传统盒模型-IE6以下"><a href="#IE传统盒模型-IE6以下" class="headerlink" title="IE传统盒模型(IE6以下)"></a>IE传统盒模型(IE6以下)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">外盒尺寸计算(元素空间尺寸)</div><div class="line">element 空间高度 = 内容高度 + 外距（height包含了元素内容高度、边框、内距）</div><div class="line">element 空间宽度 = 内容宽度 + 外距（height包含了元素内容高度、边框、内距）</div><div class="line">内盒尺寸计算(元素大小)</div><div class="line">element 高度 = 内容高度（height包含了元素内容高度、边框、内距）</div><div class="line">element 宽度 = 内容宽度（width包含了元素内容宽度、边框、内距）</div></pre></td></tr></table></figure>
<p>边框和内距都包含在宽度或高度内！！！</p>
<h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><p>可选的属性值如下：</p>
<blockquote>
<p><strong>content-box(默认):</strong> 维持W3C的标准盒模型<br><strong>border-box:</strong> 维持IE的传统盒模型<br><strong>padding-box(Firefox浏览器):</strong> 指定元素的宽度或高度包含内容的宽度或高度和内距<br><strong>inherit:</strong> 从父元素继承</p>
</blockquote>
<p>说明如下：</p>
<ul>
<li>定义盒模型的尺寸解析方式，主要目的是控制元素的总宽度  </li>
</ul>
<h2 id="outline属性"><a href="#outline属性" class="headerlink" title="outline属性"></a>outline属性</h2><ul>
<li><p>外轮廓outline的效果和边框border的效果极其相似，不同之处在于outline不占用网页布局空间，不一定是矩形，属于一种动态样式，可以向内扩展。</p>
</li>
<li><p>将outline属性设置在:focus上，可以实现在元素获取到焦点或者被激活时呈现边框的效果。</p>
</li>
<li><p>为了给元素添加边框效果又不影响页面布局，可以使用outline属性。</p>
</li>
</ul>
<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>可选的属性值如下：</p>
<blockquote>
<p><strong>static(默认):</strong> 元素不会被特殊的定位，top, right, bottom, left 和 z-index 属性无效。<br><strong>relative:</strong> 相对定位，相对于其在普通流中的正常位置进行定位，元素仍保持其未定位前的形状，它原本所占的空间仍保留。<br><strong>absolute:</strong> 绝对定位，不为元素预留空间。元素相对于最近的非static定位的祖先元素来定位。<br><strong>fixed:</strong> 固定定位，不为元素预留空间。元素会相对于视窗来来定位，当出现滚动条时，对象不会随着滚动。<br><strong>inherit:</strong> 从父元素继承。</p>
</blockquote>
<p>说明如下：</p>
<p>position: sticky，类似relative和fixed的合体，当目标区域在屏幕中可见时，它的行为就像relative; 当页面滚动超出目标区域时，它的行为就像fixed，固定在目标位置。目前支持该属性的浏览器比较少。</p>
<h2 id="top、right、bottom、left-属性"><a href="#top、right、bottom、left-属性" class="headerlink" title="top、right、bottom、left 属性"></a>top、right、bottom、left 属性</h2><p>top、right、bottom、left 分别定义了定位元素上、右、下、左外边距边界与其包含块右边界之间的偏移。可选的取值如下：</p>
<blockquote>
<p><strong>auto(默认):</strong> 通过浏览器计算的位置<br><strong>%:</strong> 设置以包含元素的百分比计的位置，可使用负值<br><strong>length:</strong> 使用 px、cm 等单位设置元素的位置，可使用负值<br><strong>inherit:</strong> 规定应该从父元素继承属性的值</p>
</blockquote>
<p>说明如下：</p>
<p>对于 static 元素，为 auto。对于相对定义元素，如果 top 和 bottom 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；如果二者都不是 auto，bottom 将取 top 值的相反数；当 left 和 right​ ​​​​​同时指定时，如果容器是从左到右时，left的值会被优先设定，如果容器是从右到左时，right的值会被优先设定。</p>
<h2 id="overflow-属性"><a href="#overflow-属性" class="headerlink" title="overflow 属性"></a>overflow 属性</h2><p>可选的属性值如下：</p>
<blockquote>
<p><strong>visible(默认):</strong> 内容不会被修剪，会呈现在元素框之外<br><strong>hidden:</strong> 内容会被修剪，并且其余内容是不可见的<br><strong>scroll:</strong> 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容<br><strong>auto:</strong> 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容<br><strong>inherit:</strong> 从父元素继承</p>
</blockquote>
<p>说明如下：</p>
<p>如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。</p>
<h2 id="clip-属性"><a href="#clip-属性" class="headerlink" title="clip 属性"></a>clip 属性</h2><p>用于裁剪绝对定位元素，可选的属性值如下：</p>
<blockquote>
<p><strong>auto(默认):</strong> 不应用任何剪裁<br><strong>shape:</strong> 设置元素的形状，唯一合法的形状值是：rect(top, right, bottom, left)<br><strong>inherit:</strong> 从父元素继承</p>
</blockquote>
<h2 id="z-index-属性"><a href="#z-index-属性" class="headerlink" title="z-index 属性"></a>z-index 属性</h2><p>设置元素的堆叠顺序，仅能在定位元素上奏效，即 position 为 relative 或 absolute 的元素上。</p>
<h2 id="vertical-align-属性"><a href="#vertical-align-属性" class="headerlink" title="vertical-align 属性"></a>vertical-align 属性</h2><p>可选的属性值如下：</p>
<blockquote>
<p><strong>baseline(默认):</strong> 元素放置在父元素的基线上<br><strong>sub:</strong> 垂直对齐文本的下标<br><strong>super:</strong> 垂直对齐文本的上标<br><strong>top:</strong> 把元素的顶端与行中最高元素的顶端对齐<br><strong>text-top:</strong> 把元素的顶端与父元素字体的顶端对齐<br><strong>middle:</strong> 把此元素放置在父元素的中部<br><strong>bottom:</strong> 把元素的底端与行中最低的元素的底端对齐<br><strong>text-bottom:</strong> 把元素的底端与父元素字体的底端对齐<br><strong>lenght:</strong> 用长度值指定由基线算起的偏移量，允许使用负值<br><strong>%:</strong> 使用 “line-height” 属性的百分比值来排列此元素，允许使用负值<br><strong>inherit:</strong> 从父元素继承</p>
</blockquote>
<p>说明如下：</p>
<p>vertical-align 影响 inline-level 元素，这些元素的 display 属性为 inline、inline-block、inline-table，基本的inline元素都是标签裹着文字。</p>
<p>inline 的元素在一行中一个挨着一个，当这些元素超出了他们的所在行，一个新行便会建立在它下方。这里的每一行就叫做line box。每一行不同尺寸的元素意味着 line box 不同的高度。在这些 line boxes 里面 vertical-align 属性负责摆放单独的元素。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[零散知识]]></title>
      <url>https://zhulichao.github.io/2016/09/21/scattered-knowledge/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="window-parent和window-opener区别"><a href="#window-parent和window-opener区别" class="headerlink" title="window.parent和window.opener区别"></a>window.parent和window.opener区别</h2><ul>
<li>window.parent能获取一个框架的父窗口或父框架。顶层窗口的parent引用的是它本身。</li>
<li>window.opener引用的是window.open打开的页面的父页面。</li>
</ul>
<h2 id="解决不支持html5标签的办法"><a href="#解决不支持html5标签的办法" class="headerlink" title="解决不支持html5标签的办法"></a>解决不支持html5标签的办法</h2><p>方式一：自己创建标签节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    document.createElement(e[i]);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>方式二：使用Google的html5shiv包（推荐）<br><code>&lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>不管使用以上哪种方法,都要初始化新标签的CSS</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">article,aside,dialog,footer,header,section,footer,nav,figure,menu&#123;</div><div class="line">    display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方式三：防弹衣技术<br>Bulletproof技术，防弹衣技术，建议在所有新的HTML5块级元素中增加一个内部的div元素，然后包含一个CSS class，用这个元素来替代HTML元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt;</div><div class="line">　　&lt;div class=&quot;section&quot;&gt;</div><div class="line">　　&lt;!-- content --&gt;</div><div class="line">　　&lt;/div&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">.section &#123;</div><div class="line">   　　color: blue;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="outerHTML、innerText、innerHTML"><a href="#outerHTML、innerText、innerHTML" class="headerlink" title="outerHTML、innerText、innerHTML"></a>outerHTML、innerText、innerHTML</h2><img src="/2016/09/21/scattered-knowledge/innerHTML.gif" title="一张图了解outerHTML和innerText、innerHTML">
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>cmd中输入<code>echo %PATH%</code> 可查看path环境变量</p>
<h2 id="Chrome浏览器用户名、密码回填问题"><a href="#Chrome浏览器用户名、密码回填问题" class="headerlink" title="Chrome浏览器用户名、密码回填问题"></a>Chrome浏览器用户名、密码回填问题</h2><p>前几天发现一个奇怪的问题，使用Chrome浏览器在登录输入用户名、密码后，点击了保存用户名密码，在其它页面发生了用户名、密码的回填。</p>
<img src="/2016/09/21/scattered-knowledge/login1.png" title="登录输入">
<img src="/2016/09/21/scattered-knowledge/save.png" title="点击保存密码">
<img src="/2016/09/21/scattered-knowledge/card.png" title="其它页面表单">
<p>解决方案：在使用到Input的地方，都添加了autoComplete属性值为off和name属性，但是不同的name属性值，有的可能不会回填有的可能就会回填，我有点怀疑人生了。</p>
<img src="/2016/09/21/scattered-knowledge/card1.png" title="回填登录信息">
<img src="/2016/09/21/scattered-knowledge/card2.png" title="没有回填登录信息">
<p><strong>而且对于没有回填用户信息的情况，在点击密码框的时候，还是会有用户密码信息的提示，这个还没有找到解决方案。</strong></p>
<img src="/2016/09/21/scattered-knowledge/card3.png" title="提示用户密码">
<h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>netstat -aon | findstr 8088 # 查看指定端口被哪个进程占用，会返回一个进程号<br>tasklist | findstr 6808 # 查看指定进程号是哪个程序的<br>taskkill -F -IM javaw.exe # 杀死应用程序</p>
<h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>sudo lsof -i :4000<br>sudo kill -9 [PID]</p>
<h2 id="eclipse分配内存"><a href="#eclipse分配内存" class="headerlink" title="eclipse分配内存"></a>eclipse分配内存</h2><p>右键项目 -&gt; Run As -&gt; -Run Configurations -&gt; Arguments， 添加下面的信息到VM arguments中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-Xms256m</div><div class="line">-Xmx512m -XX:MaxNewSize=256m -XX:MaxPermSize=512m</div></pre></td></tr></table></figure></p>
<h2 id="Xshell指令更新环境"><a href="#Xshell指令更新环境" class="headerlink" title="Xshell指令更新环境"></a>Xshell指令更新环境</h2><p>停 tomcat 重新启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ps -ef|grep java            # 查进程号，12997</div><div class="line">kill -9 12997               # 杀死进程</div><div class="line">cd /usr/local/tomcat6/bin/  # 进入到目录</div><div class="line">./catalina.sh start         # 启动</div><div class="line">cd ..                       </div><div class="line">cd logs</div><div class="line">tail -f catalina.out        # 打日志</div></pre></td></tr></table></figure></p>
<h2 id="Chrome插件生成crx文件"><a href="#Chrome插件生成crx文件" class="headerlink" title="Chrome插件生成crx文件"></a>Chrome插件生成crx文件</h2><p>扩展程序-&gt;开发者模式-&gt;打包扩展程序-&gt;根据扩展程序ID，如hgmloofddffdnphfgcellkdfbfbjeloo，在C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Extensions\路径下找到指定ID(hgmloofddffdnphfgcellkdfbfbjeloo)文件，双击进入，选择文件夹-&gt;打包扩展程序，即可生成crx文件。</p>
<h2 id="Thunk函数的含义"><a href="#Thunk函数的含义" class="headerlink" title="Thunk函数的含义"></a>Thunk函数的含义</h2><p>编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做Thunk函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function f(m)&#123;</div><div class="line">  return m * 2;</div><div class="line">&#125;</div><div class="line">f(x + 5);</div><div class="line"></div><div class="line">// 等同于</div><div class="line">var thunk = function () &#123;</div><div class="line">  return x + 5;</div><div class="line">&#125;;</div><div class="line">function f(thunk)&#123;</div><div class="line">  return thunk() * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JavaScript语言中，Thunk函数替换的不是表达式，而是多参数函数，将其替换成单参数的版本，且只接受回调函数作为参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 正常版本的readFile（多参数版本）</div><div class="line">fs.readFile(fileName, callback);</div><div class="line"></div><div class="line">// Thunk版本的readFile（单参数版本）</div><div class="line">var Thunk = function (fileName)&#123;</div><div class="line">  return function (callback)&#123;</div><div class="line">    return fs.readFile(fileName, callback);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">var readFileThunk = Thunk(fileName);</div><div class="line">readFileThunk(callback);</div></pre></td></tr></table></figure>
<h2 id="数据库表回滚"><a href="#数据库表回滚" class="headerlink" title="数据库表回滚"></a>数据库表回滚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 表sy_org_user1回滚到2015-01-09 15:00:00时间</div><div class="line">alter table sy_org_user1 enable row movement;</div><div class="line">flashback table sy_org_user1 to timestamp to_timestamp(&apos;2015-01-09 15:00:00&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;);</div></pre></td></tr></table></figure>
<h2 id="Oracle数据库导入导出"><a href="#Oracle数据库导入导出" class="headerlink" title="Oracle数据库导入导出"></a>Oracle数据库导入导出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 导出库</div><div class="line">exp DEV_BASE/DEV_BASE@pcmdb_192.168.100.30 file=E:\DEV_BASE.dmp owner=DEV_BASE</div><div class="line"># 如果以前导入过，删除用户再重建</div><div class="line">drop user DEV_BASE cascade;</div><div class="line">create user DEV_BASE identified by DEV_BASE;</div><div class="line">grant resource, connect, dba to DEV_BASE;</div><div class="line">alter user DEV_BASE quota unlimited on PCMDB;</div><div class="line"># 导入库</div><div class="line">imp system/sys1234@orcl fromuser=DEV_BASE touser=DEV_BASE file=E:\DEV_BASE.dmp</div></pre></td></tr></table></figure>
<h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p>响应式编程是一种面向数据流和变化传播的编程范式，这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。响应式编程最初是为了简化交互式用户界面的创建和实时系统动画的绘制而提出来的一种方法，但它本质上是一种通用的编程范式。在MVC软件架构中，响应式编程允许将相关模型的变化自动反映到视图上，反之亦然。</p>
<h2 id="检测浏览器版本"><a href="#检测浏览器版本" class="headerlink" title="检测浏览器版本"></a>检测浏览器版本</h2><p>最近做的项目对浏览器的类型及版本有要求，同事写了检测浏览器版本的代码如下，我在此处进行记录，供以后参考。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在工程入口html文件的body标签中添加如下script内容--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"react-content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">      function cheackBowser() &#123;</div><div class="line">        var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串</div><div class="line">        var version = navigator.appVersion; // 浏览器版本信息</div><div class="line">        var isOpera = userAgent.indexOf("Opera") &gt; -1; //判断是否Opera浏览器</div><div class="line">        var isChrome = userAgent.indexOf("Chrome") &gt; -1; //判断是否Chrome浏览器</div><div class="line">        var isIE = userAgent.indexOf("compatible") &gt; -1 &amp;&amp; userAgent.indexOf("MSIE") &gt; -1 &amp;&amp; !isOpera; //判断是否IE浏览器</div><div class="line">        var isFF = userAgent.indexOf("Firefox") &gt; -1; //判断是否Firefox浏览器</div><div class="line">        var isSafari = userAgent.indexOf("Safari") &gt; -1; //判断是否Safari浏览器</div><div class="line"></div><div class="line">        //如果是 IE 火狐 opera，提示下载qq浏览器</div><div class="line">        if(isIE || isFF || isOpera) &#123;</div><div class="line">          //主页面不显示只显示弹出框，弹出弹框提示下载qq浏览器</div><div class="line">          if(confirm("您使用的浏览器存在兼容问题，为了您更好的用户体验，建议您点击确定下载QQ浏览器")) &#123;</div><div class="line">              document.getElementById("react-content").style.display = "none";</div><div class="line">              window.open("http://browser.qq.com/?adtag=SEM1", "_self");</div><div class="line">          &#125; else &#123;</div><div class="line">            //点击取消关闭此页面</div><div class="line">            window.close();</div><div class="line">            //如果关闭此页面被阻止则把页面清空</div><div class="line">            if(window)&#123;</div><div class="line">               window.location.href="about:blank";</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125; else if(isChrome)&#123;</div><div class="line">            var detailVersion = Number(VersionFilter(version)[0].substring(7,9));</div><div class="line">            if(detailVersion <span class="tag">&lt; <span class="attr">45</span>) &#123;</span></div><div class="line">              <span class="attr">document.getElementById</span>("<span class="attr">react-content</span>")<span class="attr">.style.display</span> = <span class="string">"none"</span>;</div><div class="line">              <span class="attr">if</span>(<span class="attr">confirm</span>("您使用的浏览器版本太低，为了您更好的用户体验，建议您点击确定下载<span class="attr">QQ</span>浏览器")) &#123;</div><div class="line">                <span class="attr">window.open</span>("<span class="attr">https:</span>//<span class="attr">dldir1.qq.com</span>/<span class="attr">invc</span>/<span class="attr">tt</span>/<span class="attr">QQBrowser_Setup_SEM1.exe</span>","<span class="attr">_self</span>");</div><div class="line">              &#125;</div><div class="line">            &#125; <span class="attr">else</span> &#123;</div><div class="line">              //谷歌浏览器,版本符合要求</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // 获取详细的<span class="attr">chrome</span>版本</div><div class="line">      <span class="attr">function</span> <span class="attr">VersionFilter</span> (<span class="attr">value</span>) &#123;</div><div class="line">        <span class="attr">var</span> <span class="attr">reg</span> = <span class="string">/Chrome\/\d&#123;2&#125;\.\d+\.\d+/</span></div><div class="line">         <span class="attr">return</span> <span class="attr">reg.exec</span>(<span class="attr">value</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="attr">cheackBowser</span>()</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="打版本号"><a href="#打版本号" class="headerlink" title="打版本号"></a>打版本号</h2><p>在做项目时，测试环境只要更新，最好打个版本号(tag)，这样如果这次测试的结果比较稳定，要向线上更新，直接更新指定tag的代码到线上就行了，开发人员还是正常开发提交代码。</p>
<h2 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h2><p>简单的理解可以说成是“关于编程的编程”，或者说“与编程相关的编程”，如程序甲可以输出 A ~ Z，而程序乙可以生成程序甲，那么编写程序乙的活动就可以算作元编程。元编程更狭义的意思应该是指“编写能改变语言语法特性或者运行时特性的程序”，一种语言本来做不到的事情，通过编程来修改它，使得它可以做到了，这就是元编程。</p>
<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p><a href="https://baike.baidu.com/item/robots%E5%8D%8F%E8%AE%AE/2483797?fromtitle=robots.txt&amp;fromid=9518761&amp;fr=aladdin" target="_blank" rel="external">【百度百科】</a>robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-布局基础1]]></title>
      <url>https://zhulichao.github.io/2016/09/18/css-layout1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>大多数元素的默认值通常是 block 或 inline 。一个 block 元素通常被叫做块级元素。一个 inline 元素通常被叫做行内元素。注意是控制当前元素的，而不是其内部元素。  </p>
<p><strong>none:</strong></p>
<ul>
<li>在不删除元素的情况下隐藏元素，不会保留元素本该显示的空间    </li>
<li>visibility:hidden 会保留元素的空间  </li>
</ul>
<p><strong>block:</strong> </p>
<ul>
<li>前后有换行符，如不指定宽度，会尽可能撑满容器  </li>
<li>高度，行高及顶和底边距都可控制   </li>
<li>常见块级元素：<code>div、p、form、header、footer、section</code>等</li>
</ul>
<p><strong>inline（默认）:</strong> </p>
<ul>
<li>前后没有换行符、不撑满容器  </li>
<li>高，行高及顶和底边距不可改变  </li>
<li>包裹一些文字而不会打乱段落的布局</li>
</ul>
<p><strong>inline-block:</strong>  </p>
<ul>
<li>将对象呈递为内联对象，但是对象的内容作为块对象呈递（准确地说，应用此特性的元素呈现为内联对象，周围元素保持在同一行，但可以设置宽度和高度地块元素的属性）  </li>
<li>可以实现浮动（float）的效果，如果HTML源代码中元素之间有空格，那么元素之间会产生空隙，使用float不会有空隙；但不能实现float的文字环绕图片  </li>
<li>如果不设置width和height，会按元素的内容大小显示  </li>
<li>这一行的高度为该行内最大高度的元素高度，vertical-align属性会影响到元素在垂直方向的对齐方式  </li>
</ul>
<p><strong>list-item:</strong> </p>
<ul>
<li>此元素会作为列表显示，如果不设置width和height，每个列表项尽可能撑满容器</li>
</ul>
<p><strong>flex:</strong>  </p>
<ul>
<li>详见下文</li>
</ul>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">display其它属性值详细列表</a>  </p>
<hr>
<h2 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h2><p>参考阮一峰的网络日志：<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">《Flex 布局教程：语法篇》</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">《Flex 布局教程：实例篇》</a>  </p>
<blockquote>
<p><code>display: flex |inline-flex</code> </p>
<p>指定Flex布局后，子元素的float、clear和vertical-align属性将失效</p>
<p>几个基本概念： 容器、项目、主轴、交叉轴</p>
</blockquote>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p><strong>flex-direction</strong>  </p>
<ul>
<li>主轴的方向（即项目的排列方向） </li>
<li>row | row-reverse | column | column-revers</li>
</ul>
<p><strong>flex-wrap</strong> </p>
<ul>
<li>owrap | wrap | wrap-reverse</li>
<li>一条轴线排不下，如何换行  </li>
</ul>
<p><strong>flex-flow</strong></p>
<ul>
<li>flex-direction属性和flex-wrap属性的简写形式  </li>
<li>默认值为row nowrap</li>
</ul>
<p><strong>justify-content</strong></p>
<ul>
<li>项目在主轴上的对齐方式</li>
<li>flex-start | flex-end | center | space-between | space-around</li>
</ul>
<p><strong>align-items</strong></p>
<ul>
<li>项目在交叉轴上的对齐方式</li>
<li>flex-start | flex-end | center | baseline | stretch</li>
</ul>
<p><strong>align-content</strong></p>
<ul>
<li>多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</li>
<li>flex-start | flex-end | center | space-between | space-around | stretch</li>
</ul>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p><strong>order</strong></p>
<ul>
<li>项目的排列顺序，数值越小，排列越靠前</li>
<li>整数，默认为0</li>
</ul>
<p><strong>flex-grow</strong></p>
<ul>
<li>项目的放大比例，0表示如果存在剩余空间，也不放大</li>
<li>整数，默认为0</li>
<li>如果所有项目的属性都为1，则它们将等分剩余空间；如果一个项目的属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</li>
</ul>
<p><strong>flex-shrink</strong></p>
<ul>
<li>项目的缩小比例，1表示如果空间不足，该项目将缩小</li>
<li>非负整数，默认为1</li>
<li>如果所有项目的属性都为1，当空间不足时，都将等比例缩小；如果一个项目的属性为0，其他项目都为1，则空间不足时，前者不缩小</li>
</ul>
<p><strong>flex-basis</strong></p>
<ul>
<li>在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</li>
<li>[length] | auto，默认为auto</li>
<li>可以设为跟width或height属性一样的值，则项目将占据固定空间</li>
</ul>
<p><strong>flex</strong>  </p>
<ul>
<li>flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选</li>
<li>默认值为 0 1 auto</li>
<li>none (0 0 auto) 表示无论窗口如何变化宽度不变</li>
<li>auto (1 1 auto) 表示空间足够时放大，空间不足时缩小</li>
<li>initial (0 1 auto) 表示空间足够时不放大，空间不足时缩小</li>
<li>建议优先使用这个属性，因为浏览器会推算相关值</li>
</ul>
<p><strong>align-self</strong></p>
<ul>
<li>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</li>
<li>auto | flex-start | flex-end | center | baseline | stretch，默认值为auto</li>
<li>auto 表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li>
</ul>
<hr>
<h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><p>CSS3多列布局可以自动将内容按指定的列数排列，这种特性实现的布局效果和报纸、杂志排版非常相似。<br>常用属性如下：</p>
<p><strong>column-width:</strong></p>
<blockquote>
<p>auto 默认值，元素多列的列宽由其它属性决定，没有显示设置的情况下，将默认显示一列<br>[length] 数值和长度单位组成，非负；如果单独使用，容器超出列宽时显示多列，小于列宽时显示一列</p>
</blockquote>
<p><strong>column-count:</strong></p>
<blockquote>
<p>auto 默认值，表示元素只有一列，依靠浏览器计算自动设置<br>[integer] 正整数值，定义想要的列数和最大列数，当容器没有足够空间来包含具有指定宽度的列数，元素列数会自动往下计算；如果单独使用，显示固定列数<br>列数 = (容器宽度 - 列间距)/列宽 向下取整</p>
</blockquote>
<p><strong>columns:</strong></p>
<blockquote>
<p>column-width和column-count的缩写</p>
</blockquote>
<p><strong>column-gap:</strong></p>
<blockquote>
<p>normal 默认值，一般情况相当于1em<br>[length] 浮点数据和单位标识符组成的长度值，非负，常用px、em单位的任何整数值；<br>如果同时设置了column-width属性，可能会导致列被撑破，使列数减1</p>
</blockquote>
<p><strong>column-rule:</strong></p>
<blockquote>
<p>定义列之间的边框宽度、样式、颜色，类似border属性，但不占用任何空间位置<br>[column-rule-width]|[column-rule-style]|[column-rule-color]<br>默认值分别为 medium | none | 前景色color值<br>如果column-rule-width宽度超过列间距，列边框就会消失</p>
</blockquote>
<p><strong>column-span:</strong></p>
<blockquote>
<p>定义一个分列元素中的子元素能跨多少列<br>none 默认值，表示不跨任何列<br>all 表示跨所有列，并定位在列的Z轴之上  </p>
</blockquote>
<p><strong>column-fill:</strong></p>
<blockquote>
<p>定义多列中每一列的高度是否统一<br>auto 默认值，各列的高度随其内容的变化自动变化<br>balance 各列的高度将会根据内容最多的一列的高度进行统一  </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ant Design 组件学习经验]]></title>
      <url>https://zhulichao.github.io/2016/09/14/ant-design-study/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="Tree组件"><a href="#Tree组件" class="headerlink" title="Tree组件"></a>Tree组件</h2><p>参考 <a href="https://ant.design/components/tree-select/" target="_blank" rel="external">TreeSelect</a></p>
<h3 id="异步加载数据"><a href="#异步加载数据" class="headerlink" title="异步加载数据"></a>异步加载数据</h3><p>使用redux时，TreeSelect异步加载数据需要通过触发action调用后台获取数据，根据reducer更新的state显示出加载的数据。需添加loadData属性，值为一个方法，如onLoadData，内容如下。<br>这个函数的返回值好像必须是一个Promise对象，如果不这么写，会报<code>Uncaught TypeError: Cannot read property &#39;then&#39; of undefined(…)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">onLoadData(treeNode) &#123;</div><div class="line">    return new Promise((resolve) =&gt; &#123;</div><div class="line">        // 树形显示的数据在this.state.treeData中，在this.state.treeData中找到当前操作节点</div><div class="line">        const pathArr = treeNode.props.pos.split(&apos;-&apos;);</div><div class="line">        let findTreeNode = null;</div><div class="line">        for (let i=1,len=pathArr.length; i &lt; len ; i++) &#123;</div><div class="line">            if( i === 1)&#123;</div><div class="line">                findTreeNode = this.state.treeData[pathArr[i]];</div><div class="line">            &#125; else &#123;</div><div class="line">                findTreeNode = findTreeNode.children[pathArr[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // 如果该节点没有子节点，表示没加载过其子节点，进行加载</div><div class="line">        if (findTreeNode.children.length &lt;= 0) &#123;</div><div class="line">            // 设置展开的节点为当前节点</div><div class="line">            this.state.openKey = treeNode.props.eventKey;</div><div class="line">            // 组织后台查询条件</div><div class="line">            const queryData = &#123;</div><div class="line">                LEVEL: 1, // TODO  不知道什么规则</div><div class="line">                _extWhere: this.state.queryData._extWhere,</div><div class="line">                PID: treeNode.props.eventKey,</div><div class="line">                NAME: treeNode.props.title,</div><div class="line">                checkstate: &apos;&apos;</div><div class="line">            &#125;</div><div class="line">            const dict = &#123;</div><div class="line">                dictId: this.state.dictId,</div><div class="line">                dictData: this.props.dict.dictData</div><div class="line">            &#125;</div><div class="line">            // 发起action，获取数据</div><div class="line">            this.props.updataDictByPid(this.props.servId, this.props.itemCode, objectUtils.clone(dict), queryData, this.props.servType, this.props.opeCode, this.props.queryServId);</div><div class="line">        &#125;</div><div class="line">        resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Form组件"><a href="#Form组件" class="headerlink" title="Form组件"></a>Form组件</h2><p>参考 <a href="https://ant.design/components/form/" target="_blank" rel="external">Form</a> 和 <a href="http://react-component.github.io/form/" target="_blank" rel="external">rc-form</a></p>
<h3 id="使用mapPropsToFields和onFieldsChange的校验问题"><a href="#使用mapPropsToFields和onFieldsChange的校验问题" class="headerlink" title="使用mapPropsToFields和onFieldsChange的校验问题"></a>使用mapPropsToFields和onFieldsChange的校验问题</h3><p>Form组件如下方式使用，获取不到校验信息了，浏览器的控制台会有打印的校验结果，但没有反映在页面上，但如果不使用mapPropsToFields是好使的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 必填校验</div><div class="line">const validateArray = [&#123;</div><div class="line">    rules: [&#123;</div><div class="line">        required: true,</div><div class="line">        message: &apos;邮箱必填&apos;</div><div class="line">    &#125;],</div><div class="line">    trigger: [&apos;onChange&apos;]</div><div class="line">&#125;];</div><div class="line"></div><div class="line">let fieldPropsOptions = &#123;</div><div class="line">    validate: validateArray</div><div class="line">&#125;;</div><div class="line">...</div><div class="line">&lt;FormItem</div><div class="line">    label=&quot;email&quot;</div><div class="line">    validateStatus=&#123;getFieldError(&apos;email&apos;) ? &apos;success&apos; : &apos;error&apos;&#125;</div><div class="line">    help=&#123;isFieldValidating(&apos;email&apos;) ? &apos;&apos; : errMessage&#125;</div><div class="line">&gt;</div><div class="line">    &lt;Input &#123;...getFieldProps(&apos;email&apos;, fieldPropsOptions)&#125; /&gt;;</div><div class="line">&lt;/FormItem&gt;</div><div class="line">...</div><div class="line">NewForm = Form.create(&#123;onFieldsChange, mapPropsToFields&#125;)(NewForm);</div></pre></td></tr></table></figure></p>
<p>解决方法是调用Form组件是传入一个props及更新该props的方法，如formErrItem、updateFormErrItem，在onFieldsChange中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function onFieldsChange(props, fields)&#123;</div><div class="line">    // 调用父组件更新formErrItem的方法</div><div class="line">    const newFormErrItem = &#123;</div><div class="line">        ...props.formErrItem,</div><div class="line">        ...fields,</div><div class="line">    &#125;;</div><div class="line">    props.updateFormErrItem(newFormErrItem);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Form组件中通过，this.props.formErrItem可获取校验信息。</p>
<h3 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h3><p>在使用Form组件时，在Form.create时需要添加<code>withRef: true</code>才能获取到组件内部定义的方法或state。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// MyForm.jsx中，定义了 MyForm 组件，是对Form组件的封装，返回的是antd的Form组件。</div><div class="line">class MyForm extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return &lt;Form /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">MyForm = Form.create(&#123;onFieldsChange, mapPropsToFields, withRef: true&#125;)(MyForm);</div><div class="line">export default MyForm;</div><div class="line">// App.jsx中，引用了MyForm组件，如果要引用到MyForm组件内部定义的方法或state，需要使用如下方式。</div><div class="line">class App extends Component &#123;</div><div class="line">    clickHandler() &#123;</div><div class="line">        // 引用MyForm组件中定义的方法或state</div><div class="line">        const formRef = this.refs.myForm.refs.wrappedComponent.refs.formWrappedComponent;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;MyForm ref=&quot;myForm&quot; /&gt;</div><div class="line">                &lt;Button onClick=&#123;this.clickHandler.bind(this)&#125;&gt;点击&lt;/Button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Table组件"><a href="#Table组件" class="headerlink" title="Table组件"></a>Table组件</h2><p>参考 <a href="https://ant.design/components/table/" target="_blank" rel="external">Table</a></p>
<h3 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h3><p>如果Table组件中要进行单选，需要进行如下配置：</p>
<ul>
<li>将Table组件rowSelection属性的type值设置为radio，当前选中的数据由radioIndex控制</li>
<li>注意，ant-design的Table组件，对于单选类型的，无法自己管理radioIndex值，如果想要自己管理radioIndex值，需要在Table组件中添加如下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if ((&apos;radioIndex&apos; in nextProps) &amp;&amp; nextProps.radioIndex !== null ) &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">        radioIndex: nextProps.radioIndex || null</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="行样式"><a href="#行样式" class="headerlink" title="行样式"></a>行样式</h3><p>Table组件的rowClassName属性，如：<code>rowClassName={(record, index) =&gt; record[&#39;_delete_&#39;] ? &#39;ant-table-row-delete&#39; : &#39;&#39; }</code></p>
<h3 id="不显示页码"><a href="#不显示页码" class="headerlink" title="不显示页码"></a>不显示页码</h3><p>Table组件的pagination属性为false</p>
<h3 id="pagination"><a href="#pagination" class="headerlink" title="pagination"></a>pagination</h3><p>pagination.pageSize不为10、20、30、40中的值时，分页处显示的只有一个值，如15，而不是像10 条/页这样<br>需要给Table组件传入的pagination中有自定义的pageSizeOptions属性，该属性的值为所有需要显示的每页条数的数组</p>
<h3 id="列表勾选行样式问题"><a href="#列表勾选行样式问题" class="headerlink" title="列表勾选行样式问题"></a>列表勾选行样式问题</h3><p>在勾选列表行的checkbox或是列表可编辑的下拉框时，点击所在的行会发生颜色抖动，直接运行官方例子也有这个问题。后来发现可能是Chrome浏览器的问题，如果用360浏览器就不会有这个问题。很奇怪！</p>
]]></content>
      
        <categories>
            
            <category> Ant Design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ant Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-学习经验2]]></title>
      <url>https://zhulichao.github.io/2016/09/13/react-experience2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MVVM-Model-View-ViewModel"><a href="#MVVM-Model-View-ViewModel" class="headerlink" title="MVVM(Model-View-ViewModel)"></a>MVVM(Model-View-ViewModel)</h2><p>MVC—&gt;MVP—&gt;MVVM<br>MVVM框架的由来是MVP（Model-View-Presenter）模式与WPF（Windows Presentation Foundation）结合的应用方式时发展演变过来的一种新型架构框架。它立足于原有MVP框架并且把WPF的新特性糅合进去，以应对客户日益复杂的需求变化。<br>低耦合 可重用性 独立开发 可测试</p>
<h2 id="零散知识"><a href="#零散知识" class="headerlink" title="零散知识"></a>零散知识</h2><ul>
<li>ReactDOM.render(Component,dom) 执行后，这个dom还会存在，这个Component是在最外层。<br>感觉很奇怪  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在componentDidMount方法中</div><div class="line">ReactDOM.render(this.state.customScript.buttonAndPopoverComponents(), document.getElementById(&lt;Button type=&quot;primary&quot;&gt;自定义添加的按钮&lt;/Button&gt;,&apos;ANTD_CDP_TABLE1_ZLC-btnBar_after&apos;));</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2016/09/13/react-experience2/renderDOM.png" title="结果如图">
<h2 id="解析jsx"><a href="#解析jsx" class="headerlink" title="解析jsx"></a>解析jsx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">return (  </div><div class="line">  &lt;div className=&quot;commentBox&quot;&gt;  </div><div class="line">    Hello, world! I am a CommentBox.  </div><div class="line">  &lt;/div&gt;  </div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">return (  </div><div class="line">  React.createElement(&apos;div&apos;, &#123;className: &quot;commentBox&quot;&#125;,  </div><div class="line">    &quot;Hello, world! I am a CommentBox.&quot;  </div><div class="line">  )  </div><div class="line">);</div></pre></td></tr></table></figure>
<p>Babel 设置匹配后缀，文件后缀为.jsx，就不会对&lt;报错。Babel之所以可以按照各种要求编译JavaScript代码文件，是因为使用了各种插件和预设(预设是插件的打包封装)。</p>
<h2 id="key-的作用"><a href="#key-的作用" class="headerlink" title="key 的作用"></a>key 的作用</h2><p>今天遇到了一个奇怪的现象，下面代码是在同一个页面中，点击不同按钮时显示单选或多选树，结果出现了错误，debugger调试时看到是组件在更新时出了问题，更新时没有找到正确的组件，先显示单选树再显示多选树会在单选的树上更新的，由于没有多选的一些属性而报错。解决办法就是放开注释的key属性，这样更新时就能找到相应的组件了。这是我第一次体会到key的作用。</p>
<p>善于 key 值得使用，如果不同的路由进入同一个组件，但要清空原有的所有状态，相当于是一个新组件的效果，使用不同的 key 值即可达到效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">render() &#123;</div><div class="line">    return (</div><div class="line">        &lt;div&gt;</div><div class="line">            &#123;</div><div class="line">                this.props.multi ?</div><div class="line">                    &lt;Tree</div><div class="line">                        // key=&quot;tree-multi&quot;</div><div class="line">                        checkable</div><div class="line">                        onCheck=&#123;this.onCheck&#125;</div><div class="line">                        checkedKeys=&#123;this.state.selectedKeys&#125;</div><div class="line">                    &gt;</div><div class="line">                        &#123;loop(this.props.userData)&#125;</div><div class="line">                    &lt;/Tree&gt;</div><div class="line">                :</div><div class="line">                    &lt;Tree</div><div class="line">                        // key=&quot;tree-single&quot;</div><div class="line">                        onSelect=&#123;this.onSelect&#125;</div><div class="line">                    &gt;</div><div class="line">                        &#123;loop(this.props.userData)&#125;</div><div class="line">                    &lt;/Tree&gt;</div><div class="line">            &#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h2><p>使用require静态资源，打包时会自动打入，不需要再处理静态资源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&#123;require(&apos;../../resources/images/logo.png&apos;)&#125; /&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const url = `url($&#123;require(&quot;../../resources/images/banner-home.jpg&quot;)&#125;)`;</div><div class="line">&lt;div style=&#123;&#123;backgroundImage: url&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-学习]]></title>
      <url>https://zhulichao.github.io/2016/09/13/es6-study/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看了<a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">《ES6标准入门》</a>第二版，在对语法有了初步了解的基础上，首先建议真正开发前看一下该书第21章——编程风格，从开始就养成良好的编程风格。</p>
<h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><h3 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h3><p>let取代var，const优先<br>静态字符串使用单引号或反引号<br>为变量赋数组优先使用解构赋值<br>函数的参数如果是对象优先使用解构赋值<br>如果函数的返回多个值，优先使用对象的解构赋值而不是数组的解构赋值<br>单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾<br>对象尽量静态化，可以使用Object.assign()添加属性<br>使用扩展运算符（…）赋值数组<br>需要使用函数表达式的场合尽量使用箭头函数<br>函数的所有配置项应集中在一个对象，防在最后一个参数<br>只有模拟实体对象时才使用Object，如果只是要key:value的数据结构则使用Map<br>不要export default 与 普通的export同时使用  </p>
<p><strong>以下是我在项目开发中使用到的、个人认为比较有用的ES6语法，总结如下：</strong></p>
<h3 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h3><p>let、const与var相比：</p>
<blockquote>
<p>使用未声明的变量，直接报错<br>重复声明同一个变量，直接报错<br>是块级作用域<br>必须声明 ‘use strict’ 后才能使用let声明变量</p>
</blockquote>
<p>用了 let、const，typeof 就不那么安全了。<br>声明宣称一个名字的存在，定义则为这个名字分配存储空间，而初始化则是为名字分配的存储空间赋初值。</p>
<h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><p>Object.keys()   – 返回对象的键组成的数组<br>Object.values() – 返回对象的值组成的数组<br>Object.assign() – 对象的合并    </p>
<h3 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 定义</div><div class="line">function* helloWorldGenerator() &#123;</div><div class="line">    yield &apos;hello&apos;;</div><div class="line">    yield &apos;world&apos;;</div><div class="line">    return &apos;ending&apos;;</div><div class="line">&#125;</div><div class="line">// 调用</div><div class="line">var hw = helloWorldGenerator();</div><div class="line">hw.next();// &#123;value: &apos;hello&apos;, done: false&#125;</div><div class="line">hw.next();// &#123;value: &apos;world&apos;, done: false&#125;</div><div class="line">hw.next();// &#123;value: &apos;ending&apos;, done: true&#125;</div></pre></td></tr></table></figure>
<p>调用Generator函数后，函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（Iterator对象），必须调用next方法，是的指针移向下一个状态。总之，Generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行。<br><strong>Generator函数可以达到多个return的效果。</strong><br>for…of循环、扩展运算符（…）、解构赋值和Array.from方法内部调用的都是遍历器接口，因此可以将Generator函数返回的Iterator对象作为参数使用。<br><strong>调用Generator函数的返回结果可以类似数组使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[...hw()]// [&apos;hello&apos;, &apos;world&apos;, &apos;ending&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h3><p>includes()   – 返回布尔值，表示是否找到了参数字符串<br>startsWith() – 返回布尔值，表示参数字符串是否在源字符串的头部<br>endsWith()   – 返回布尔值，表示参数字符串是否在源字符串的尾部</p>
<h3 id="Class的取值函数（getter）和赋值函数（setter）"><a href="#Class的取值函数（getter）和赋值函数（setter）" class="headerlink" title="Class的取值函数（getter）和赋值函数（setter）"></a>Class的取值函数（getter）和赋值函数（setter）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyClass &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  get prop() &#123;</div><div class="line">    return &apos;getter&apos;;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    console.log(&apos;setter: &apos;+value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.prop = 123; // 调用 setter</div><div class="line">inst.prop; // 调用 getter</div></pre></td></tr></table></figure>
<hr>
<h2 id="ES7语法"><a href="#ES7语法" class="headerlink" title="ES7语法"></a>ES7语法</h2><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>对象的解构赋值是ES7的语法，需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">需要安装依赖 npm install babel-preset-stage-0 --save-dev   </div><div class="line">并配置预设 presets: [&apos;es2015&apos;, &apos;stage-0&apos;, &apos;react&apos;]  </div><div class="line">使用 const newObj = &#123; ...oldObj &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">async search(item) &#123;</div><div class="line">  try &#123;</div><div class="line">    // 会等待setState执行之后再向下执行</div><div class="line">    await this.setState(&#123;</div><div class="line">      query: item</div><div class="line">    &#125;);</div><div class="line">    this.fetchData();</div><div class="line">  &#125; catch (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-警告]]></title>
      <url>https://zhulichao.github.io/2016/09/12/react-warning/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="请求数据放在componentDidMount方法中的警告"><a href="#请求数据放在componentDidMount方法中的警告" class="headerlink" title="请求数据放在componentDidMount方法中的警告"></a>请求数据放在componentDidMount方法中的警告</h2><p>需要请求数据的，或者使用redux触发action请求数据，最终会更新组件的state时，这种操作最好放在componentDidMount中，我以前总认为这种准备工作要放在constructor方法中，会报下面的警告。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: setState(...): Cannot update during an existing state transition (such as within `render` or another component&apos;s constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.</div></pre></td></tr></table></figure></p>
<h2 id="类似数组的组件没有key属性的警告"><a href="#类似数组的组件没有key属性的警告" class="headerlink" title="类似数组的组件没有key属性的警告"></a>类似数组的组件没有key属性的警告</h2><p>类似数组的组件，如Col、li等，有多个值时需要加key属性，否则会报如下警告。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Each child in an array or iterator should have a unique &quot;key&quot; prop. Check the render method of `AdvSearch`.</div></pre></td></tr></table></figure></p>
<h2 id="react组件销毁后渲染其它组件报警告"><a href="#react组件销毁后渲染其它组件报警告" class="headerlink" title="react组件销毁后渲染其它组件报警告"></a>react组件销毁后渲染其它组件报警告</h2><p>可以将react组件销毁后渲染其它组件报警告<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const dom = document.getElementById(&apos;item_code&apos;);</div><div class="line">if (dom !== null) &#123;</div><div class="line">    ReactDOM.unmountComponentAtNode(dom);</div><div class="line">    ReactDOM.render(&lt;Input placeholder=&quot;这是新渲染的组件&quot;/&gt;, dom);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2016/09/12/react-warning/unmountWarning.png" title="结果如图">
<h2 id="IE11下报的render中Object类型错误"><a href="#IE11下报的render中Object类型错误" class="headerlink" title="IE11下报的render中Object类型错误"></a>IE11下报的render中Object类型错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unhandled promise rejection Invariant Violation: Objects are not valid as a React child (found: [object Generator]). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `QueryChoose`.</div></pre></td></tr></table></figure>
<p>原因是jsx中调用generator函数返回的结果没有进行解构。将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.state.customScript[&apos;customRender&apos;]()</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[...this.state.customScript[&apos;customRender&apos;]()]</div></pre></td></tr></table></figure></p>
<h2 id="IE11下报的deprecated错误"><a href="#IE11下报的deprecated错误" class="headerlink" title="IE11下报的deprecated错误"></a>IE11下报的deprecated错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Warning: isMounted(...) is deprecated in plain JavaScript React classes. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.</div><div class="line">Warning: replaceState(...) is deprecated in plain JavaScript React classes. Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).</div></pre></td></tr></table></figure>
<p>这个很奇怪，是发现在根组件App的render方法中有<code>console.log(this);</code>导致的警告，不明白为什么。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-学习经验1]]></title>
      <url>https://zhulichao.github.io/2016/09/12/react-experience1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="React基础知识"><a href="#React基础知识" class="headerlink" title="React基础知识"></a>React基础知识</h2><p><strong>React</strong> 是一个声明式、高效、灵活的、创建用户界面的JavaScript库，本质是将图形界面（GUI）函数化。</p>
<p><strong>Universal渲染</strong> 指的是一套代码可以同时在服务端和客户端渲染。</p>
<p><strong>Redux</strong> 是一个JavaScript状态容器，提供可预测的状态管理。</p>
<p><strong>Webpack</strong> 是当下最热门的前端资源模块化管理和打包工具。</p>
<p><strong>开发服务器</strong>是可以为程序提供资源服务的服务器。通常情况下，在页面中引入的脚本文件等静态资源都放在硬盘中，使用了开发服务器，这些资源将被读到内存里，然后可以通过开发服务器的端口访问这些资源。webpack-dev-server就是开发服务器。</p>
<p><strong>组件</strong> 是一个函数或类，它决定了如何把数据变为视图。ReactElement是一个普通对象，描述了组件实例或DOM节点；组件实例则是组件类的实例化对象。</p>
<p><strong>ReactElement</strong> 就是大名鼎鼎的“虚拟DOM”，其本质是一个不可变对象，描述了一个组件的实例或一个DOM节点，包含组件的类型、属性以及子元素等信息。ReactElement不是组件的实例，不能在ReactElement中调用React组件的任何方法，它只是告诉React你想在屏幕上显示什么。JSX中的闭合标签就是ReactElement。对一个组件而言，props就是输入，ReactElement就是输出，也就是render方法的返回值。</p>
<p><strong>组件实例</strong> 是组件类的实例化对象，同样被用来管理内部状态、处理生命周期函数。ReactDOM.render方法返回的就是组件实例，某些组件方法中的this也指向组件实例，利用组件的Refs也可以获取组件实例。无状态函数是没有实例化对象的，因此无法使用生命周期函数，也没有内部状态。</p>
<h2 id="JSX返回多个组件"><a href="#JSX返回多个组件" class="headerlink" title="JSX返回多个组件"></a>JSX返回多个组件</h2><p>JSX中返回多个组件，如果不想包面包一层父节点，可以使用数组，注意要有key属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const arr = [</div><div class="line">    &lt;h3 key=&#123;0&#125;&gt;第一个组件&lt;/h3&gt;,</div><div class="line">    &lt;h2 key=&#123;1&#125;&gt;第二个组件&lt;/h2&gt;,</div><div class="line">];</div></pre></td></tr></table></figure></p>
<h2 id="组件间交互方式"><a href="#组件间交互方式" class="headerlink" title="组件间交互方式"></a>组件间交互方式</h2><p>我个人常用的组件间交互的方式有：</p>
<ul>
<li>如果是父子关系的组件，可以通过props由父组件将属性和回调方法传递给子组件进行交互</li>
<li>如果是兄弟关系的组件，可以将需要交互的属性和方法提取到共同的父组件中，通过props传递给这两个兄弟组件进行交互</li>
<li>如果是兄弟关系的组件，如A、B，且需要在B中使用A的属性，这个属性是A特有的，不能直接提取到公共父组件中，那么可以在父组件的state中添加一个属性，如form，初始值为null，在A的可以componentDidMount方法中对父组件的form属性进行赋值，这样就可以让B使用A特有的属性</li>
<li>可以使用redux进行交互</li>
</ul>
<h2 id="render方法外渲染组件"><a href="#render方法外渲染组件" class="headerlink" title="render方法外渲染组件"></a>render方法外渲染组件</h2><p>在render方法外也可以渲染组件，但需要在render方法中预留好div，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 正常渲染的组件</div><div class="line">class CommonComponent extends Component &#123;</div><div class="line">	render() &#123;</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;Button&gt;正常显示的组件&lt;/Button&gt;</div><div class="line">				&lt;div id=&quot;specialComponent&quot;&gt;&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">// 在其他地方，个人认为应该在componentDidMount方法中</div><div class="line">componentDidMount() &#123;</div><div class="line">	const dom = document.getElementById(&apos;specialComponent&apos;);</div><div class="line">	if (dom !== null) &#123;</div><div class="line">		ReactDOM.render(&lt;Input placeholder=&quot;render外渲染的组件&quot; /&gt;, dom);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong><br>如果采用这种特殊方式渲染的组件引用到了其父组件的props或state，还需要在componentDidUpdate方法中进行同样的在操作，否则这个特殊方式渲染的组件不会刷新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate() &#123;</div><div class="line">	const dom = document.getElementById(&apos;specialComponent&apos;);</div><div class="line">	if (dom !== null) &#123;</div><div class="line">		ReactDOM.render(&lt;Input placeholder=&quot;render外渲染的组件&quot; /&gt;, dom);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="应避免使用style属性"><a href="#应避免使用style属性" class="headerlink" title="应避免使用style属性"></a>应避免使用style属性</h2><p>React可以通过给组件设置style属性，进行CSS样式控制，但是不建议这么做，最好是通过指定className来进行样式控制，方便维护。</p>
<h2 id="使用数据结构解决问题"><a href="#使用数据结构解决问题" class="headerlink" title="使用数据结构解决问题"></a>使用数据结构解决问题</h2><p>如果组件本身的属性无法支持某些功能，可以考虑通过定义数据结构进行解决，如对属性值进行拼接，再拆分，如菜单的key以ID%|%NAME的形式出现。</p>
<h2 id="与redux关联的组件ref问题"><a href="#与redux关联的组件ref问题" class="headerlink" title="与redux关联的组件ref问题"></a>与redux关联的组件ref问题</h2><p>如果组件（如QueryChoose）组件，是与redux相关联的，对于使用react-redux的情况，也就是组件外调用了connect方法，需要在connect方法的mapStateToProps参数的返回对象中，添加ref属性（如ref:’innerQueryChoose’），在外层组件A引用到QueryChoose时指定ref属性（如ref:’wapperQueryChoose’），则在A中调用QueryChoose组件的方法或属性时，这样引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// A组件中</div><div class="line">this.refs.wapperQueryChoose.refs.innerQueryChoose.someMethod();</div></pre></td></tr></table></figure></p>
<h2 id="setTimeout更新state"><a href="#setTimeout更新state" class="headerlink" title="setTimeout更新state"></a>setTimeout更新state</h2><p>有时使用this.setState()更新组件的状态，不会反映到页面上，具体什么时候可以反映到页面上还不清楚，目前发现会出现这种现象的地方有两处：Tabs.TabPane内部的组件、Modal内部的组件。需要使用setTimeout才能达到更新状态的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">	this.setState(&#123;</div><div class="line">		newState</div><div class="line">	&#125;);</div><div class="line">&#125;,0);</div></pre></td></tr></table></figure></p>
<h2 id="带着信息跳转路由"><a href="#带着信息跳转路由" class="headerlink" title="带着信息跳转路由"></a>带着信息跳转路由</h2><p>跳转到新路由时，需要带有某些信息，并且不想在url中显示这些信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this.context.router.push(&#123;</div><div class="line">	pathname: &apos;xxxx&apos;,// 跳转的新路由</div><div class="line">	state: &#123;&#125;// 信息放在这里</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在路由跳转的页面中，获取这些信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const urlInfo = this.props.location.state;</div></pre></td></tr></table></figure></p>
<h2 id="Smart-Components-and-Dumb-Components"><a href="#Smart-Components-and-Dumb-Components" class="headerlink" title="Smart Components and Dumb Components"></a>Smart Components and Dumb Components</h2><p>也有叫Container Components and Presentational components的。</p>
<p><strong>Smart component：</strong><br>是连接Redux的组件(@connect)，一般不可复用，类似MVC的C层  </p>
<blockquote>
<p>描述事物怎样工作<br>不提供DOM标签和样式<br>提供数据，进行数据获取<br>发起action<br>存放在containers目录  </p>
</blockquote>
<p><strong>Dumb component：</strong><br>是纯粹的组件，一般可复用，类似MVC的V层  </p>
<blockquote>
<p>描述事物的样子<br>不依赖应用<br>直接收props，包括数据和回调方法<br>很少有自己的state，有也是跟UI相关的<br>存放在components目录  </p>
</blockquote>
<p>两者的共同点是：无状态，或者说状态提取到上层，统一由 redux 的 store 来管理。redux state -&gt; Smart component -&gt; Dumb component -&gt; Dumb component（通过 props 传递）。在实践中，少量 Dumb component 允许自带 UI 状态信息（组件 unmount 后，不需要保留 UI 状态）。<br>值得注意的是：Smart component 是应用更新状态的最小单元。实践中，可以将 route handlers 作为 Smart component，一个 Smart component 对应一个 reducer。</p>
<img src="/2016/09/12/react-experience1/smart-dumb-components.png" title="结果如图">
<h2 id="ref回调函数"><a href="#ref回调函数" class="headerlink" title="ref回调函数"></a>ref回调函数</h2><p>今天无意看到了ref可以使用回调函数的用法，这个回调函数在组件安装后立即执行，被引用的组件作为一个参数传递，且回调函数可以立即使用这个组件，或保存供以后使用(或实现这两种行为)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TextInput ref=&#123;(node) =&gt; (this._input = node)&#125; /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="将函数传递到父组件的state中"><a href="#将函数传递到父组件的state中" class="headerlink" title="将函数传递到父组件的state中"></a>将函数传递到父组件的state中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+---------------------------------------------------------+</div><div class="line">| +---------+                                             |</div><div class="line">| |C        |                                           A |</div><div class="line">| +---------+                                             |</div><div class="line">+---------------------------------------------------------+</div><div class="line">|                                                         |</div><div class="line">|                        Dashboard                        |</div><div class="line">|                                                         |</div><div class="line">|                                                         |</div><div class="line">|   +---------------------+    +----------------------+   |</div><div class="line">|   |    B                |    |                      |   |</div><div class="line">|   | +              +    |    +---------&gt;            |   |</div><div class="line">|   | |              |    |    |                      |   |</div><div class="line">|   | |   +          |    |    +-------------&gt;        |   |</div><div class="line">|   | |   |    +     |    |    |                      |   |</div><div class="line">|   | |   |    |     |    |    |                      |   |</div><div class="line">|   +-+---+----+-----+----+    +----------------------+   |</div><div class="line">|                                                         |</div><div class="line">+---------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>A组件是B、C组件的公共祖先组件，C组件需要用到B组件的方法method，首先想到的是把method放到A中定义，然后传入B和C。但是如果不使用ref在A中定义无法获取B私有的状态和其它信息，而且实际中C是A的第一层子组件，B是A的第。我想到的解决方法是：A定义一个方法update接收参数更新自己的state，将update方法传入B中，B将method作为参数调用update方法，这样就将method定义为了A的state的一个属性，再传入C中，即可实现C中调用B中定义的方法。</p>
<h2 id="修改state的问题"><a href="#修改state的问题" class="headerlink" title="修改state的问题"></a>修改state的问题</h2><p>特别注意，当state中的属性是一个对象是，获取该对象进行属性值的修改后，页面当前不会按新状态显示，从react调试工具看该组件的状态时是修改后的值，可能操作几下页面会按新状态显示。原因是react不能直接修改state，如果是属性值是对象，需要进行深拷贝，修改值后在setState就没问题了。</p>
<h2 id="依赖更新的问题"><a href="#依赖更新的问题" class="headerlink" title="依赖更新的问题"></a>依赖更新的问题</h2><p>我和同事是同一套代码，没有任何不同，由于他npm install太慢，我把我的node_modules打成压缩包发给他，他的项目启动后会报一些奇怪的警告，我的就没有。执行完npm update就好了，很不明白这是为什么。</p>
<p>还有一个奇怪的问题，更新了antd依赖后，使用Tabs组件直接使用<tabs.tabpane>定义的内容可以显示，而调用一个方法返回<tabs.tabpane>会正常显示切换标签，切换后内容是空的，不报任何错误或警告。将整个node_modules删除后，重新安装依赖就正常了。</tabs.tabpane></tabs.tabpane></p>
<h2 id="Controller-View-Pattern"><a href="#Controller-View-Pattern" class="headerlink" title="Controller View Pattern"></a>Controller View Pattern</h2><p><a href="http://blog.andrewray.me/the-reactjs-controller-view-pattern/" target="_blank" rel="external">The ReactJS Controller View Pattern</a></p>
<h2 id="refs取不到组件的方法"><a href="#refs取不到组件的方法" class="headerlink" title="refs取不到组件的方法"></a>refs取不到组件的方法</h2><p>refs如果能取到组件的state和props，但是取不到组件定义的方法，可能是因为这些方法没有在构造函数中bind(this)。</p>
<h2 id="关于setState"><a href="#关于setState" class="headerlink" title="关于setState"></a>关于setState</h2><ul>
<li>如果setState函数的新状态没有改变当前状态，也会重新执行render方法</li>
<li>setState第二个参数可以是个回调函数，如果有些操作要求在界面重新渲染完成后进行，可以放在回调函数中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class CompB extends React.Component &#123;</div><div class="line">    render()&#123;</div><div class="line">		console.log(&quot;触发了CompB重新render&quot;)</div><div class="line">          	return (</div><div class="line">	            &lt;div&gt;</div><div class="line">	              	&lt;h1&gt;&#123;this.props.value&#125;&lt;/h1&gt;</div><div class="line">	            &lt;/div&gt;</div><div class="line">          	);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">class CompA extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            value: &apos;Hello, world!&apos;,</div><div class="line">        &#125;</div><div class="line">        this.onClick = this.onClick.bind(this);</div><div class="line">    &#125;</div><div class="line">    onClick() &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            value: &apos;你好！&apos;</div><div class="line">        &#125;, () =&gt; console.log(&quot;CompA的setState回调！&quot;));</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        console.log(&quot;触发了CompA重新render&quot;)</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">              	&lt;h1&gt;&#123;this.state.value&#125;&lt;/h1&gt;</div><div class="line">              	&lt;button onClick=&#123;this.onClick&#125;&gt;点击&lt;/button&gt;</div><div class="line">             	 &lt;hr/&gt;</div><div class="line">              	&lt;CompB value=&#123;this.state.value&#125; /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2016/09/12/react-experience1/setState1.png" title="运行结果如图">
<h2 id="forceUpdate函数"><a href="#forceUpdate函数" class="headerlink" title="forceUpdate函数"></a>forceUpdate函数</h2><ul>
<li>会导致组件本身及其包含的所有级别的子组件重新读取、计算与渲染，与其同级的无关组件不会重新渲染</li>
<li>所有UI组件的生命周期函数都会按生命周期规则来执行，如先进入componentWillUpdate再进入render</li>
<li>不会调用shouldComponentUpdate来检查是否允许重新渲染</li>
<li>可以提供一个回调函数，这个回调函数将在所有组件渲染完成后被调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class CompB extends React.Component &#123;</div><div class="line">    componentWillUpdate()&#123;</div><div class="line">        console.log(&quot;触发了CompB的componentWillUpdate：&quot;,this.props.value)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        console.log(&quot;触发了CompB重新render：&quot;,this.props.value)</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">            	&lt;h1&gt;&#123;this.props.value&#125;&lt;/h1&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class CompA extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            value: &apos;Hello, world!&apos;,</div><div class="line">        &#125;</div><div class="line">        this.onClick = this.onClick.bind(this);</div><div class="line">    &#125;</div><div class="line">    shouldComponentUpdate() &#123;</div><div class="line">        console.log(&quot;进入shouldComponentUpdate&quot;);</div><div class="line">    &#125;</div><div class="line">    onClick() &#123;</div><div class="line">        this.forceUpdate(() =&gt; console.log(&quot;渲染完成!!!&quot;));</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        console.log(&quot;触发了CompA重新render&quot;)</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">              	&lt;h1&gt;&#123;this.state.value&#125;&lt;/h1&gt;</div><div class="line">              	&lt;button onClick=&#123;this.onClick&#125;&gt;点击&lt;/button&gt;</div><div class="line">              	&lt;hr/&gt;</div><div class="line">              	&lt;CompB value=&quot;CompA的子组件&quot; /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(</div><div class="line">    &lt;div&gt;&lt;CompA /&gt;&lt;CompB value=&quot;与CompA无关的组件&quot;/&gt;&lt;/div&gt;,</div><div class="line">    document.getElementById(&apos;example&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/2016/09/12/react-experience1/forceUpdate1.png" title="运行结果如图">
<h2 id="关于render函数"><a href="#关于render函数" class="headerlink" title="关于render函数"></a>关于render函数</h2><p>可以在自己的代码中调用这个函数以重新刷新组件，注意只刷新了组件本身，不会刷新子组件，但这不是一个好办法。如在点击按钮的onClick方法中可直接调用this.render()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class CompB extends React.Component &#123;</div><div class="line">	render()&#123;</div><div class="line">		console.log(&quot;触发了CompB重新render&quot;)</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;h1&gt;&#123;this.props.value&#125;&lt;/h1&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">class CompA extends React.Component &#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		super(props);</div><div class="line">		this.state = &#123;</div><div class="line">			value: &apos;Hello, world!&apos;,</div><div class="line">		&#125;</div><div class="line">		this.onClick = this.onClick.bind(this);</div><div class="line">	&#125;</div><div class="line">	onClick() &#123;</div><div class="line">		this.render();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		console.log(&quot;触发了CompA重新render&quot;)</div><div class="line">		return (</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;h1&gt;&#123;this.state.value&#125;&lt;/h1&gt;</div><div class="line">				&lt;button onClick=&#123;this.onClick&#125;&gt;点击&lt;/button&gt;</div><div class="line">				&lt;hr/&gt;</div><div class="line">				&lt;CompB value=&#123;this.state.value&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/2016/09/12/react-experience1/render1.png" title="运行结果如图">
<h2 id="组件定义外的代码"><a href="#组件定义外的代码" class="headerlink" title="组件定义外的代码"></a>组件定义外的代码</h2><p>在React和React Native都发现，在每次系统刷新时（刷新浏览器或重新打开App程序），个人感觉会执行一遍所有文件（在几类文件中都输出了日志），就像此时是对所有的组件进行一遍声明一样，后面用到的地方才是正式的引用。<strong>这里需要注意的是，所有的文件都会在系统刷新时执行一遍，如果在组件定义外部进行了一些操作，如获取数据，那这个时候获取对不对，如果获取数据需要用户登录信息，这是很可能没有登录信息，有没有做处理。</strong></p>
<h2 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h2><p>如果使用了<code>{this.props.children}</code>显示子组件，想给子组件传递一些属性，可以使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;React.cloneElement(this.props.children, &#123;changeOpenState: this.changeOpenState&#125;)&#125;</div></pre></td></tr></table></figure>
<p>注意此时<code>this.props.children</code>是Object，如果<code>this.props.children</code>是数组，则需要遍历每个元素执行上面的cloneElement。</p>
<h2 id="监听浏览器窗口大小变化"><a href="#监听浏览器窗口大小变化" class="headerlink" title="监听浏览器窗口大小变化"></a>监听浏览器窗口大小变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">handleResize() &#123;</div><div class="line">    console.log(&quot;输出&quot;)</div><div class="line">&#125;</div><div class="line">componentDidMount() &#123;</div><div class="line">    window.addEventListener(&apos;resize&apos;, this.handleResize);</div><div class="line">&#125;</div><div class="line">componentWillUnmount() &#123;</div><div class="line">    window.removeEventListener(&apos;resize&apos;, this.handleResize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="巧用setTimeout"><a href="#巧用setTimeout" class="headerlink" title="巧用setTimeout"></a>巧用setTimeout</h2><p>项目中遇到一个问题，点击按钮执行了一个更新值的操作，然后调用保存方法，发现保存方法中获取的值并不是更新后的值，感觉是更新后的值没有执行完页面刷新呢，就进入了保存方法。由于setTimeout是在下一轮开始时进行，所以使用setTimeout可使更新在本轮刷新完成后在执行保存操作，达到保存更新后的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export function callSaveClickHandler() &#123;</div><div class="line">    const newData = &#123;</div><div class="line">        &apos;COL1&apos;: &apos;改变一个字段值&apos;,</div><div class="line">    &#125;;</div><div class="line">    this.props.cardActions.modifyCardChangedData(this.state.servDef.servDef.SERV_ID, newData, true, this.props.servType);</div><div class="line">    // 这样做的目的是样保存操作在下一轮开始时执行，这样才能获取到页面更新的内容</div><div class="line">    setTimeout(()=&gt;this.refs.btnBar.saveClickHandler(), 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="巧用路由"><a href="#巧用路由" class="headerlink" title="巧用路由"></a>巧用路由</h2><p>/list路由对应的是List组件，该组件主体是一个Tabs组件，默认选中的是第一个Tab。在什么都不处理的情况下，选中不同的Tab不会改变路由，当进入下一个页面并想返回时，总是返回到同一个路由，并且每次选中的只能是第一个Tab，这样的用户体验不好，用户想要的是在进入其它页面前选中的是哪个Tab，返回到上一页面也应该选中哪个Tab。</p>
<p>我的解决方法是，在点击不同Tab时添加回调函数，在里面根据当前选中哪个Tab更新一次路由（this.context.router.replace），也就是路由为/list/tab1、/list/tab2、…这种形式，这样无论是哪种方式进入到相应的路由，只要从路由中取出第二个斜杠后的值，就可以知道当前页面应该选中哪个Tab了。这样相比两个独立页面的好处：非 tab 部分都是公用的，无需重新渲染；点击 tab 切换后滚动条不会回到顶部。</p>
<h2 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h2><p>项目中遇到的问题是，在使用Table组件时，定义了行点击事件，这时行首部的复选框、行中带连接的文字、输入框等，点击的时候都会触发行点击事件。解决方式是在Table行上的组件外包一层div，并添加如下点击事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function stopPropagation(e) &#123;</div><div class="line">  e.stopPropagation();</div><div class="line">  e.nativeEvent.stopImmediatePropagation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>使用props可以进行上下层组件间属性的传递，使用context可以实现跨层组件间属性的传递。适合使用context的场景包括床底登录信息、当前语言以及主题信息等。而且，react-redux的Provider组件就使用了context来传递store。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">class Level2 extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div id=&quot;parent2&quot;&gt;</div><div class="line">                &lt;p&gt;&#123;this.context.name&#125;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Level2.contextTypes = &#123;</div><div class="line">    name: React.PropTypes.string.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Level1 extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div id=&quot;parent1&quot;&gt;</div><div class="line">                &lt;Level2 /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Root extends React.Component &#123;</div><div class="line">    // 注意如果name的属性值为null，会报警告，如下图所示</div><div class="line">    getChildContext() &#123;</div><div class="line">        return &#123;name: &apos;顶层属性&apos;&#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div id=&quot;parent&quot;&gt;</div><div class="line">                &lt;Level1 /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Root.childContextTypes = &#123;</div><div class="line">    name: React.PropTypes.string.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Root /&gt;,</div><div class="line">    document.getElementById(&apos;example&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<img src="/2016/09/12/react-experience1/null.png" title="getChildContext返回name为null">
<p>在使用中发现了一个问题，在一个组件提供的context值改变时，使用这个值的子节点并没有接受到context的改变，没有达到要跨级共享数据的效果。网上说可以在这个提供context组件值改变时执行setState这样就会更新了，但通常使用context都是在组件顶层，这样进行整个重新渲染感觉不太好。</p>
]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5-基础]]></title>
      <url>https://zhulichao.github.io/2016/09/04/html5-base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看的《HTML秘籍》，对HTML5有了初步的了解，总结如下。</p>
<h2 id="推出理由"><a href="#推出理由" class="headerlink" title="推出理由"></a>推出理由</h2><ul>
<li>Web浏览器之间兼容性低</li>
<li>文档结构不明确</li>
<li>Web应用程序功能受限制</li>
</ul>
<h2 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h2><ul>
<li>标准不应该引入导致已有网页无法工作的改变</li>
<li>标准化了非官方、但广泛应用的技术</li>
<li>以实用为目的</li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>包含可选的<code>&lt;html&gt;&lt;body&gt;&lt;head&gt;</code>元素</li>
<li>标签全部小写</li>
<li>为属性值加引号</li>
</ul>
<h2 id="元素家族"><a href="#元素家族" class="headerlink" title="元素家族"></a>元素家族</h2><p><strong>新增的元素</strong></p>
<blockquote>
<p>用于构建页面的语义元素 <code>&lt;article&gt;&lt;aside&gt;&lt;figcaption&gt;&lt;figure&gt;&lt;footer&gt;&lt;header&gt;&lt;nav&gt;&lt;section&gt;&lt;details&gt;&lt;summary&gt;</code></p>
<p>用于标识文本的语义元素 <code>&lt;mark&gt;&lt;time&gt;&lt;wbr&gt;</code></p>
<p>Web表单及交互 <code>&lt;input&gt;&lt;datalist&gt;&lt;keygen&gt;&lt;meter&gt;&lt;progress&gt;&lt;command&gt;&lt;menu&gt;&lt;output&gt;</code></p>
<p>音频、视频及插件 <code>&lt;autio&gt;&lt;video&gt;&lt;source&gt;&lt;embed&gt;</code></p>
<p>Canvas <code>&lt;canvas&gt;</code></p>
<p>非英语支持 <code>&lt;bdo&gt;&lt;rp&gt;&lt;rt&gt;&lt;ruby&gt;</code></p>
</blockquote>
<p><strong>删除的元素</strong></p>
<blockquote>
<p>为网页添加样式的元素，如 <code>&lt;big&gt;&lt;center&gt;&lt;font&gt;&lt;tt&gt;&lt;strike&gt;</code></p>
<p>HTML框架，如 <code>&lt;frameset&gt;&lt;frame&gt;</code>，但保留了 <code>&lt;iframe&gt;</code></p>
<p>冗余或容易导致误会的元素，如 <code>&lt;acronym&gt;&lt;applet&gt;</code></p>
</blockquote>
<p><strong>改变的元素</strong></p>
<blockquote>
<p>将旧元素用于新目的，如 <code>&lt;small&gt;&lt;hr&gt;&lt;s&gt;</code></p>
<p>停止从格式角度看问题，转换成具有真实逻辑含义的元素，如 <code>&lt;b&gt;&lt;i&gt;</code> 分别被 <code>&lt;strong&gt;&lt;em&gt;</code> 取代</p>
</blockquote>
<p><strong>调整的元素</strong></p>
<blockquote>
<p>调整了元素的使用规则，如 <code>&lt;address&gt;&lt;cite&gt;</code></p>
</blockquote>
<p><strong>标准化的元素</strong></p>
<blockquote>
<p><code>&lt;embed&gt;&lt;wbr&gt;</code></p>
</blockquote>
<h2 id="构建更好的表单"><a href="#构建更好的表单" class="headerlink" title="构建更好的表单"></a>构建更好的表单</h2><blockquote>
<p>改良了input元素，url、email、date、number、range等类型</p>
<p>占位水印 placeholder、自动获取焦点 autofocus</p>
<p>增加了表单验证，required、pattern、自定义验证</p>
<p>进度条 <code>&lt;progerss&gt;</code>、计量条 <code>&lt;meter&gt;</code></p>
</blockquote>
<h2 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h2><blockquote>
<p>音频、视频、canvas</p>
<p>File API，有说 File API 不是HTML5规范的内容，但得到了浏览器较好的支持</p>
<p>Web存储，localStorage 和 sessionStorage</p>
<p>通过描述文件缓存资源</p>
<p>服务器发送事件</p>
<p>WebSocket</p>
<p>地理定位</p>
<p>Web Worker</p>
</blockquote>
<h2 id="零散知识"><a href="#零散知识" class="headerlink" title="零散知识"></a>零散知识</h2><p>文字循环滚动</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">"scroll"</span> <span class="attr">direction</span>=<span class="string">"row"</span>&gt;</span>啦啦啦，真的会动耶！<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习计划]]></title>
      <url>https://zhulichao.github.io/2016/09/03/study-plan/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Web前端知识"><a href="#Web前端知识" class="headerlink" title="Web前端知识"></a>Web前端知识</h1><h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><p><a href="https://roadmap.sh/" target="_blank" rel="external">Developer Roadmaps</a><br><a href="https://github.com/thedaviddias/Front-End-Checklist" target="_blank" rel="external">Front-End-Checklist</a></p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a><br><a href="http://blog.andrewray.me/" target="_blank" rel="external">Andrew Ray’s Blog</a><br><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">React Native指南汇集了各类react-native学习资源、开源App和组件</a><br><a href="https://github.com/lcxfs1991/blog" target="_blank" rel="external">leehey’s blog</a><br><a href="http://www.jianshu.com/users/4713cde8f222/latest_articles" target="_blank" rel="external">有情怀的程序猿</a> </p>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>《HTML5秘籍》</p>
<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><p>《图解CSS3:核心技术与案例实战》</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>《JavaScript高级程序设计》<br>《JavaScript语言精粹》</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>《ES6标准入门 2》</p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>…</p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>《React精髓》<br>《React导学》<br>《React:引领未来的用户界面开发框架》<br>《React与Redux开发实例精解》<br><a href="http://www.ruanyifeng.com/blog/2016/11/javascript.html" target="_blank" rel="external">JavaScript 全栈工程师培训教程</a></p>
<h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h2><p><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">React Router 使用教程</a><br><a href="https://github.com/reactjs/react-router-tutorial/tree/master/lessons" target="_blank" rel="external">react-router-tutorial</a><br><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external">react-router</a> </p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一）：基本用法</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux 入门教程（二）：中间件与异步操作</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">Redux 入门教程（三）：React-Redux 的用法</a> </p>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>《Web全栈工程师的自我修养》<br>《哈佛情商课:献给奋斗中的你》<br>《精益创业》<br>《关键对话》<br>…</p>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p><a href="http://webpack.github.io/docs/tutorials/getting-started/" target="_blank" rel="external">快速上手</a><br><a href="http://www.cnblogs.com/vajoy/p/4650467.html" target="_blank" rel="external">一小时包教会</a><br><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">webpack-demos</a> </p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">Git教程</a></p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>…</p>
<hr>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>《写给大家看的设计书》<br>《精益创业UX篇 高效用户体验设计》<br>《Web表单设计：点石成金的艺术》<br>《用户体验要素》</p>
<hr>
<h1 id="移动端知识"><a href="#移动端知识" class="headerlink" title="移动端知识"></a>移动端知识</h1><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>《React Native 跨平台移动应用开发》<br>《React Native 入门与实战》<br>《React Native 开发指南》</p>
<h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p>《微信小程序入门指南》</p>
]]></content>
      
        <categories>
            
            <category> 前端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
